
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title type="text">Andrea Leopardi</title>
  <subtitle type="text">Writing about Elixir, system architecture, and more.</subtitle>
  <updated>2025-07-09T09:11:18.058447965+00:00</updated>
  <link rel="self" type="application/atom+xml" href="https://andrealeopardi.com/tags/elixir/feed.xml" />
  <link rel="alternate" type="text/html" href="https://andrealeopardi.com/" />
  <id>https://andrealeopardi.com/</id>
  <author>
    <name>Andrea Leopardi</name>
    <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
    <email>hi@andrealeopardi.com</email>
  </author>
  <generator uri="https://www.getzola.org">Zola</generator>
  <icon>https://andrealeopardi.com/favicons/apple-touch-icon.png</icon>
  <logo>https://andrealeopardi.com/favicons/apple-touch-icon.png</logo>

  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;get-rid-of-your-old-database-migrations&#x2F;</id>
      <title type="html"><![CDATA[ Get Rid of Your Old Database Migrations ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/get-rid-of-your-old-database-migrations/"
            title="Get Rid of Your Old Database Migrations" />
      <published>2022-11-28T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2022-11-28T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;Database migrations are great. I love to be able to change the shape of tables and move data around in a controlled way to avoid issues and downtime. However, lately I started to view migrations more like &lt;em&gt;Git commits&lt;/em&gt; than like active pieces of code in my applications. In this post, I want to dig a bit deeper into the topic. I&apos;ll start with some context on database migrations, I&apos;ll expand on the Git commits analogy, and I&apos;ll show you &lt;em&gt;what I&apos;ve been doing instead&lt;/em&gt;.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;Database migrations are great. I love to be able to change the shape of tables and move data around in a controlled way to avoid issues and downtime. However, lately I started to view migrations more like &lt;em&gt;Git commits&lt;/em&gt; than like active pieces of code in my applications. In this post, I want to dig a bit deeper into the topic. I&apos;ll start with some context on database migrations, I&apos;ll expand on the Git commits analogy, and I&apos;ll show you &lt;em&gt;what I&apos;ve been doing instead&lt;/em&gt;.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;I mostly write Elixir, so my examples will be in Elixir. If you&apos;re interested in the workflow Iâ€™m currently using for Elixir, jump to the last section of the post.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/get-rid-of-your-old-database-migrations/cover-image.png&quot; alt=&quot;Cover image of a flock of birds flying, with a sunset sky in the background&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;what-are-db-migrations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-db-migrations&quot; aria-label=&quot;Anchor link for: what-are-db-migrations&quot;&gt;What Are DB Migrations&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;DB migrations are pieces of code that you run to &lt;strong&gt;change the schema (and data, if desired) of your database&lt;/strong&gt;. Wikipedia does &lt;a href=&quot;https://en.wikipedia.org/wiki/Schema_migration&quot;&gt;a great job&lt;/a&gt; at explaining migrations, their history, and their use cases. I&apos;ll write a few words here for context, but go read that if you want to dig deeper.&lt;/p&gt;&lt;p&gt;Migrations have a few selling points over executing direct SQL commands.&lt;/p&gt;&lt;p&gt;First, database migrations usually &lt;em&gt;keep information&lt;/em&gt; about the migrations themselves in a dedicated database table. To be precise, the framework that runs the migrations is the one storing information in that table. The framework uses this table to only run migrations that have not been run yet.&lt;/p&gt;&lt;p&gt;Another benefit is that you&apos;ll usually write migrations in a way that makes it possible to &lt;strong&gt;roll them back&lt;/strong&gt;. &quot;Rolling back&quot; a migration means executing SQL statements that revert the changes done in that migration. Most database frameworks can infer the rollback steps from the migration definition if the migration is simple enough. This results in concise pieces of code to alter the database schema that can be executed &quot;in both directions&quot;.&lt;/p&gt;&lt;p&gt;Let&apos;s see an example with &lt;a href=&quot;https://github.com/elixir-ecto/ecto&quot;&gt;Ecto&lt;/a&gt;, Elixir&apos;s database framework.&lt;/p&gt;&lt;h3 id=&quot;example-with-ecto&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-with-ecto&quot; aria-label=&quot;Anchor link for: example-with-ecto&quot;&gt;Example with Ecto&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let&apos;s say you have a &lt;code&gt;users&lt;/code&gt; table with columns &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;. New requirements force you to add two new columns, &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt;. To do that, you can write a migration that looks like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MyApp&lt;/span&gt;.&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AddNameToUsers&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Migration&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    alter table&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;users&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      add &lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;first_name&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      add &lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;last_name&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;string&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this simple example, the framework is able to do what I mentioned above: you can define a single &lt;code&gt;change/0&lt;/code&gt; function with migration steps in it, and the framework is able to infer the corresponding rollback steps (in this case, removing the two new columns).&lt;/p&gt;&lt;p&gt;When you run the migration (with &lt;code&gt;mix ecto.migrate&lt;/code&gt; in this case), Ecto adds a row to the &lt;code&gt;schema_migrations&lt;/code&gt; table:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;code&gt;version&lt;/code&gt;&lt;/th&gt;&lt;th&gt;&lt;code&gt;inserted_at&lt;/code&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;20221114232841&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code&gt;2022-11-15 21:27:50&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;why-do-we-keep-migrations-around&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-do-we-keep-migrations-around&quot; aria-label=&quot;Anchor link for: why-do-we-keep-migrations-around&quot;&gt;Why Do We Keep Migrations Around?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Until recently, I had never worked on an application that did not keep &lt;em&gt;all the migrations&lt;/em&gt; around. I&apos;d always seen the &lt;code&gt;priv/repo/migrations&lt;/code&gt; directory in Elixir applications full of files. I want to get one disclaimer out of the way: the many-migrations experience is a personal one, and I might be late to the party here. But hey, here&apos;s to hoping someone else is too and that this write-up is gonna help them out.&lt;/p&gt;&lt;p&gt;At one point, I started working on an older unfamiliar codebase. The experience made me think of two things.&lt;/p&gt;&lt;p&gt;The first one is reading the &lt;strong&gt;complete, up-to-date database schema structure&lt;/strong&gt;. I&apos;d constantly fire up a Postgres GUI (I use &lt;a href=&quot;https://tableplus.com&quot;&gt;TablePlus&lt;/a&gt;) to look at the structure of the database, since it was hard to navigate old migrations and piece together what their end result is.&lt;/p&gt;&lt;p&gt;The second one revolves around &lt;strong&gt;searching through code&lt;/strong&gt;. Working on the new codebase involved &lt;em&gt;a lot&lt;/em&gt; of searching all around the code to understand the structure of the application. Function names, modules, database columns, and what have you. However, database columns stuck with me: I&apos;d always find a bunch of misleading search results in old migrations. For example, I&apos;d see a few results for a column name that was created, then modified, and then dropped.&lt;/p&gt;&lt;p&gt;So I started wondering: why do we keep old migrations around? Don&apos;t get me wrong, I know why we &lt;em&gt;write&lt;/em&gt; migrations in the first place. They&apos;re great, no doubts. But why not &lt;strong&gt;throw them away&lt;/strong&gt; after they&apos;ve done their job? How many times did you roll back &lt;em&gt;more than one migration&lt;/em&gt;? I have never done that. It&apos;s hard to imagine rolling back many changes, especially when they involve not only the schema but also the data in the database itself. There must be a better way.&lt;/p&gt;&lt;h3 id=&quot;analogy-with-git-commits&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#analogy-with-git-commits&quot; aria-label=&quot;Anchor link for: analogy-with-git-commits&quot;&gt;Analogy with Git Commits&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I started to think of database migrations more like Git commits. You apply commits to get to the current state of your application. You apply database migrations to get to the current schema of your database. But after some time, Git commits become a tool for keeping track of history more than an active tool for moving back and forth between versions of the code. I&apos;m now leaning towards treating database migrations the same way. I want them to stick around for a bit, and then &quot;archive&quot; them away. They&apos;re always going to be in the Git history, so Iâ€™m never really losing the source file, only the ability to apply the migrations.&lt;/p&gt;&lt;p&gt;So, how do we deal with this in practice?&lt;/p&gt;&lt;h3 id=&quot;dumping-and-loading&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dumping-and-loading&quot; aria-label=&quot;Anchor link for: dumping-and-loading&quot;&gt;Dumping and Loading&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;It turns out that this is something others have already thought about.&lt;/p&gt;&lt;p&gt;Database frameworks that provide migration functionality usually provide ways to &lt;strong&gt;dump&lt;/strong&gt; and &lt;strong&gt;load&lt;/strong&gt; a database schema. If they don&apos;t, fear not: major databases provide that themselves. In fact, in Elixir Ecto&apos;s dump and load tasks only really act as proxies on top of tools provided by the underlying databases (such as &lt;code&gt;pg_dump&lt;/code&gt; and &lt;code&gt;psql&lt;/code&gt; for PostgreSQL).&lt;/p&gt;&lt;p&gt;The idea is always the same: to get the current state of the database, you&apos;ll run the &lt;strong&gt;dumping task&lt;/strong&gt;. With Ecto and other frameworks, this produces an SQL file of instructions that you can feed to your database when you want to load the schema again.&lt;/p&gt;&lt;p&gt;Some frameworks provide a way to &lt;em&gt;squash migrations&lt;/em&gt; instead. Django, for example, has the &lt;a href=&quot;https://docs.djangoproject.com/en/4.1/topics/migrations/#migration-squashing&quot;&gt;&lt;code&gt;squashmigrations&lt;/code&gt; command&lt;/a&gt;. However, the concept is almost the same. &lt;a href=&quot;https://rubyonrails.org&quot;&gt;Ruby on Rails&lt;/a&gt;&apos;s &lt;code&gt;ActiveRecord&lt;/code&gt; framework has a unique approach: it can &lt;a href=&quot;https://edgeguides.rubyonrails.org/active_record_migrations.html&quot;&gt;generate a &lt;strong&gt;Ruby&lt;/strong&gt; schema file from migrations&lt;/a&gt;. It can also generate the SQL schema file mentioned above via the database, but the Ruby approach is interesting. Its power is limited, however, since the Ruby schema file might not be able to reconstruct the exact schema of the database. From the documentation:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;While migrations may use execute to create database constructs that are not supported by the Ruby migration DSL, these constructs may not be able to be reconstituted by the schema dumper.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Dumping and loading the database schema works well in local development and testing, but &lt;em&gt;not in production&lt;/em&gt; though, right? You don&apos;t want to load a big old SQL file in a running production database. I think. Well, you don&apos;t really have to. Production databases tend to be reliable and (hopefully) backed up, so &quot;restoring&quot; a schema is not something you really do in production. It&apos;d be analogous to re-running all the migrations: you just never do it.&lt;/p&gt;&lt;h3 id=&quot;advantages-and-disadvantages-of-ditching-old-migrations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#advantages-and-disadvantages-of-ditching-old-migrations&quot; aria-label=&quot;Anchor link for: advantages-and-disadvantages-of-ditching-old-migrations&quot;&gt;Advantages and Disadvantages of Ditching Old Migrations&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I find that dumping old migrations and loading an up-to-date SQL file has a few &lt;strong&gt;advantages&lt;/strong&gt;.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;You get a complete view of the schema&lt;/strong&gt; â€” The SQL file with the database schema now represents a complete look at the structure of the database. You can see all the tables, indexes, default values, constraints, and so on. Sometimes, you&apos;ll still need to create migrations and run them, but they&apos;re going to live in your codebase only temporarily, and it&apos;s only going to be a handful of them at a time, instead of tens (or hundreds) of files.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt;: A minor but not irrelevant advantage of this approach is that it speeds up resetting the database for local development and tests. Applying migrations can do many unnecessary operations in the database, such as creating tables only to delete them just after. When loading the database dump, you&apos;re really doing the &lt;em&gt;smallest possible set of commands&lt;/em&gt; to get to the desired state.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;However, it&apos;s not all great here. There are some &lt;strong&gt;disadvantages&lt;/strong&gt; as well:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Digging through Git&lt;/strong&gt; â€”Â there are going to be situations in which you look at the migration table in your database and want to figure out the migration that corresponds to a given row. This approach makes this use case slightly more annoying, because you&apos;ll have to dig through your Git history to find the original migration. Not a big deal in my opinion, I don&apos;t really do this that much.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deploying without running migrations&lt;/strong&gt; â€”Â make sure to deploy and run migrations. With this approach, that&apos;s not something to give for granted. You might get a bit too comfortable dumping the current database schema and deleting migration files. You might end up in situations where you create a migration, run it locally, and then dump the schema and delete the migration, all without deploying. This would result in the migration not running in production.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;workflow-in-elixir&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#workflow-in-elixir&quot; aria-label=&quot;Anchor link for: workflow-in-elixir&quot;&gt;Workflow in Elixir&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now for a small section specific to Elixir. Ecto provides the dump and load tasks mentioned above, &lt;a href=&quot;https://hexdocs.pm/ecto_sql/Mix.Tasks.Ecto.Dump.html&quot;&gt;&lt;code&gt;mix ecto.dump&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/ecto_sql/Mix.Tasks.Ecto.Load.html&quot;&gt;&lt;code&gt;mix ecto.load&lt;/code&gt;&lt;/a&gt; respectively.&lt;/p&gt;&lt;p&gt;In my applications, I&apos;ve been doing something like this:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;I updated the common Mix aliases for dealing with migrations to take dumping/loading into account. Those aliases look something like this now:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;aliases&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-double-quoted z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-begin z-regexp z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;ecto.setup&lt;span class=&quot;z-punctuation z-definition z-constant z-end z-regexp z-elixir&quot;&gt;&amp;quot;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;ecto.create&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;ecto.load&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;ecto.migrate&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-double-quoted z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-begin z-regexp z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;ecto.reset&lt;span class=&quot;z-punctuation z-definition z-constant z-end z-regexp z-elixir&quot;&gt;&amp;quot;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;ecto.drop&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;ecto.setup&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;test&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;ecto.create --quiet&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;ecto.load --quiet --skip-if-loaded&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;ecto.migrate --quiet&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, the aliases now always run &lt;code&gt;mix ecto.load&lt;/code&gt; before calling &lt;code&gt;mix ecto.migrate&lt;/code&gt;. The &lt;code&gt;--skip-if-loaded&lt;/code&gt; flag in the &lt;code&gt;test&lt;/code&gt; alias ensures that the command is &lt;em&gt;idempotent&lt;/em&gt;, that is, can be run multiple times without changing the result.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;I added a Mix alias to &quot;dump migrations&quot;, that is, dump the current database structure and delete all the current migration files. It looks like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;aliases&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;dump_migrations&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;ecto.dump&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-variable z-other z-capture z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-capture z-elixir&quot;&gt;&amp;amp;&lt;/span&gt;delete_migration_files&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;delete_migration_files&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;_args&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Match all files in the 21st century (year is 20xx).
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;each&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;wildcard&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;priv/repo/migrations/20*.exs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt; migration_file &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;rm!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;migration_file&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;shell&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;info&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;bright&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;Deleted: &lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;reset&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;red&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; migration_file&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The path wildcard could be improved, or you could have logic that reads the files and checks that they&apos;re migrations. However, this does a good-enough job.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;conclusions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusions&quot; aria-label=&quot;Anchor link for: conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you start to look at database migrations as analogous to Git commits, you can start to treat them that way. We saw how to use the &quot;dumping&quot; and &quot;loading&quot; functionality provided by many database and database frameworks. We saw the advantages and disadvantages of this approach. Finally, I showed you the approach I use in Elixir.&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;testing-aws-in-elixir&#x2F;</id>
      <title type="html"><![CDATA[ Testing AWS in Elixir ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/testing-aws-in-elixir/"
            title="Testing AWS in Elixir" />
      <published>2022-01-25T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2022-01-25T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;At Community, we run most of our infrastructure and services on AWS. We use several AWS services. Many of our own services interact with AWS directly, such as by uploading and downloading files from S3, querying Athena, and more. Lately, I&apos;ve been trying to improve how we &lt;em&gt;test&lt;/em&gt; the interaction between our services and AWS, testing error conditions and edge cases as well as running reproducible integration tests. In this post, I&apos;ll talk about Localstack, mocks, ExAws, and more.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;At Community, we run most of our infrastructure and services on AWS. We use several AWS services. Many of our own services interact with AWS directly, such as by uploading and downloading files from S3, querying Athena, and more. Lately, I&apos;ve been trying to improve how we &lt;em&gt;test&lt;/em&gt; the interaction between our services and AWS, testing error conditions and edge cases as well as running reproducible integration tests. In this post, I&apos;ll talk about Localstack, mocks, ExAws, and more.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/testing-aws-in-elixir/cover-image.jpg&quot; alt=&quot;Cover image of a data center&quot; /&gt;&lt;/p&gt;&lt;span class=&quot;unsplash-credit&quot;&gt;
    Photo by &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;unsplash.com&amp;#x2F;@ianjbattaglia?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Ian Battaglia&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;p&gt;AWS is an external system that our system has limited control over. First, it operates over the network, which makes it vulnerable to all sorts of network issues and failures. Furthermore, I can&apos;t control how an AWS service operates or its business logic. However, as external services go, it&apos;s a stable one when it comes to its APIs.&lt;/p&gt;&lt;p&gt;When I work with external systems like AWS, I want to test two aspects:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;What happens on the uncommon code branches â€” network failures, services unavailable, all sorts of things that we know can (and will) happen.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;What happens when interacting with the actual service â€” I want the application&apos;s code to have some tests that execute the whole code that interacts with the external service end-to-end, without mocks in the middle.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let&apos;s take a look at these below. I set up &lt;a href=&quot;https://github.com/whatyouhide/testing_aws_in_elixir&quot;&gt;a repository&lt;/a&gt; with most of the code discussed here, so you can see it pieced together and working.&lt;/p&gt;&lt;h2 id=&quot;testing-uncommon-conditions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#testing-uncommon-conditions&quot; aria-label=&quot;Anchor link for: testing-uncommon-conditions&quot;&gt;Testing Uncommon Conditions&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Testing relatively-uncommon conditions (such as network failures) requires precise control of the external system. We do not have &lt;em&gt;any&lt;/em&gt; control of the external system in the case of something like AWS. &lt;strong&gt;Test doubles&lt;/strong&gt; are helpful in these cases.&lt;/p&gt;&lt;p&gt;I call &quot;test double&quot; any piece of code that mimics a dependency of a system but is only used in tests. Folks use terms like test double, mock, or stub interchangeably, but I&apos;m a stickler for this stuff, so I&apos;ll use &lt;em&gt;test double&lt;/em&gt; in this post.&lt;/p&gt;&lt;p&gt;In our case, AWS is a natural point where to define a contract between our system and an external dependency. I always think back to &lt;a href=&quot;https://twitter.com/josevalim&quot;&gt;JosÃ© Valim&lt;/a&gt;&apos;s legendary post &lt;a href=&quot;http://blog.plataformatec.com.br/2015/10/mocks-and-explicit-contracts/&quot;&gt;&quot;Mocks and Explicit Contracts&quot;&lt;/a&gt; when talking about these things. Go give it a read if you haven&apos;t read it already.&lt;/p&gt;&lt;h3 id=&quot;exaws-and-its-behaviour-with-a-u&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#exaws-and-its-behaviour-with-a-u&quot; aria-label=&quot;Anchor link for: exaws-and-its-behaviour-with-a-u&quot;&gt;ExAws and Its Behaviour (With a &quot;U&quot;)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To interact with AWS in our Elixir services we use &lt;a href=&quot;https://github.com/ex-aws/ex_aws&quot;&gt;ExAws&lt;/a&gt; and its plethora of service libraries. I generally like ExAws but lately found a not-very-advertised feature that I &lt;em&gt;love&lt;/em&gt;. I suspect it&apos;s not even intended for the purpose we&apos;re going to use it for here, but it fits like a glove.&lt;/p&gt;&lt;p&gt;ExAws&apos;s architecture is essentially made of a main ExAws library which contains code to make generic HTTP requests to various AWS services. On top of that, there are many service-specific libraries (such as &lt;a href=&quot;https://github.com/ex-aws/ex_aws_s3&quot;&gt;ex_aws_s3&lt;/a&gt;). These libraries usually define &lt;strong&gt;operations&lt;/strong&gt; that implement the &lt;a href=&quot;https://hexdocs.pm/ex_aws/ExAws.Operation.html&quot;&gt;&lt;code&gt;ExAws.Operation&lt;/code&gt;&lt;/a&gt; behaviour. Operations are just data structures. The way you use ExAws is that you create operations (that is, data structures) using the service-specific libraries and execute them against AWS using the main ExAws library.&lt;/p&gt;&lt;p&gt;This is where the cool things begin. ExAws also ships with the &lt;a href=&quot;https://hexdocs.pm/ex_aws/ExAws.Behaviour.html&quot;&gt;&lt;code&gt;ExAws.Behaviour&lt;/code&gt;&lt;/a&gt; behaviour, which defines the core functionality provided by the library. Well, wouldn&apos;t you know, that core functionality is exactly the set of functions that take operations and execute them against AWS. This is the perfect architecture for test doubles.&lt;/p&gt;&lt;h3 id=&quot;test-doubles-for-exaws&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#test-doubles-for-exaws&quot; aria-label=&quot;Anchor link for: test-doubles-for-exaws&quot;&gt;Test Doubles for ExAws&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We use &lt;a href=&quot;https://github.com/dashbitco/mox&quot;&gt;Mox&lt;/a&gt; for test doubles (well, &quot;mocks&quot; as the library calls them). In our application, we usually define a test double for &lt;code&gt;ExAws&lt;/code&gt; itself. It&apos;s as simple as the code below, which we have in a file called &lt;code&gt;test/support/mocks.ex&lt;/code&gt;. We add &lt;code&gt;test/support&lt;/code&gt; to &lt;code&gt;:elixirc_paths&lt;/code&gt; in &lt;code&gt;mix.exs&lt;/code&gt; for the &lt;code&gt;:test&lt;/code&gt; Mix environment.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Mox&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;defmock&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAwsMock&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;for&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Behaviour&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In any code that executes AWS requests, we don&apos;t use &lt;code&gt;ExAws.request/1&lt;/code&gt; or &lt;code&gt;ExAws.stream/1&lt;/code&gt;. Instead, we read the module to use at compile time from our application configuration (still defaulting to &lt;code&gt;ExAws&lt;/code&gt;).&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;ex_aws_mod&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;compile_env&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;my_app&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;test_doubles&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ex_aws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;get_s3_file&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;bucket&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    operation &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;get_object&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;bucket&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;ex_aws_mod&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;operation&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, testing this is straightforward using the functionality provided by Mox.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Mox&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;setup &lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;verify_on_exit!&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;test &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;some piece of code that uses get_s3_file/2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  expect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAwsMock&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt; operation &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert %&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; operation
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert operation&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;http_method &lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;get&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert operation&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;bucket &lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert operation&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;path &lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;expected/path&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;body&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;file contents&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  run_code&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Testing the uncommon cases is just as straightforward, since we control the value returned by the mock&apos;s function.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;expect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAwsMock&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt; _operation &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;http_error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We need little code to achieve all this. The operation data structure combined with the behaviour make it easy to build flexible test doubles that we can use to assert we are making the right calls to AWS and to control return values with precision.&lt;/p&gt;&lt;h2 id=&quot;integration-tests&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#integration-tests&quot; aria-label=&quot;Anchor link for: integration-tests&quot;&gt;Integration Tests&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Using test doubles works well in many cases, but it has one drawback that I can&apos;t get over. By using test doubles, we are &lt;em&gt;not exercising&lt;/em&gt; parts of our application code when running tests. Achieving 100% code coverage and exercising every single production code line when testing is not easy. Often, it&apos;s not worth it either. However, testing the interactions with AWS only in the running production code seems a bit too far on the other end.&lt;/p&gt;&lt;p&gt;Luckily, for this particular use case there&apos;s a pretty fantastic tool called &lt;a href=&quot;https://localstack.cloud/&quot;&gt;Localstack&lt;/a&gt;. Localstack provides a faithful replica of AWS itself, but running locally. It fits this use case perfectly (it was kind of built for local integration testing, you could say).&lt;/p&gt;&lt;p&gt;Just a note here: before Localstack, we sometimes used to use &lt;a href=&quot;https://github.com/parroty/exvcr&quot;&gt;ExVCR&lt;/a&gt; to perform this sort of more integration tests. ExVCR lets you &lt;em&gt;record HTTP requests&lt;/em&gt; and make sure that your requests conform to the recorded real requests. It can work well in some cases, but for AWS it didn&apos;t give us the flexibility of quickly changing the way we interface with AWS itself. On top of that, ExVCR is ultimately still defining test doubles under the hood, so we are still not exercising the real ExAws HTTP code.&lt;/p&gt;&lt;h3 id=&quot;running-localstack&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#running-localstack&quot; aria-label=&quot;Anchor link for: running-localstack&quot;&gt;Running Localstack&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We use &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; for running our production application, so we are heavily invested in the Docker ecosystem on our local machines too. We already use Docker and &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;Docker Compose&lt;/a&gt; locally to spin up infrastructure needed by the services we work on. A typical &lt;code&gt;docker-compose.yml&lt;/code&gt; file in one of our services looks like this:&lt;/p&gt;&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;version&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;3&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;services&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;event-bus&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;our-rabbitmq-image&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;5672:5672&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;15672:15672&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;redis&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;redis:5.0-alpine&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;6379:6379&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can run Localstack in a few different ways, but for us the natural fit is to add it as an infrastructure dependency in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;localstack&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;localstack/localstack&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;AWS_DEFAULT_REGION&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;us-west-2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;SERVICES&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;s3,sqs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;EDGE_PORT&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;4566&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;4566:4566&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, Localstack uses the &lt;code&gt;SERVICES&lt;/code&gt; environment variable configure which services to make available. In this case, we specified AWS S3 and AWS SQS.&lt;/p&gt;&lt;p&gt;We can now spin up local infrastructure the same way we did before, with &lt;code&gt;docker compose up&lt;/code&gt;. AWS S3 and AWS SQS are running locally, which is pretty cool.&lt;/p&gt;&lt;h3 id=&quot;pointing-exaws-to-localstack&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#pointing-exaws-to-localstack&quot; aria-label=&quot;Anchor link for: pointing-exaws-to-localstack&quot;&gt;Pointing ExAws to Localstack&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Next step is configuring ExAws to talk to the local Localstack running instance.&lt;/p&gt;&lt;p&gt;To do that, we add some configuration to &lt;code&gt;config/test.exs&lt;/code&gt; that only takes affect in the &lt;code&gt;:test&lt;/code&gt; Mix environment. You could easily adapt this to work similarly in the &lt;code&gt;:dev&lt;/code&gt; environment if you wanted to.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; In config/test.exs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;aws_uri &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;get_env&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;AWS_ENDPOINT_URL&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;http://localhost:4566&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;parse&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;for&lt;/span&gt; service &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;s3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;sqs&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  config &lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ex_aws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; service&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;scheme&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; aws_uri&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;scheme&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;host&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; aws_uri&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;host&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;port&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; aws_uri&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;port&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; You might also want to set bogus credentials:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;access_key_id&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my-key-id&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;secret_access_key&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my-secret-key&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&apos;re now almost ready to run some integration tests by talking to the local Localstack.&lt;/p&gt;&lt;h3 id=&quot;bypassing-the-exaws-test-double&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bypassing-the-exaws-test-double&quot; aria-label=&quot;Anchor link for: bypassing-the-exaws-test-double&quot;&gt;Bypassing the ExAws Test Double&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Remember that in our code we read the ExAws module to use &lt;strong&gt;at compile time&lt;/strong&gt;.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;ex_aws_mod&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;compile_env&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;my_app&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;test_doubles&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ex_aws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This means that we cannot use &lt;code&gt;ExAws&lt;/code&gt; as the module, because &lt;code&gt;@ex_aws_mod&lt;/code&gt; has been &lt;em&gt;compiled&lt;/em&gt; to &lt;code&gt;ExAwsMock&lt;/code&gt; in the test environment. This is great for performance since we don&apos;t need any runtime lookup to retrieve the ExAws module in production, so we&apos;re not really willing to change this approach.&lt;/p&gt;&lt;p&gt;Luckily, Mox ships with the perfect feature for this: the &lt;a href=&quot;https://hexdocs.pm/mox/Mox.html#stub_with/2&quot;&gt;&lt;code&gt;stub_with/2&lt;/code&gt; function&lt;/a&gt;. This function tells mock to call out to another module when defining the stubs for all the functions in the given module. The only requirement is that both the mock module passed as the first argument as well as the module passed as the second argument implement the same behaviour. Well, &lt;code&gt;ExAws&lt;/code&gt; implements the &lt;code&gt;ExAws.Behaviour&lt;/code&gt; already. The world is smiling upon us all here.&lt;/p&gt;&lt;p&gt;In integration tests that want to talk to the local Localstack instead of defining stubs and mocks for &lt;code&gt;ExAws&lt;/code&gt; functions, we do this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;setup &lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Mox&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;stub_with&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAwsMock&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This effectively &quot;resets&quot; the ExAws mock to use ExAws itself. To make this a little more streamlined, we can define this as a test helper function and use it similarly to how we use &lt;code&gt;setup :verify_on_exit!&lt;/code&gt; from Mox.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; In test_helpers.exs (or wherever you define your test helpers)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;TestHelpers&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;use_real_ex_aws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;_ex_unit_context&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Mox&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;stub_with&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAwsMock&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; In tests
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MyTest&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExUnit&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;TestHelpers&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  setup &lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;use_real_ex_aws&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;data-setup-and-teardown&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#data-setup-and-teardown&quot; aria-label=&quot;Anchor link for: data-setup-and-teardown&quot;&gt;Data Setup and Teardown&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;One missing piece of the puzzle here is that, when using Localstack, we need to manually perform some test setup and teardown. When using test doubles, we can decide &quot;on the fly&quot; what to return from the stub or mock functions, without having to &lt;em&gt;prepare&lt;/em&gt; the test doubles in any way. With Localstack, we need to perform all the necessary AWS setup and data setup (and teardown) in order for our tests to test something.&lt;/p&gt;&lt;p&gt;For example, imagine you want to test how your code retrieves a file from AWS S3 and writes its contents to a local file. To do that, you&apos;ll have to:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create a bucket in Localstack&apos;s S3&lt;/li&gt;&lt;li&gt;Write a file to that bucket&lt;/li&gt;&lt;li&gt;Exercise your code and run assertions&lt;/li&gt;&lt;li&gt;Likely, delete the bucket to clean up for other tests to run&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;These steps vary for different configurations and test architectures, but you get the idea. To do the setup and teardown, we just use ExAws directly and manually create the topology we want in the AWS services. For the S3 example above, we would do something like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;test &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;reading a file and writing it out&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Create some random bytes to store in the file.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  contents &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;crypto&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;strong_rand_bytes&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We set up an on_exit callback to empty and then delete the bucket
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; when the test exit, so that the next test has a clean slate.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  on_exit&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test-bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;list_objects&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;stream!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;each&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&amp;amp;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;delete_object&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test-bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-capture z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-capture z-elixir&quot;&gt;&amp;amp;&lt;/span&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;key&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;delete_bucket&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test-bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Create bucket.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;put_bucket&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test-bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;us-west-2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Upload a file.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;put_object&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test-bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my/random/file&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; contents&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Now, we run our code and assert on its behavior.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;download_s3_file!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test-bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my/random/file&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;to&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;localfile&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  assert &lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;read!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;localfile&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt; contents
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In this post we saw how ExAws provides the perfect functionality for easily writing integration tests using Localstack as well as defining test doubles for precise controls of behavior in testing. If you want to dig deeper into integration testing with Elixir, test doubles, end-to-end tests, and more, check out &lt;a href=&quot;https://pragprog.com/titles/lmelixir/testing-elixir/&quot;&gt;Testing Elixir&lt;/a&gt;, the book I co-wrote with &lt;a href=&quot;https://twitter.com/idlehands&quot;&gt;Jeffrey Matthias&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Remember to check out the &lt;a href=&quot;https://github.com/whatyouhide/testing_aws_in_elixir&quot;&gt;repository&lt;/a&gt; that contains all the code and techniques discussed in this post if you want to see it all in action.&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;example-based-tests-and-property-based-tests-are-best-friends&#x2F;</id>
      <title type="html"><![CDATA[ Example-based Tests And Property-based Tests Are Good Friends ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/example-based-tests-and-property-based-tests-are-best-friends/"
            title="Example-based Tests And Property-based Tests Are Good Friends" />
      <published>2022-01-09T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2022-01-09T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;I mostly use property-based testing to test stateless functional code. A technique I love to use is to pair property-based tests together with &lt;em&gt;example-based tests&lt;/em&gt; (that is, &quot;normal&quot; tests) in order to have some tests that check real input. Let&apos;s dive deeper into this technique, some contrived blog-post-adequate examples, and links to real-world examples.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;I mostly use property-based testing to test stateless functional code. A technique I love to use is to pair property-based tests together with &lt;em&gt;example-based tests&lt;/em&gt; (that is, &quot;normal&quot; tests) in order to have some tests that check real input. Let&apos;s dive deeper into this technique, some contrived blog-post-adequate examples, and links to real-world examples.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/example-based-tests-and-property-based-tests-are-best-friends/cover-image.jpg&quot; alt=&quot;Cover image of just a bunch of pencils&quot; /&gt;&lt;/p&gt;&lt;span class=&quot;unsplash-credit&quot;&gt;
    Photo by &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;unsplash.com&amp;#x2F;@dtpennington?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;David Pennington&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;p&gt;I&apos;ve been a vocal advocate of property-based testing for a while. I wrote &lt;a href=&quot;https://github.com/whatyouhide/stream_data&quot;&gt;&lt;code&gt;stream_data&lt;/code&gt;&lt;/a&gt;, a property-based testing framework for Elixir, &lt;a href=&quot;https://www.youtube.com/watch?v=p84DMv8TQuo&quot;&gt;gave talks about the topic&lt;/a&gt;, and used property-based testing at work and in my open-source software (such as &lt;a href=&quot;https://github.com/whatyouhide/corsica/blob/a4328f6bae1ccdaeb6d9fed14263c5c5a43540a6/test/properties_test.exs&quot;&gt;Corsica&lt;/a&gt; or &lt;a href=&quot;https://github.com/whatyouhide/redix/blob/53216ab4ba96ceceb3e963faca02e2bf25abdb9a/test/redix/protocol_test.exs&quot;&gt;Redix&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;The most common way I use property-based testing is to test &lt;em&gt;stateless&lt;/em&gt; pieces of code. These tend to be the easiest to come up with properties for.&lt;/p&gt;&lt;p&gt;In this short post, I want to talk about one of my favorite techniques to use when writing property-based tests: mixing properties with explicit &quot;example-based&quot; tests. Example-based tests are the tests you&apos;re used to, where you have some predefined inputs and expected respective outputs and assert that your code matches the inputs to the outputs.&lt;/p&gt;&lt;p&gt;The idea behind this technique is to combine the ability of property-based testing to test a wide range of input data together with some practical example-based tests that ensure that our code behaves as expected on real inputs.&lt;/p&gt;&lt;h2 id=&quot;diving-into-an-example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#diving-into-an-example&quot; aria-label=&quot;Anchor link for: diving-into-an-example&quot;&gt;Diving Into an Example&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I use this technique quite often. Recently, I used this when writing tests for some JSON-related code in the &lt;a href=&quot;https://github.com/elixir-protobuf/protobuf&quot;&gt;Protobuf library for Elixir&lt;/a&gt; that I help maintain. Let&apos;s take this as the main example.&lt;/p&gt;&lt;p&gt;We&apos;re writing a function called &lt;code&gt;parse_nanoseconds/1&lt;/code&gt; with this spec:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;spec&lt;/span&gt; parse_nanoseconds&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt; :: &lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;999_999_999&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Its job is to:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;take a string&lt;/li&gt;&lt;li&gt;extract the leading one to nine digits from it&lt;/li&gt;&lt;li&gt;parse those digits into an integer that represents conventional nanoseconds in a timestamp&lt;/li&gt;&lt;li&gt;return the parsed integer alongside whatever&apos;s left of the original string (similar to &lt;a href=&quot;https://hexdocs.pm/elixir/Integer.html#parse/1&quot;&gt;&lt;code&gt;Integer.parse/2&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For example, &lt;code&gt;123&lt;/code&gt; means 123 &lt;em&gt;milliseconds&lt;/em&gt;, so &lt;code&gt;123_000_000&lt;/code&gt; nanoseconds. &lt;code&gt;000_001&lt;/code&gt; means one microsecond, &lt;code&gt;000_000_001&lt;/code&gt; means one nanosecond. You get the idea. By the way, see what I did just now? I just showed you some &lt;strong&gt;examples&lt;/strong&gt; of how the function should behave. These make perfect material for our example-based tests.&lt;/p&gt;&lt;h3 id=&quot;designing-the-properties&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#designing-the-properties&quot; aria-label=&quot;Anchor link for: designing-the-properties&quot;&gt;Designing the Properties&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Thinking about properties that hold for the output of this function given a valid input, here&apos;s what I got.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;For valid strings of nine or fewer digits, the output of &lt;code&gt;parse_nanoseconds/1&lt;/code&gt; must be an integer in the range &lt;code&gt;0..999_999_999&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For any string of nine or fewer digits followed by any string &lt;code&gt;trail&lt;/code&gt;, &lt;code&gt;trail&lt;/code&gt; should be returned untouched.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I encoded these into a single &lt;code&gt;property&lt;/code&gt; test (this uses &lt;code&gt;stream_data&lt;/code&gt;):&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MyTest&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExUnit&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExUnitProperties&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  property &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;returns valid nanoseconds integer and trailing string&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Generator that generates strings of 1 to 9 digits.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    nanos_prefix_gen &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;?0&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;?9&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;min_length&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;max_length&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    check all nanos &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; nanos_prefix_gen&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;              rest &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;printable&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;              string &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; nanos &lt;span class=&quot;z-keyword z-operator z-binary-concatenation z-elixir&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest &lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      assert &lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;parsed_nanos&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; parsed_rest&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; parse_nanoseconds&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      assert parsed_nanos &lt;span class=&quot;z-keyword z-operator z-elixir&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;999_999_999&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      assert parse_rest &lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt; rest
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now for the catch: we can write a bunch of implementations of &lt;code&gt;parse_nanoseconds/1&lt;/code&gt; that satisfy this property with no issue, but that are &lt;strong&gt;semantically wrong&lt;/strong&gt;. A contrived, slightly-weird, but effective example is below.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Sneaky implementation that is wrong but satisfies our properties:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;parse_nanoseconds&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Regex&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-storage z-type z-string z-elixir&quot;&gt;~r&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-interpolated z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-escape-sequence z-regexp z-elixir&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;z-meta z-quantifier z-regexp z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-quantifier z-regexp z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-quantifier z-begin z-regexp z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-quantifier z-min z-regexp z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-quantifier z-regexp z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-quantifier z-max z-regexp z-elixir&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-quantifier z-end z-regexp z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; string&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;parts&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; rest&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; rest&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    _other &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The implementation above uses a regex to split the string in two parts on the first occurrence of one to nine digits. The &lt;code&gt;[&quot;&quot;, rest]&lt;/code&gt; match means that the string was split at the start, so a sequence of digits was found at the start. To keep getting weirder, we&apos;re just returning &lt;code&gt;0&lt;/code&gt; as the nanoseconds. Seems crazy, but guess what? It passes our property. Yeah.&lt;/p&gt;&lt;h3 id=&quot;reintroducing-example-based-tests&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reintroducing-example-based-tests&quot; aria-label=&quot;Anchor link for: reintroducing-example-based-tests&quot;&gt;Reintroducing Example-Based Tests&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Are property-based tests bad? Should we go back to example-based tests and curse the day we thought to use something cool? Well, what I like to do is reintroduce example-based tests to save the day but keep the property-based tests to get all the benefits from those.&lt;/p&gt;&lt;p&gt;I turned the property above into this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;property &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;returns a valid nanoseconds integer and the trailing string&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Example-based part:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  assert parse_nanoseconds&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;123foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;123_000_000&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  assert parse_nanoseconds&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;000000001&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Property part (unchanged):
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  nanos_prefix_gen &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;?0&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;?9&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;min_length&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;max_length&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  check all nanos &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; nanos_prefix_gen&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;            rest &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;printable&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;            string &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; nanos &lt;span class=&quot;z-keyword z-operator z-binary-concatenation z-elixir&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest &lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert &lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;parsed_nanos&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; parsed_rest&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; parse_nanoseconds&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert parsed_nanos &lt;span class=&quot;z-keyword z-operator z-elixir&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;999_999_999&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert parse_rest &lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt; rest
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With just a couple of example-based assertions thrown in there, the bogus implementation crumbles and fails miserably.&lt;/p&gt;&lt;p&gt;I sometimes keep the example-based assertions in the &lt;code&gt;property&lt;/code&gt; itself and other times prefer to split them up, but the principle stays the same.&lt;/p&gt;&lt;h3 id=&quot;regressions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#regressions&quot; aria-label=&quot;Anchor link for: regressions&quot;&gt;Regressions&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Another fantastic use case for using example-based tests together with property-based tests is testing &lt;strong&gt;regressions&lt;/strong&gt;. &lt;code&gt;stream_data&lt;/code&gt; (and I&apos;m sure other property-based testing frameworks) often gets feature requests to specify some explicit values in generators. This way, users can be sure that the property they&apos;re encoding will go through some known values that are likely to create issues because of the domain or that caused regressions in the past. My answer is always that this is exactly where the technique described in this blog post comes in handy. You can write your property and pair it up with example-based tests that test your explicit values.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This technique is simple, but I find it effective and practical. You get the benefits of property-based testing, like covering a wide range of inputs and discovering unhandled corner cases, but pair those with some practical examples. Those can provide you with some &quot;sanity checks&quot; to have at least some confidence that your code is doing what it&apos;s supposed to on real-world examples. Those example-based tests can also cover well-known &quot;problematic&quot; values of your input space as well as regressions.&lt;/p&gt;&lt;p&gt;If you are curious about actual examples, go look at the &lt;a href=&quot;https://github.com/elixir-protobuf/protobuf/blob/00144b3a08aac7a38e3e9774a438dcc7da3d8bc7/test/protobuf/json/utils_test.exs&quot;&gt;actual tests in the Protobuf library&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I wrote a bit more about this technique and in general about property-based testing in &lt;a href=&quot;https://pragprog.com/titles/lmelixir/testing-elixir/&quot;&gt;Testing Elixir&lt;/a&gt;, the Pragmatic Programmers book I co-authored with Jeffrey Matthias.&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;rpc-over-rabbitmq-with-elixir&#x2F;</id>
      <title type="html"><![CDATA[ RPC over RabbitMQ (with Elixir) ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/"
            title="RPC over RabbitMQ (with Elixir)" />
      <published>2020-11-23T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2020-11-23T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;At &lt;a href=&quot;https://www.community.com&quot;&gt;Community&lt;/a&gt;, we use &lt;a href=&quot;https://www.rabbitmq.com&quot;&gt;RabbitMQ&lt;/a&gt;, a lot. It&apos;s the infrastructure backbone that allows our services (over forty at this point) to communicate with each other. That mostly happens through &lt;strong&gt;events&lt;/strong&gt; (since we have an event-sourced system), but in some cases what we need is a &lt;em&gt;request-response&lt;/em&gt; interaction between two services. This is the best tool in a few use cases, like retrieving data on the fly or asking a service to do something and return a response. An industry standard for such interactions is HTTP, but we are not big fans of that. Instead, since RabbitMQ is so ubiquitous in our system, we settled on using it for request-response interactions as well in the form of &lt;strong&gt;Remote Procedure Calls&lt;/strong&gt; (RPCs). In this post, I&apos;ll go over the architecture of such interactions. I&apos;ll talk about the RabbitMQ topologies we use to make them work, the benefits around reliability, the compromises around performance, and finally how this all implemented to be as fault-tolerant as possible with Elixir.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;At &lt;a href=&quot;https://www.community.com&quot;&gt;Community&lt;/a&gt;, we use &lt;a href=&quot;https://www.rabbitmq.com&quot;&gt;RabbitMQ&lt;/a&gt;, a lot. It&apos;s the infrastructure backbone that allows our services (over forty at this point) to communicate with each other. That mostly happens through &lt;strong&gt;events&lt;/strong&gt; (since we have an event-sourced system), but in some cases what we need is a &lt;em&gt;request-response&lt;/em&gt; interaction between two services. This is the best tool in a few use cases, like retrieving data on the fly or asking a service to do something and return a response. An industry standard for such interactions is HTTP, but we are not big fans of that. Instead, since RabbitMQ is so ubiquitous in our system, we settled on using it for request-response interactions as well in the form of &lt;strong&gt;Remote Procedure Calls&lt;/strong&gt; (RPCs). In this post, I&apos;ll go over the architecture of such interactions. I&apos;ll talk about the RabbitMQ topologies we use to make them work, the benefits around reliability, the compromises around performance, and finally how this all implemented to be as fault-tolerant as possible with Elixir.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/cover-image.jpg&quot; alt=&quot;Cover image people queuing&quot; /&gt;&lt;/p&gt;&lt;span class=&quot;unsplash-credit&quot;&gt;
    Photo by &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;unsplash.com&amp;#x2F;@amandazi_photography?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;amandazi photography&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;h2 id=&quot;what-is-an-rpc&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-an-rpc&quot; aria-label=&quot;Anchor link for: what-is-an-rpc&quot;&gt;What is an RPC&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;An RPC can be seen as a function call across system boundaries, instead of at the code execution level. An RPC allows you to call a &lt;em&gt;procedure&lt;/em&gt; on another service and treat it mostly like a local function call (with the additional error handling to account for the network interaction).&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/sketch-rpc-definition.png&quot; alt=&quot;Sketch of caller and receiver of an RPC&quot; /&gt;&lt;/p&gt;&lt;p&gt;I won&apos;t go into too much detail about RPCs themselves, but you&apos;re probably familiar with a common form of RPC: HTTP. HTTP request-response interactions between services in a service-oriented architecture are essentially RPCs, they&apos;re just less explicit on the fact that they&apos;re &lt;em&gt;calling a procedure&lt;/em&gt;. One of the benefits of RPCs is, like HTTP, that they are agnostic of technologies. A services written in Elixir can make an RPC (or HTTP request) to a service written in Go, for example. If you want to read more about RPCs, their definition, their benefits, and more, guess where I&apos;ll link you to? Exactly, &lt;a href=&quot;https://en.wikipedia.org/wiki/Remote_procedure_call&quot;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Throughout this post, I will refer to the services involved in an RPC as the &lt;strong&gt;caller service&lt;/strong&gt; and the &lt;strong&gt;receiver service&lt;/strong&gt;.&lt;/p&gt;&lt;h2 id=&quot;why-rpcs-over-rabbitmq&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-rpcs-over-rabbitmq&quot; aria-label=&quot;Anchor link for: why-rpcs-over-rabbitmq&quot;&gt;Why RPCs over RabbitMQ&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;At Community, we chose to do RPCs over RabbitMQ, instead of the common service-to-service communication via HTTP, for a few reasons.&lt;/p&gt;&lt;p&gt;The main reason is that we want to use message queues as often as possible. When you have a queue-based message broker between services that talk to each other, the availability requirements of the services can be less demanding. If you have two services that communicate over HTTP, then if the receiver service is down it means that the requester service will not get a response. Instead, the requester service will have to implement request retries in order to increase the chances of a successful request. With RabbitMQ in the middle, if the receiver is down then the RPC is queued and can be picked up once the receiver comes back up.&lt;/p&gt;&lt;p&gt;Another important reason that influenced our decision is that we make heavy use of RabbitMQ for all sorts of things. This means our engineer know it well, our infrastructure is solid, and we have good systems to trace and observe messages flowing through it.&lt;/p&gt;&lt;p&gt;One compromise we had to make is that, generally speaking, RPCs over RabbitMQ tend to be &lt;em&gt;slower&lt;/em&gt; than direct service-to-service communication (such as HTTP). This is hard to avoid given that in our case we have a message broker sitting between the caller service and the receiver service. That means that you&apos;ll &lt;em&gt;at least&lt;/em&gt; have twice the RTT (round-trip time) on the network, since the messages you&apos;re sending and receiving need to jump through one more hop than if you do direct service-to-service communication. However, when we do RPCs the bottleneck is rarely the network or the message broker, and instead tends to be the processing of the RPC itself. So, we&apos;re fine with the compromise here.&lt;/p&gt;&lt;h2 id=&quot;rabbitmq-topology&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#rabbitmq-topology&quot; aria-label=&quot;Anchor link for: rabbitmq-topology&quot;&gt;RabbitMQ topology&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&apos;s talk about the &lt;strong&gt;RabbitMQ topology&lt;/strong&gt; that powers our RPC system. We have the following components in place:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;A &lt;em&gt;headers&lt;/em&gt; exchange called &lt;code&gt;rpc&lt;/code&gt;. Caller services publish RPCs to this exchange with two headers, &lt;code&gt;destination&lt;/code&gt; (the receiver service name) and &lt;code&gt;procedure&lt;/code&gt; (the procedure name).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Per-service queues where RPCs end up. Their name usually looks like &lt;code&gt;receiver_service.rpcs&lt;/code&gt;. Multiple &lt;em&gt;instances&lt;/em&gt; (nodes) of the same service share a single queue. All the running instances of the receiver service consume from this queue.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A binding between each per-service queue and the &lt;code&gt;rpc&lt;/code&gt; exchange. Since &lt;code&gt;rpc&lt;/code&gt; is a headers exchange, the binding happens on the headers. Most commonly, receiver services bind their queue to the &lt;code&gt;rpc&lt;/code&gt; exchange on the &lt;code&gt;destination: receiver_service_name&lt;/code&gt; header, but sometimes we can be more flexible and specific by also using the &lt;code&gt;procedure&lt;/code&gt; header.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A per-instance &lt;em&gt;response queue&lt;/em&gt; where responses to RPCs are published by the receiver service. Each &lt;em&gt;instance&lt;/em&gt; of the caller service consumes from its dedicated response queue.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below is an artistic representation of the RabbitMQ topology. This one is for you, my visual friends.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/sketch-rabbitmq-topology.png&quot; alt=&quot;Sketch of RabbitMQ topology&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;caller-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#caller-architecture&quot; aria-label=&quot;Anchor link for: caller-architecture&quot;&gt;Caller architecture&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Our focus when designing this architecture &lt;em&gt;was not&lt;/em&gt; performance. Since our system is event-sourced, when services need to access data &lt;em&gt;fast&lt;/em&gt;, we usually have alternatives to RPCs. In those cases, instead of fetching data from another service via RPC, a service can usually build a &quot;local&quot; data store (usually Redis, but whatever fits best) by consuming events and have fast access to that data store. However, this doesn&apos;t cover use cases where a service wants to ask another service to do something and return a result. This can be usually also be done via asynchronous events, but sometimes it really can&apos;t and in any case we like the agility of RPCs for when we&apos;re moving fast and don&apos;t want to commit to particular data exchanges in the long term.&lt;/p&gt;&lt;p&gt;Instead, we heavily focused on reliability and resource utilization. We want our RPCs to succeed whenever they can. We also want to limit RabbitMQ resource utilization as much as possible, since the message broker architecture shares the broker between all the services that use it.&lt;/p&gt;&lt;p&gt;With these goals in mind, we came up with the topology described above. In the sketch below, I&apos;m focusing on the caller service perspective.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/sketch-caller-architecture.png&quot; alt=&quot;Sketch of the architecture of the sender service&quot; /&gt;&lt;/p&gt;&lt;p&gt;This is what happens, step by step, when a service makes an RPC:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The caller assigns a new UUID to the request and encodes the request (we happen to use Protobuf, but anything would work).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The caller includes the name of the &lt;em&gt;response queue&lt;/em&gt; in the &lt;code&gt;reply_to&lt;/code&gt; metadata field of the RabbitMQ message.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The caller publishes the request on the main RPC exchange (&lt;code&gt;rpc&lt;/code&gt;) using headers to specify the &lt;code&gt;destination&lt;/code&gt; and &lt;code&gt;procedure&lt;/code&gt; to call.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If publishing the request is successful, the caller stores the request in an in-memory key-value store (ETS for Elixir and Erlang folks), storing the mapping from request ID to caller process. This is used to map responses back to requests when they come back.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The caller has a pool of AMQP channels also consuming from the response queue. When the response comes back on such queue, a consumer channel picks it up, finds the corresponding caller process from the in-memory key-value store, and hands the caller process the response.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From a code standpoint, an RPC really does look like a function call. The main difference is that an RPC can &lt;em&gt;definitely&lt;/em&gt; fail due to the network interaction, so we always make sure to return a successful value or an error value. In Elixir, that translates to &lt;code&gt;{:ok, response}&lt;/code&gt; or &lt;code&gt;{:error, reason}&lt;/code&gt; tuples. In a typed language (say Haskell) it would be the &quot;either&quot; type. This is what an RPC looks like from the caller side (in Elixir-flavored pseudocode):&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;RPCPool&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;call&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my_receiver_svc&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;add&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;args&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-map-pair z-elixir&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;result&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-map-pair z-elixir&quot;&gt;=&amp;gt;&lt;/span&gt; result&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    result &lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt;=&amp;gt; 13
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; reason&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;failed because: &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-begin z-elixir&quot;&gt;#{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir z-embedded&quot;&gt;inspect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;reason&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt;=&amp;gt; such as :timeout
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;the-response-queue&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-response-queue&quot; aria-label=&quot;Anchor link for: the-response-queue&quot;&gt;The response queue&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;It&apos;s worth focusing on the &lt;strong&gt;response queue&lt;/strong&gt;. All AMQP channels in the caller pool declare this queue when they start up. This is a common pattern in RabbitMQ since declaring resources (queues, exchanges, and bindings) is &lt;em&gt;idempotent&lt;/em&gt;, that is, you can do it as many times as you want with the resource being declared only once.&lt;/p&gt;&lt;p&gt;The response queue is declared with a key property: &lt;code&gt;auto_delete&lt;/code&gt;. When this property is present, RabbitMQ deletes the queue as soon as there are no channels consuming from it anymore. This is exactly the behavior we want: as long as a caller pool is &quot;up and running&quot;, there&apos;s going to be at least one channel consuming from the queue and handing responses over to caller processes. However, if the whole pool or the whole node for the caller goes down then the queue will be deleted. This works perfectly, because if the caller node goes down, then we likely lost the &quot;context&quot; of the requests, and even if the node will come back up then it won&apos;t know what to do with the responses anymore. As &lt;a href=&quot;https://www.rabbitmq.com/direct-reply-to.html&quot;&gt;one RabbitMQ documentation page&lt;/a&gt; puts it:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Reply messages sent using [RPC] are in general not fault-tolerant; they will be discarded if the client that published the original request subsequently disconnects. The assumption is that an RPC client will reconnect and submit another request in this case.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In this way, we allow RabbitMQ to clean itself up and avoid leaving garbage in it, without writing any code to do so.&lt;/p&gt;&lt;p&gt;The code for each AMQP channel that consumes responses goes something like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;channel &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;open&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;amqp_connection&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; &amp;quot;response_queue&amp;quot; is determined per-pool.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Usually it looks like: &amp;quot;caller_service.#{UUID.generate()}&amp;quot;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;declare&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;channel&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; response_queue&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;auto_delete&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;consume&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;channel&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; response_queue&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When a response comes back, the caller does a key lookup on the response&apos;s request ID in the in-memory key-value data store to retrieve the original request and moreover the process that&apos;s waiting on the response. It looks like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;handle_rabbitmq_message&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  response &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; decode!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  caller_process &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;KVStore&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;fetch&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request_id&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  send&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;caller_process&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;elixir-process-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#elixir-process-architecture&quot; aria-label=&quot;Anchor link for: elixir-process-architecture&quot;&gt;Elixir process architecture&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The Elixir process architecture and supervision tree structure we use for the caller is based on the properties of the response queue described above. We have the following constraints:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;If the in-memory key-value store that holds the mappings between request IDs and caller processes (ETS) crashes, we want the whole pool to crash. We wouldn&apos;t be able to map responses back to requests in any case at that point, and it&apos;s better to let RabbitMQ delete the whole response queue in such cases.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If a connection or a channel goes down, we don&apos;t want to delete the response queue. As long as there&apos;s at least one channel consuming from the response queue, we&apos;ll be able to hand responses back to the corresponding caller processes.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With these constraints, we designed this supervision tree:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/sketch-supervision-tree.png&quot; alt=&quot;Sketch of the supervision tree&quot; /&gt;&lt;/p&gt;&lt;p&gt;It&apos;s pretty deep and nested, but a lot of it is dancing to use the right supervision strategies. We have a main supervisor for the whole caller architecture. Then, we have a pool supervisor that supervises the connections and channels. That supervisor&apos;s children are supervisors that each look over one AMQP connection and one &quot;channel supervisor&quot;. The channel supervisor supervises AMQP channels. That was hard to type, but hopefully it makes sense?&lt;/p&gt;&lt;p&gt;I won&apos;t go into detail here, but the point of this design is that if anything in that supervisor fails, the failures bubble up and cascade correctly. If there&apos;s really nothing more fun that you could do (I hardly believe that), play &quot;kill the process&quot; in your head and see what happens when you kill any process above. It&apos;s fun, if this sort of stuff is fun for you (which is a tautology).&lt;/p&gt;&lt;p&gt;The registry shown in the diagram is an Elixir &lt;code&gt;Registry&lt;/code&gt; that all AMQP channels register themselves to. This allows us to access AMQP channels fast, without going through a single pool process. I talked more about Registry-based process pools in Elixir in &lt;a href=&quot;https://andrealeopardi.com/posts/process-pools-with-elixirs-registry&quot;&gt;another blog post&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;All the code in there is build on top of the &lt;a href=&quot;https://github.com/pma/amqp&quot;&gt;AMQP&lt;/a&gt; Elixir library.&lt;/p&gt;&lt;h2 id=&quot;receiver-architecture-and-topology&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#receiver-architecture-and-topology&quot; aria-label=&quot;Anchor link for: receiver-architecture-and-topology&quot;&gt;Receiver architecture and topology&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The receiver architecture, compared to the caller, is straightforward. Every service sets up a pool of RabbitMQ connections (and channels), declares a queue, and binds it to the main RPC exchange (&lt;code&gt;rpc&lt;/code&gt;). That exchange is a &lt;em&gt;headers&lt;/em&gt; exchange, and each service usually binds the queue with the &lt;code&gt;destination&lt;/code&gt; header matching that service. For example, here&apos;s the pseudocode for the &lt;code&gt;receiver_svc&lt;/code&gt; service:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;declare&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;channel&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;receiver_svc.rpcs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;durable&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;bind&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  channel&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;receiver_svc.rpcs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;exchange&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;rpc&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;headers&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;destination&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;receiver_svc&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;consume&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;channel&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;receiver_svc.rpcs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All AMQP channels over all nodes of the receiver service declare the queue and bind it &lt;em&gt;on every startup&lt;/em&gt;. Idempotency, friends!&lt;/p&gt;&lt;p&gt;From here, it&apos;s all downhill: when a request comes in on a channel, the node decodes it, processes it, produces a response, and publishes it back on RabbitMQ. Where does it publish it? Well, good question. That&apos;s why all requests have the &lt;code&gt;reply_to&lt;/code&gt; RabbitMQ metadata field set to the reply queue of the caller. We take advantage of the default &lt;code&gt;amqp.direct&lt;/code&gt; exchange, which is pre-declared by all RabbitMQ nodes, to publish the response directly to the reply queue. The pseudocode to handle a request is this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;response &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; process_request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;publish&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;exchange&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;amqp.direct&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;routing_key&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;metadata&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;reply_to&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Below is a nice artsy drawing focusing on the RabbitMQ topology and interactions of the receiver service.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/sketch-receiver-architecture.png&quot; alt=&quot;Sketch of the pool supervision tree&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;in-elixir-as-always-the-answer-is-broadway&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-elixir-as-always-the-answer-is-broadway&quot; aria-label=&quot;Anchor link for: in-elixir-as-always-the-answer-is-broadway&quot;&gt;In Elixir, as always, the answer is Broadway&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As far as Elixir specifics goes, we use &lt;a href=&quot;https://github.com/dashbitco/broadway&quot;&gt;Broadway&lt;/a&gt; to consume RPCs, hooking it up with the &lt;a href=&quot;https://github.com/dashbitco/broadway_rabbitmq&quot;&gt;&lt;code&gt;broadway_rabbitmq&lt;/code&gt;&lt;/a&gt; producer.&lt;/p&gt;&lt;p&gt;I personally made enough changes to &lt;code&gt;broadway_rabbitmq&lt;/code&gt; by now that, look at that, it perfectly fits our use case! This is how a typical Broadway pipeline to consume RPCs looks like in our services:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MyService&lt;/span&gt;.&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;RPCConsumer&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Broadway&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    broadway_rabbitmq_options &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;queue&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my_service.rpcs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;declare&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;durable&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;bindings&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;rpc&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;arguments&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;destination&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;longstr&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my_service&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;metadata&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;reply_to&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Broadway&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;name&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;producer&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;BroadwayRabbitMQ&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; broadway_rabbitmq_options&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;processors&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;default&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;concurrency&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;handle_message&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Broadway&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; message&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _context&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    response &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      request
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt; decode_request!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt; process_request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt; encode_response!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; This is where we publish the response.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;publish&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      message&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;metadata&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;amqp_channel&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;exchange&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;amqp.direct&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;routing_key&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; message&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;metadata&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;reply_to&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;payload&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; response
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    message
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, &lt;code&gt;broadway_rabbitmq&lt;/code&gt; exposes the AMQP channel it uses to consume under the hood in the message metadata. We use that to send replies. Easy-peasy.&lt;/p&gt;&lt;p&gt;Small disclaimer: we have a wrapper library around Broadway that makes this slightly boilerplate-y code a bit simpler and more tailored to our use case. It also provides us with some nice additions such as round-robin connection attempts over a list of RabbitMQ URLs (for reliability), automatic decoding of requests (so that the decoding is done under the hood), metrics, error reporting, and so on. However, the gist of it is exactly the code above.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We saw how we architected a system to make service-to-service RPCs over RabbitMQ. Then, we went over the RabbitMQ topology we use, showing all the queues, exchanges, and bindings involved. Finally, we also covered the Elixir-specific implementation of this system, to sprinkle some practical examples on top of this stuff.&lt;/p&gt;&lt;p&gt;Here&apos;s some more resources on RPCs over RabbitMQ:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.rabbitmq.com/tutorials/tutorial-six-python.html&quot;&gt;RabbitMQ&apos;s tutorial&lt;/a&gt; shows a nice step-by-step implementation of RPCs over RabbitMQ using the Python client. It&apos;s a bit less complex than our architecture since the response queue doesn&apos;t get deleted when the caller stops, but it can still go a long way. They do make it clear that this is not a totally production-ready solution.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.rabbitmq.com/direct-reply-to.html&quot;&gt;RabbitMQ&apos;s &quot;direct reply-to&quot; documentation&lt;/a&gt;, which shows an alternative way to do RPCs over RabbitMQ that&apos;s built-in into RabbitMQ. This solution is simpler than ours as it doesn&apos;t allow multiple consumers to get messages from a shared &lt;em&gt;response queue&lt;/em&gt;, but it&apos;s pretty cool. I learned about it while writing this blog post.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/swlh/scalable-microservice-architecture-using-rabbitmq-rpc-d07fa8faac32&quot;&gt;A nice blog post&lt;/a&gt; about RPC over RabbitMQ. Lots of Python code to look at.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;acknowledgements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#acknowledgements&quot; aria-label=&quot;Anchor link for: acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I need to thank my coworker and friend Tom Patterer, who designed and implemented the system with me and helps me maintain it while our architecture and needs to keep growing. I also need to thank &lt;a href=&quot;https://twitter.com/josevalim&quot;&gt;JosÃ©&lt;/a&gt; because he pushed me to write this blog post when I chatted with him about all of this.&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;process-pools-with-elixirs-registry&#x2F;</id>
      <title type="html"><![CDATA[ Process pools with Elixir&#x27;s Registry ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/process-pools-with-elixirs-registry/"
            title="Process pools with Elixir&#x27;s Registry" />
      <published>2020-04-25T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2020-04-25T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;When you have a limited number of resources that you have to share for your all application, like database connections or worker processes, what you need is a &lt;em&gt;pool&lt;/em&gt;. In this post, we&apos;re going to take a look at one possible pooling strategy that highly leverages Elixir&apos;s built-in &lt;a href=&quot;https://hexdocs.pm/elixir/Registry.html&quot;&gt;Registry&lt;/a&gt; resulting in fast, reliable, and cleanly designed pools.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;When you have a limited number of resources that you have to share for your all application, like database connections or worker processes, what you need is a &lt;em&gt;pool&lt;/em&gt;. In this post, we&apos;re going to take a look at one possible pooling strategy that highly leverages Elixir&apos;s built-in &lt;a href=&quot;https://hexdocs.pm/elixir/Registry.html&quot;&gt;Registry&lt;/a&gt; resulting in fast, reliable, and cleanly designed pools.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/process-pools-with-elixirs-registry/cover-image.jpg&quot; alt=&quot;Cover image of a pool&quot; /&gt;&lt;/p&gt;&lt;span class=&quot;unsplash-credit&quot;&gt;
    Photo by &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;unsplash.com&amp;#x2F;@etiennegirardet?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Etienne Girardet&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;p&gt;There are two most common pool kinds in Elixir: &lt;strong&gt;checkout pools&lt;/strong&gt; and &lt;strong&gt;routing pools&lt;/strong&gt;. I made up those names, but let&apos;s see what I mean.&lt;/p&gt;&lt;h2 id=&quot;checkout-pools-and-routing-pools&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#checkout-pools-and-routing-pools&quot; aria-label=&quot;Anchor link for: checkout-pools-and-routing-pools&quot;&gt;Checkout pools and routing pools&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;checkout pool&lt;/strong&gt; is a pool where resources are used &lt;em&gt;exclusively&lt;/em&gt; by callers. What this means is that when a caller needs a resource from the pool, it will check the resource out of the pool and will be able to use it. While the resource is checked out, then the caller is the only process that is able to use the resource at that time. When the caller is finished with the resource, it can check it back in the pool for other processes to use.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/process-pools-with-elixirs-registry/sketch-checkout-pool.png&quot; alt=&quot;Sketch of a checkout pool&quot; /&gt;&lt;/p&gt;&lt;p&gt;Checkout pools are great for resources that can&apos;t be shared, like a TCP socket in passive mode, where only one process can call &lt;code&gt;:gen_tcp.recv/3&lt;/code&gt; to receive data in a blocking way. They&apos;re also great for cases where sharing a resource doesn&apos;t really bring an advantage: for example, worker pools where a worker (the resource) can only do one thing at a time. However, checkout pools limit performance and utilization of resources that &lt;em&gt;can&lt;/em&gt; be shared. An example that I really like for a good use case around checkout pools is HTTP/1 connections. Imagine you use a client like &lt;a href=&quot;https://github.com/elixir-mint/mint&quot;&gt;Mint&lt;/a&gt;, which behaves like a wrapper around a &lt;code&gt;:gen_tcp&lt;/code&gt; or &lt;code&gt;:ssl&lt;/code&gt; socket. HTTP/1 supports pipelining of requests (where you send multiple requests and await for multiple responses) but in practice it&apos;s rarely used. What clients usually do is send a request and await for the response before sending the next request. This is a natural case of &quot;doing one thing at a time&quot;, as requests can&apos;t be parallelized. In this case a checkout pool works great because it allows to &lt;em&gt;move&lt;/em&gt; the HTTP/1 connection (and socket) over to the process that makes the request. Doing so minimizes the message passing and copying of request and response data between the caller and the HTTP client.&lt;/p&gt;&lt;p&gt;A &lt;strong&gt;routing pool&lt;/strong&gt; is a pool where resources can be shared by callers. In a routing pool, the pool only acts as a &lt;em&gt;router&lt;/em&gt; to route the caller to the right resource, based on a variety of possible strategies (such as least used resource or round-robin). Resources are not checked out from the pool, so multiple callers can use the resource at the same time.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/process-pools-with-elixirs-registry/sketch-routing-pool.png&quot; alt=&quot;Sketch of a routing pool&quot; /&gt;&lt;/p&gt;&lt;p&gt;This pooling strategy leads to some advantages if the resource is shareable. Some examples of shareable resources are ETS tables or TCP connections where you want to use of multiplexing (to have multiple in-flight requests and responses). In contrast with the HTTP/1 example above, a great use case for routing pools is HTTP/2 connections. HTTP/2 supports &lt;em&gt;streams&lt;/em&gt;, which are essentially requests. The difference with HTTP/1 requests is that you can have multiple streams in flight on the same connection. If you use a checkout pool for an HTTP/2 connection, then you won&apos;t be able to have multiple requests (streams) in flight from different callers and will not take advantage of this fundamental feature of the HTTP/2 design. With a routing pool, instead, you can have a pool of HTTP/2 connections and when you need to make a request the caller can be &lt;em&gt;routed&lt;/em&gt; to one connection which will send the request. Multiple callers can be routed to the &lt;em&gt;same&lt;/em&gt; connection before requests receive a response, since multiple requests can be in flight on the same connection.&lt;/p&gt;&lt;p&gt;Checkout pools tend to be more common in the Erlang and Elixir ecosystem. We have established libraries like &lt;a href=&quot;https://github.com/devinus/poolboy&quot;&gt;poolboy&lt;/a&gt; or &lt;a href=&quot;https://github.com/elixir-ecto/db_connection&quot;&gt;DBConnection&lt;/a&gt; that implement checkout pools. However, routing pools tend to be hand rolled. In this post, we&apos;re going to take a look at how we can leverage &lt;a href=&quot;https://hexdocs.pm/elixir/Registry.html&quot;&gt;Registry&lt;/a&gt; to build routing pools that can route using different strategies. Brace yourself!&lt;/p&gt;&lt;h2 id=&quot;what-we-need-before-we-go&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-we-need-before-we-go&quot; aria-label=&quot;Anchor link for: what-we-need-before-we-go&quot;&gt;What we need before we go&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&apos;s take a quick look at an example I came up with for a resource that we&apos;ll build a pool for, as well as at a small intro to what Registry is and how it works.&lt;/p&gt;&lt;h3 id=&quot;coming-up-with-a-resource-to-pool&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#coming-up-with-a-resource-to-pool&quot; aria-label=&quot;Anchor link for: coming-up-with-a-resource-to-pool&quot;&gt;Coming up with a resource to pool&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The example we&apos;ll use to describe routing pools is a pool of GenServers that hold a TCP socket. These GenServers (let&apos;s call them &lt;code&gt;FantaTCP&lt;/code&gt;) are able to send messages over TCP according to an imaginary serialization protocol (let&apos;s call it &lt;code&gt;Fantaprotocol&lt;/code&gt;) and receive responses serialized through the same protocol. Requests have an ID so that responses for those requests can come in any order. This means that we can take advantage of a single TCP socket from multiple callers, but we can respond to callers as soon as we receive responses from the socket. Using one of these GenServers looks like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaTCP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;genserver_pid&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;PING&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt;=&amp;gt; {:ok, &amp;quot;PONG&amp;quot;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The implementation for &lt;code&gt;FantaTCP&lt;/code&gt; GenServers looks like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaTCP&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;hostname&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;hostname&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;pid&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;call&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;pid&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;impl&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;hostname&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;hostname&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; &amp;quot;requests&amp;quot; is a map of request IDs to &amp;quot;from&amp;quot;s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; (callers from handle_call/3). See handle_call/3.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _requests &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; reason&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;stop&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; reason&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;handle_call&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; requests&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We build the request ID.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    id &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; make_id&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;send&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Fantaprotocol&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;encode&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;id&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We store the &amp;quot;from&amp;quot; under the request ID so we&amp;#39;ll know
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; who to reply to. We don&amp;#39;t reply right away so that we can
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; send other requests while the response for this request comes back.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;noreply&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;put&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;requests&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; id&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Let&amp;#39;s pretend that &amp;quot;data&amp;quot; is always a complete response and can&amp;#39;t
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; have less or more data than that.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;handle_info&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; requests&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;id&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Fantaprotocol&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;decode&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;from&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; requests&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;pop!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;requests&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; id&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;reply&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;from&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;noreply&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; requests&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s a bit of code, but the idea is that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;when we get a request, we encode it and send it through TCP, and then return without sending a response to the caller&lt;/li&gt;&lt;li&gt;while waiting for a response, the caller is blocked on the &lt;code&gt;GenServer.call/2&lt;/code&gt;&lt;/li&gt;&lt;li&gt;when we get a response, we match it to the right caller and reply to that caller through &lt;code&gt;GenServer.reply/2&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With this in mind, we&apos;re ready to build our first pool of &lt;code&gt;FantaTCP&lt;/code&gt;s.&lt;/p&gt;&lt;h3 id=&quot;registry-101&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#registry-101&quot; aria-label=&quot;Anchor link for: registry-101&quot;&gt;Registry 101&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you&apos;re not familiar with Registry, I&apos;ll give you a quick rundown. Registry is a key-value store tailored to registering PIDs under given keys. It&apos;s the same principle as when you call &lt;code&gt;Process.register(pid, :some_name)&lt;/code&gt; to register a process under a name. To use it like &lt;code&gt;Process.register/2&lt;/code&gt;, you can start it as a &lt;em&gt;unique&lt;/em&gt; registry:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;pid &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; self&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;name&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;keys&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;unique&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;register&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;some_name&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _value &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;lookup&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;some_name&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt;=&amp;gt; [{pid, nil}]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you might have already noticed, you can even store an arbitrary value alongside a PID under a certain key. We&apos;ll make pretty cool uses of this later!&lt;/p&gt;&lt;p&gt;Another cool feature of Registry is that you can create a &lt;em&gt;duplicate&lt;/em&gt; registry, that is, a registry that can store multiple PID-value pairs &lt;em&gt;under the same key&lt;/em&gt;.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;name&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;keys&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;duplicate&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; From a process with PID pid1 we call this:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;register&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;cool_processes&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;cool process 1&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; From a process with PID pid2 we call this:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;register&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;cool_processes&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;cool process 2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; From whatever process:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;lookup&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;cool_processes&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt;=&amp;gt; [{pid1, &amp;quot;cool process 1&amp;quot;}, {pid2, &amp;quot;cool process 2&amp;quot;}]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&apos;s some cool stuff right there.&lt;/p&gt;&lt;p&gt;Since registries are smart bees, they monitor processes that are registered in them, so that if a process dies, then it will be removed from that registry.&lt;/p&gt;&lt;p&gt;Alright, we&apos;re ready to get pooling.&lt;/p&gt;&lt;h2 id=&quot;building-a-naive-registry-based-routing-pool&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-a-naive-registry-based-routing-pool&quot; aria-label=&quot;Anchor link for: building-a-naive-registry-based-routing-pool&quot;&gt;Building a naive Registry-based routing pool&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For our first naive pool, we&apos;re going to use Registry like we would use the built-in process registry (the one used by &lt;code&gt;Process.register/2&lt;/code&gt;). We&apos;ll start a registry and pass it to the GenServers in the pool. Each GenServer will register itself in the registry. Let&apos;s start by looking at the changes needed in the &lt;code&gt;FantaTCP&lt;/code&gt; GenServers.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaTCP&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;hostname&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;hostname&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;impl&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;hostname&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;hostname&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;register&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connections&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _value &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _requests &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; reason&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;stop&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; reason&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When a &lt;code&gt;FantaTCP&lt;/code&gt; GenServer starts up, it will register itself in the given registry under the &lt;code&gt;:connections&lt;/code&gt; key. All the GenServers will register under that same key, so retrieving all the GenServers in the pool will be a matter of looking up that key in the registry.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaPool&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;hostname&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;name&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;keys&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;duplicate&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaTCP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;hostname&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; &amp;quot;connections&amp;quot; is a list of {pid, nil} tuples.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    connections &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;lookup&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connections&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;pid&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _value &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;random&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;connections&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Now we got &amp;quot;routed&amp;quot; to a connection to which we can send the request.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaTCP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;pid&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here we&apos;re using &lt;code&gt;Enum.random/1&lt;/code&gt; to pick a connection from the ones registered in the registry, which means we&apos;ll do random routing. It tends to work well for many use cases since the load distribution is uniform over a decent number of requests, but we could potentially make things more complicated and use smarted strategies like round-robin.&lt;/p&gt;&lt;h3 id=&quot;supervising-the-pool-and-its-connections&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#supervising-the-pool-and-its-connections&quot; aria-label=&quot;Anchor link for: supervising-the-pool-and-its-connections&quot;&gt;Supervising the pool and its connections&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;FantaPool&lt;/code&gt; is a proper OTP disaster: no supervisors in sight. In this case, a single supervisor with the registry plus all the connections under it won&apos;t work. The reason is this: which supervision strategy would we pick? We want all connections to go down if the registry goes down since they become unreachable, so &lt;code&gt;:one_for_one&lt;/code&gt; is a no-go. We don&apos;t want other connections to go down if a single connection goes down (so no &lt;code&gt;:rest_for_one&lt;/code&gt;), but we also don&apos;t want &lt;em&gt;everything&lt;/em&gt; to go down if anything goes down (so no &lt;code&gt;:one_for_all&lt;/code&gt;). So, we have to go with more supervision layers: we&apos;ll have a &lt;code&gt;:rest_for_one&lt;/code&gt; supervisor supervising the registry and a &lt;em&gt;connections&apos; supervisor&lt;/em&gt;. The connections&apos; supervisor will be a &lt;code&gt;:one_for_one&lt;/code&gt; supervisor that will supervise all the connections. Now go back on this paragraph and count all the variations of the word &quot;supervisor&quot;: we&apos;re truly living the OTP life, aren&apos;t we?&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/process-pools-with-elixirs-registry/pool-supervision-tree.png&quot; alt=&quot;Sketch of the pool supervision tree&quot; /&gt;&lt;/p&gt;&lt;p&gt;Here&apos;s the code for the supervision tree above, with clarifying comments inline:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaPool&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Supervisor&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;host&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;host&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;impl&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;host&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    connections_specs &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;for&lt;/span&gt; index &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Since all these children will live under the same supervisor,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; they need to have different IDs. We overwrite the ID with
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Supervisor.child_spec/2.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;child_spec&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaTCP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;host&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;id&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaTCP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Here we build the child spec for another supervisor inline, without
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; having to define a new module.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    connections_supervisor_spec &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;id&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connections_supervisor&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;type&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;supervisor&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;start&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;start_link&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;connections_specs&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;strategy&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;one_for_one&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    children &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;name&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;keys&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;duplicate&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      connections_supervisor_spec
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;init&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;children&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;strategy&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;rest_for_one&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Same as before, with random routing
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code does already &lt;em&gt;a lot&lt;/em&gt;. The registry monitors registered processes, so if a connection crashes, you don&apos;t get accidentally routed to it. That is, unless you catch the moment where the connection crashes, but the registry hasn&apos;t had time to deregister the connection yet, which is pretty rare.&lt;/p&gt;&lt;h2 id=&quot;improving-our-routing-pool-by-accounting-for-disconnections&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#improving-our-routing-pool-by-accounting-for-disconnections&quot; aria-label=&quot;Anchor link for: improving-our-routing-pool-by-accounting-for-disconnections&quot;&gt;Improving our routing pool by accounting for disconnections&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The implementation of pooling we just described works great for processes like the &lt;code&gt;FantaTCP&lt;/code&gt; GenServer. However, most connection-like processes handle disconnections gracefully by going into a &lt;em&gt;disconnected&lt;/em&gt; state. In this state, they reply with some kind of error to the caller and wait until they&apos;re reconnected (for example, to the TCP host) before accepting requests again. We can optimize our pool in these cases by &lt;em&gt;unregistering&lt;/em&gt; a connection when it disconnects from the resource (TCP) and registering it again once it reconnects. Essentially, we can a registry where every connection registered under the &lt;code&gt;:connections&lt;/code&gt; key is &lt;em&gt;connected&lt;/em&gt;. This way, when we pick a random connection we&apos;ll most likely get one that&apos;s connected and that can handle our request.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaTCP&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;impl&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;hostname&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;hostname&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;register&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connections&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _value &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _requests &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; reason&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;stop&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; reason&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;impl&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;handle_info&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;tcp_closed&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _requests&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;unregister&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connections&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Let&amp;#39;s imagine we can send a messaeg to ourselves to reconnect in 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; second, without actually implementing the handle_info/2 clause.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;send_after&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;reconnect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;noreply&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;nosocket&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _requests &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There&apos;s a race condition to consider: if a connection disconnects, it might take a bit before it gets notified and unregisters itself. In that time frame, our callers might be routed to the disconnected connection. This is totally fine, because connections are prepared to return an error in case they can&apos;t send the request and get a response. However, with this strategy such cases happen in very short periods of time, so we can still see substantial benefits.&lt;/p&gt;&lt;h2 id=&quot;round-robin-routing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#round-robin-routing&quot; aria-label=&quot;Anchor link for: round-robin-routing&quot;&gt;Round-robin routing&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Wow, we&apos;ve been already through a lot. Hopefully at this point you had a glimpse of the potential of routing pools built on top of Registry. The last thing I want to sketch out is how you can build more &quot;complex&quot; routing strategies on top of what we built until now. We used the simplest routing strategy: choosing a resource at random. This requires no state and no coordination between callers of the pool. We&apos;ll look at how to build a pool that uses a round-robin routing strategy.&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;round-robin&lt;/strong&gt; strategy consists in going over the list of resources in the pool in order. The first caller gets the first resource, the second caller gets the second resource, and so on. Once callers got routed to all resources in the pool, they start over from the first one. To do this, a common strategy is to keep a shared index for the pool across all callers. When a caller needs a resource, it reads the index and then increments it (both operations are performed as an atomic transaction). The index is used as the index in the list of connections to the pool.&lt;/p&gt;&lt;p&gt;Our registry-based pools have the desirable property that callers don&apos;t need to talk to a centralized pool process to get resources from the pool, but can directly read the resources from the registry. To keep this property, we&apos;ll make the shared index readable and writable across callers. The simplest tool to do that in Erlang is ETS. Alongside the registry, our pool can spin up a process whose only job is to create an ETS table and keep it alive. The code for this &quot;table owner&quot; looks something like this.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaTable&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;_opts&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    ets &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ets&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;new&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;public&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;named_table&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We start with -1 so that when we start incrementing the first value
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; will be 0.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ets&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;insert&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;index&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; ets&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, whenever a caller needs a resource, it can read plus increment the counter stored in the ETS table. The &lt;code&gt;:ets&lt;/code&gt; module provides a useful function to do these operations atomically: &lt;code&gt;:ets.update_counter/3&lt;/code&gt;. Let&apos;s add that as part of the API exposed by &lt;code&gt;FantaTable&lt;/code&gt;.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaTable&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;read_and_increment&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ets&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;update_counter&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _key &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;index&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _increment_by &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;:ets.update_counter/3&lt;/code&gt; increments the counter under the given key by the given amount and returns the updated amount. We can now change the &lt;code&gt;FantaPool.request/1&lt;/code&gt; function that we wrote above:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; &amp;quot;connections&amp;quot; is a list of {pid, nil} tuples.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  connections &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;lookup&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaRegistry&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connections&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  next_index &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaTable&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;read_and_increment&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We get the connection in the list at the incremented index, modulo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; the number of connections in the list (so that we wrap around).
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;pid&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _value &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;at&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;connections&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; rem&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;next_index&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; length&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;connections&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Now we got &amp;quot;routed&amp;quot; to a connection to which we can send the request.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;FantaTCP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;pid&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are two tiny issues with this implementation.&lt;/p&gt;&lt;p&gt;The first one is almost non-existent: we never reset the index in the ETS table. This means that if we do &lt;em&gt;a lot&lt;/em&gt; of requests, we could potentially overflow the memory of the machine by making the index very big. In practice, if you do that many requests without restarting your node, you&apos;ll probably have other kinds of problems! It&apos;s a simple problem to fix though, since &lt;code&gt;:ets.update_counter/4&lt;/code&gt; exists. This variant of the &lt;code&gt;updated_counter&lt;/code&gt; function lets you specify a &lt;em&gt;threshold&lt;/em&gt; after which the counter should reset to a given value. That way, you can reset the counter to &lt;code&gt;0&lt;/code&gt; after you reach a high enough number.&lt;/p&gt;&lt;p&gt;The second problem is only a problem if we really stick with the definition of round-robin. Since the number of resources in our pool can vary, it might be that we have &lt;code&gt;10&lt;/code&gt; resources in the pool when we do one request but then the first two resources disconnect. Now we have &lt;code&gt;8&lt;/code&gt; resources in the pool. A caller might get the fifth resource when there&apos;s &lt;code&gt;10&lt;/code&gt; resources in the pool, but if the next caller asks for the sixth resource &lt;em&gt;after&lt;/em&gt; the first two resources disconnected, it&apos;s actually going to skip two resources and jump to the eighth resource in the original list. There are other ways to implement stricter round-robin where every resource is hit exactly once before the next one, but in practice this algorithm works fine for most use cases since often resources stay connected most of the time.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Oooph. This post was a &lt;strong&gt;large&lt;/strong&gt; one. We went over the basics of pools and the two most common kinds of pools used in the Erlang and Elixir landscape, that is, checkout pools and routing pools. Then, we set some context by describing the common use cases for a pool, with a focus on where routing pools shine and a look at a sample resource to pool (our &lt;code&gt;FantaTCP&lt;/code&gt; GenServer). After that, we had a first look at how to use Elixir&apos;s built-in Registry module to build a naive routing pool that routes randomly to connections in the pool. We then improved this pool by adding logic to handle disconnections and reconnections of resources in the pool. Finally, we looked at a &quot;smarter&quot; routing strategy, round-robin, and how to implement that on top of our pool with the help of some hand-rolled ETS moves.&lt;/p&gt;&lt;p&gt;Hopefully, this post gave you an idea of how to build this kind of pools as well as help you understand the distinction between checkout pools and routing pools (and when to use one or the other). In my experience, building pools is not a day-to-day activity, but I had the need to build something like what I described here a few times, so it&apos;s not an extremely rare thing to do either.&lt;/p&gt;&lt;p&gt;If you build something cool from this article, you&apos;re welcome to share it with me. Now let&apos;s get pooling!&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;sharing-protobuf-schemas-across-services&#x2F;</id>
      <title type="html"><![CDATA[ Sharing Protobuf schemas across services ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/sharing-protobuf-schemas-across-services/"
            title="Sharing Protobuf schemas across services" />
      <published>2020-02-24T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2020-02-24T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;The system that we&apos;re building at &lt;a href=&quot;https://www.community.com&quot;&gt;Community.com&lt;/a&gt; is made of a few services (around fifteen at the time of writing) that interact with each other through a basic version of event sourcing. All events flow (published and consumed) through RabbitMQ and are serialized with &lt;a href=&quot;https://developers.google.com/protocol-buffers&quot;&gt;Protobuf&lt;/a&gt;. With several services already and many more coming in the future, managing the Protobuf schemas becomes a painful part of evolving and maintaining the system. Do we copy the schemas in all services? Do we keep them somewhere and use something akin to Git submodules to keep them in sync in all of our projects? What do we do?! In this post, I&apos;ll go through the tooling that we came up with in order to sanely manage our Protobuf schemas throughout our services and technology stack.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;The system that we&apos;re building at &lt;a href=&quot;https://www.community.com&quot;&gt;Community.com&lt;/a&gt; is made of a few services (around fifteen at the time of writing) that interact with each other through a basic version of event sourcing. All events flow (published and consumed) through RabbitMQ and are serialized with &lt;a href=&quot;https://developers.google.com/protocol-buffers&quot;&gt;Protobuf&lt;/a&gt;. With several services already and many more coming in the future, managing the Protobuf schemas becomes a painful part of evolving and maintaining the system. Do we copy the schemas in all services? Do we keep them somewhere and use something akin to Git submodules to keep them in sync in all of our projects? What do we do?! In this post, I&apos;ll go through the tooling that we came up with in order to sanely manage our Protobuf schemas throughout our services and technology stack.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/sharing-protobuf-schemas-across-services/cover-image.jpg&quot; alt=&quot;Cover image of a library with books&quot; /&gt;&lt;/p&gt;&lt;span class=&quot;unsplash-credit&quot;&gt;
    Photo by &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;unsplash.com&amp;#x2F;s&amp;#x2F;photos&amp;#x2F;library?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Fahrul Azmi&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;p&gt;This post will go through the steps that led us to the solution we&apos;re currently using, so feel free to skip ahead if you just want to know what we ended up with.&lt;/p&gt;&lt;h2 id=&quot;starting-out-a-single-elixir-library&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#starting-out-a-single-elixir-library&quot; aria-label=&quot;Anchor link for: starting-out-a-single-elixir-library&quot;&gt;Starting out: a single Elixir library&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When we started defining schemas for our Protobuf events, we were only using such schemas from Elixir. We created a library called &lt;code&gt;events&lt;/code&gt; and started hosting it on our private &lt;a href=&quot;https://hex.pm&quot;&gt;Hex&lt;/a&gt; repository. &lt;code&gt;events&lt;/code&gt; contained all the &lt;code&gt;.proto&lt;/code&gt; schema files and depended on the &lt;a href=&quot;https://github.com/bitwalker/exprotobuf&quot;&gt;exprotobuf&lt;/a&gt; library to &quot;compile&quot; the Protobuf schemas to Elixir code. exprotobuf uses a different approach than most Protobuf libraries for other languages that I encountered: it loads the &lt;code&gt;.proto&lt;/code&gt; schema definitions at compile time instead of using &lt;code&gt;protoc&lt;/code&gt; to compile the Protobuf files to &lt;code&gt;.ex&lt;/code&gt; Elixir files. Essentially, we created a module like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Protobuf&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;from&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;wildcard&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;expand&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;../schemas/*.proto&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The most common approach to turning a Protobuf schema into a data structure representable by the programming language you&apos;re using is to turn the schema into some kind of &quot;struct&quot; representation. That&apos;s exactly what exprotobuf does for Elixir. This is one of our schemas:&lt;/p&gt;&lt;pre data-lang=&quot;proto&quot; class=&quot;language-proto z-code&quot;&gt;&lt;code class=&quot;language-proto&quot; data-lang=&quot;proto&quot;&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;# In schemas/event_envelope.proto
&lt;/span&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;&lt;span class=&quot;z-keyword z-other z-syntax z-proto&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-proto&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-proto&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-proto&quot;&gt;&amp;quot;&lt;/span&gt;proto3&lt;span class=&quot;z-punctuation z-definition z-string z-end z-proto&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-terminator z-proto&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;&lt;span class=&quot;z-meta z-class z-proto&quot;&gt;&lt;span class=&quot;z-storage z-type z-message z-proto&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-proto&quot;&gt;EventEnvelope&lt;/span&gt;&lt;span class=&quot;z-meta z-class z-proto&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-message z-begin z-proto&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-class z-proto&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;&lt;span class=&quot;z-meta z-class z-proto&quot;&gt;&lt;span class=&quot;z-support z-type z-proto&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;z-variable z-other z-field z-proto&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-proto&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-proto&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-terminator z-proto&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;&lt;span class=&quot;z-meta z-class z-proto&quot;&gt;&lt;span class=&quot;z-support z-type z-proto&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;z-variable z-other z-field z-proto&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-proto&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-proto&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;z-punctuation z-terminator z-proto&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;&lt;span class=&quot;z-meta z-class z-proto&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-message z-end z-proto&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;exprotobuf loads this up at compile time and turns it into roughly this Elixir definition:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Events&lt;/span&gt;.&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;EventEnvelope&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;defstruct&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;timestamp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;source&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; A bunch of encode/decode functions plus
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; new/1 to create a new struct.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This whole approach worked okay for a while, but soon we needed to use our Protobuf definitions from a service written in Python.&lt;/p&gt;&lt;h2 id=&quot;sharing-protobuf-schemas-through-git-submodules&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sharing-protobuf-schemas-through-git-submodules&quot; aria-label=&quot;Anchor link for: sharing-protobuf-schemas-through-git-submodules&quot;&gt;Sharing Protobuf schemas through Git submodules&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The first thing that came to mind when we thought about sharing Protobuf schema definitions across different programming languages was &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules&quot;&gt;Git submodules&lt;/a&gt;. We created a &lt;code&gt;proto_schemas&lt;/code&gt; repository containing all the &lt;code&gt;.proto&lt;/code&gt; files and added it as a Git submodule to our &lt;code&gt;events&lt;/code&gt; Elixir library and to a single Python service. Not much changed on the Elixir side, but on the Python side things were working a bit differently. The Protobuf Python library uses a common approach among Protobuf libraries, which is to use a plugin to the &lt;a href=&quot;https://github.com/protocolbuffers/protobuf/releases&quot;&gt;&lt;code&gt;protoc&lt;/code&gt;&lt;/a&gt; compiler in order to generate Python code from the &lt;code&gt;.proto&lt;/code&gt; files. Essentially, you call:&lt;/p&gt;&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;protoc&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;/span&gt;python_out&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-option z-shell&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;/span&gt;I&lt;/span&gt; ../schemas event_envelope.proto&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, for example, our &lt;code&gt;event_envelope.proto&lt;/code&gt; file would become &lt;code&gt;event_envelope.pb2.py&lt;/code&gt; once compiled.&lt;/p&gt;&lt;p&gt;The Git-submodule approach worked okay for a while, but it presented two main challenges: how to uniformly version schemas across languages? How to avoid having every project contain a copy of the Protobuf schemas and having to compile them individually to the host language?&lt;/p&gt;&lt;p&gt;Lucky for me, one day I was discussing these problems with my friend &lt;a href=&quot;https://github.com/ericmj&quot;&gt;Eric&lt;/a&gt; from the Elixir team, and we figured out a way to only keep the Protobuf schemas in a single place, compile them all in a single place, but use them from different languages all around.&lt;/p&gt;&lt;h2 id=&quot;protoc-ci-and-libraries&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#protoc-ci-and-libraries&quot; aria-label=&quot;Anchor link for: protoc-ci-and-libraries&quot;&gt;&lt;code&gt;protoc&lt;/code&gt;, CI, and libraries&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I did some research on available Protobuf libraries for Elixir and was lucky to find an alternative to exprotobuf called &lt;a href=&quot;https://github.com/tony612/protobuf-elixir&quot;&gt;protobuf-elixir&lt;/a&gt;. The APIs that this library exposes to manipulate Protobuf structs and manage serialization were exactly the same as the APIs exposed by exprotobuf, so compatibility was not an issue. However, this library had a key features that I was interested in: it supported code generation through the &lt;code&gt;protoc&lt;/code&gt; Protobuf compiler. It worked like it does in Python (and many other languages).&lt;/p&gt;&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;protoc&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;/span&gt;elixir_out&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-option z-shell&quot;&gt;=&lt;/span&gt;./lib&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;/span&gt;I&lt;/span&gt; ../schemas event_envelope.proto&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, I had code generation through &lt;code&gt;protoc&lt;/code&gt; working for both Python and Elixir. The next step was to map Protobuf packages (that is, collections of Protobuf schemas) to &lt;em&gt;language libraries&lt;/em&gt; and publish those to package repositories for the respective languages. We&apos;ll go through what we did for Elixir, but the setup for Python looks almost identical.&lt;/p&gt;&lt;p&gt;All our events-related Protobuf schemas live in the &lt;code&gt;events&lt;/code&gt; Protobuf package. So, we decided to map that to an Elixir library called &lt;code&gt;events_schemas&lt;/code&gt;. The nice thing about this library is that it only contains the auto-generated code for the Protobuf schemas and nothing else. It essentially exposes an interface to the Protobuf schemas from Elixir. In the same repository where we keep the &lt;code&gt;.proto&lt;/code&gt; files, we created a &lt;code&gt;languages/elixir/&lt;/code&gt; directory to store everything necessary for compiling to Elixir and publishing this library on our private &lt;a href=&quot;https://hex.pm&quot;&gt;hex.pm&lt;/a&gt; repository. The &quot;skeleton&quot; of the &lt;code&gt;events_schemas&lt;/code&gt; library looks like this:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;events_schemas
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;â”œâ”€â”€ .gitignore
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;â”œâ”€â”€ lib
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;â”‚Â Â  â””â”€â”€ .gitkeep
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;â””â”€â”€ mix.exs
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Basically, the library is empty. The &lt;code&gt;mix.exs&lt;/code&gt; file looks like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;EventsSchemas&lt;/span&gt;.&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MixProject&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Project&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;app&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;events_schemas&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;version&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; version&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;elixir&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;~&amp;gt; 1.8&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;deps&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; deps&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;package&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; package&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;extra_applications&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;protobuf&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; protobuf_dependency_version&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;organization&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;community&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;files&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;lib/**/*.pb.ex&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;mix.exs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;VERSION&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;PROTOBUF_EX_VERSION&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;protobuf_dependency_version&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;PROTOBUF_EX_VERSION&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;read!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;trim&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;VERSION&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;read!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;trim&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are a couple of peculiar things here. First, we read the version of the library from a magic &lt;code&gt;VERSION&lt;/code&gt; file. We keep this file alongside the &lt;code&gt;.proto&lt;/code&gt; schemas. This file contains the version of the schemas themselves. Keeping it alongside the schemas means that we can copy it over in the right places when building libraries for different languages so that the &lt;code&gt;events_schemas&lt;/code&gt; library can have the same version across all target languages. We copy this file to the root of the &lt;code&gt;events_schemas&lt;/code&gt; Elixir directory before building and publishing the library. We use a similar idea for the &lt;code&gt;PROTOBUF_EX_VERSION&lt;/code&gt; file. This file contains the version of the protobuf-elixir library that we use. We keep that in a separate file so that we can make sure it&apos;s the same between the plugin for the &lt;code&gt;protoc&lt;/code&gt; compiler as well as the dependency of the &lt;code&gt;events_schemas&lt;/code&gt; library.&lt;/p&gt;&lt;p&gt;Other that the things we just talked about, this looks like a pretty standard &lt;code&gt;mix.exs&lt;/code&gt; file. Now, the magic happens in CI.&lt;/p&gt;&lt;h3 id=&quot;concourse-ci&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#concourse-ci&quot; aria-label=&quot;Anchor link for: concourse-ci&quot;&gt;Concourse CI&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Our CI system of choice is &lt;a href=&quot;https://concourse-ci.org&quot;&gt;Concourse CI&lt;/a&gt;. Concourse lets you define pipelines with different steps. Here, we&apos;re interested in the last step of our CI pipeline: publishing the libraries for all the languages. Our Concourse pipeline looks like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/sharing-protobuf-schemas-across-services/concourse.png&quot; alt=&quot;Screenshot of our Concourse CI pipeline&quot; /&gt;&lt;/p&gt;&lt;p&gt;The last step, &lt;code&gt;build-and-publish&lt;/code&gt;, is triggered manually by clicking on it and telling it to start. This means that if you want to release a new version of the &lt;code&gt;events_schemas&lt;/code&gt; library in all languages, you have to go to Concourse and click this. That&apos;s all you need to do. Note that we have Docker containers that build and publish the library for each target language so that we don&apos;t have to install anything on the CI system. At this point, Concourse will do the same routine for all target languages:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Copy all the necessary version files to the right places.&lt;/li&gt;&lt;li&gt;Generate code for the Protobuf schemas through &lt;code&gt;protoc&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Publish to the right package repository (for example, &lt;a href=&quot;https://hex.pm&quot;&gt;hex.pm&lt;/a&gt; for Elixir).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;That&apos;s all. Now, our services can depend on an actual library that contains the auto-generated code representing the Protobuf schemas that we use. However, services don&apos;t need to have access to the original &lt;code&gt;.proto&lt;/code&gt; files containing the schemas. We&apos;re delighted with this system since it feels streamlined and straightforward to use, while providing everything we need.&lt;/p&gt;&lt;h3 id=&quot;encore-multiple-protobuf-packages&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#encore-multiple-protobuf-packages&quot; aria-label=&quot;Anchor link for: encore-multiple-protobuf-packages&quot;&gt;Encore: multiple Protobuf packages&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We moved even a bit further than what I described. In fact, currently we have three Protobuf packages: one for common custom types, one for events, and one for inter-service RPCs. The events and RPC packages both depend on the custom types package. The way we solve the inter-package dependencies is to simply publish the &lt;code&gt;types_schemas&lt;/code&gt; libraries first and then depend on that library from the &lt;code&gt;events_schemas&lt;/code&gt; and &lt;code&gt;rpc_schemas&lt;/code&gt; libraries. For example, in Elixir we changed the &lt;code&gt;mix.exs&lt;/code&gt; file we looked at earlier (for the &lt;code&gt;events_schemas&lt;/code&gt; library) and added the dependency:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;protobuf&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; protobuf_dependency_version&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;types_schemas&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;0.1.0&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;organization&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;community&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To recap, our Protobuf pipeline and workflow currently work like this. First, you make changes to a Protobuf schema. Then, you bump a version in a file. Then, you push those changes up to GitHub. Once CI makes sure you didn&apos;t break anything, you log into Concourse and kick-start the &lt;code&gt;build-and-publish&lt;/code&gt; task. A new version of the right library gets published to different package repositories for different languages. It&apos;s not the simplest system, but the workflow is easy to use and effective. Most of all, this workflow can apply to most programming languages and make it easier to manage versioning and evolving shared collections of Protobuf schemas.&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;connection-managers-with-gen-statem&#x2F;</id>
      <title type="html"><![CDATA[ Persistent connections with gen_statem ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/connection-managers-with-gen-statem/"
            title="Persistent connections with gen_statem" />
      <published>2019-04-14T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2019-04-14T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;Our applications often interact with external systems. In many cases, we need a &lt;em&gt;persistent&lt;/em&gt; connection to one or more of these external services. For example, if your application makes continuous use of a database, you&apos;ll likely want to stay connected to such database so that you can avoid spending time and resources connecting and disconnecting each time you perform a request. With Erlang and Elixir, the natural abstraction to maintain a persistent connection is a process. In this post, we&apos;ll have a look at how we can take advantage of the &lt;code&gt;gen_statem&lt;/code&gt; behaviour to write state machine processes that act as persistent connections to external systems.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;Our applications often interact with external systems. In many cases, we need a &lt;em&gt;persistent&lt;/em&gt; connection to one or more of these external services. For example, if your application makes continuous use of a database, you&apos;ll likely want to stay connected to such database so that you can avoid spending time and resources connecting and disconnecting each time you perform a request. With Erlang and Elixir, the natural abstraction to maintain a persistent connection is a process. In this post, we&apos;ll have a look at how we can take advantage of the &lt;code&gt;gen_statem&lt;/code&gt; behaviour to write state machine processes that act as persistent connections to external systems.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/connection-managers-with-gen-statem/cover-image.jpg&quot; alt=&quot;Cover image of a electricity&quot; /&gt;&lt;/p&gt;&lt;span class=&quot;unsplash-credit&quot;&gt;
    Photo by &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;unsplash.com&amp;#x2F;photos&amp;#x2F;ImcUkZ72oUs?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Israel Palacio&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;p&gt;This article is an evolution of a previous article posted on this blog, &lt;a href=&quot;https://andrealeopardi.com/posts/handling-tcp-connections-in-elixir&quot;&gt;&quot;Handling TCP connections in Elixir&quot;&lt;/a&gt;. In that article, I describe how to build a connection process that talks to a Redis server over TCP. Instead of &lt;code&gt;gen_statem&lt;/code&gt; (which wasn&apos;t available at that time), I use the &lt;a href=&quot;https://github.com/fishcakez/connection&quot;&gt;connection&lt;/a&gt; library by James Fish, but the concepts are similar. If you&apos;re interested in the TCP interactions more than you are in &lt;code&gt;gen_statem&lt;/code&gt;, read that article first. What I describe here is an evolution of the old implementation that doesn&apos;t require external dependencies and that nicely shows a practical use case for many of the features that &lt;code&gt;gen_statem&lt;/code&gt; provides.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: I&apos;m more used to Elixir and its syntax, so that&apos;s what I&apos;m going to use here. However, I won&apos;t use almost any Elixir-specific features, so the article should also be readable for folks that are more comfortable with Erlang. If you want to follow along with the finished Erlang code for the state machine we&apos;ll build, look at &lt;a href=&quot;https://gist.github.com/whatyouhide/e7531e10128af58b9830af8938eae478&quot;&gt;the Gist&lt;/a&gt; containing the final implementation in Elixir and Erlang.&lt;/p&gt;&lt;h2 id=&quot;the-connection-manager&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-connection-manager&quot; aria-label=&quot;Anchor link for: the-connection-manager&quot;&gt;The connection &quot;manager&quot;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;During the blog post, we&apos;ll build a connection process that maintains a persistent TCP connection to a database.&lt;/p&gt;&lt;p&gt;It&apos;s important to understand the design and purpose of our connection process. This process is not the connection to the database itself but only a &lt;em&gt;wrapper&lt;/em&gt; around the connection. This means that if the connection itself goes down, our process should stay alive and try to reconnect while replying with errors to clients that try to make requests. While a catchphrase of the Erlang and Elixir world is &quot;let it crash&quot;, erroneous conditions such as the TCP connection going down are known in advance and our system should strive to be resilient when they happen. TCP errors are not errors for our connection process, they&apos;re just another event happening in the system. This design decision is a powerful one because it leads us to a stable and resilient process that our system can rely on, regardless of the state of the actual connection.&lt;/p&gt;&lt;p&gt;A side effect of the design of the connection process so that it&apos;s independent of the state of the connection is that we don&apos;t need to establish the TCP connection synchronously when starting up our process. We can start our connection process and return a PID right away, start establishing the connection in the background, and then act as if the connection is &quot;broken&quot; until the connection is established. After all, our connection process and application will need to deal with the connection being broken at some point, so there&apos;s often no reason to require synchronous connecting.&lt;/p&gt;&lt;p&gt;The ideas briefly mentioned above come from an article by Fred Hebert, &lt;a href=&quot;https://ferd.ca/it-s-about-the-guarantees.html&quot;&gt;&quot;It&apos;s about the guarantees&quot;&lt;/a&gt;, which does a great job at explaining why the design I discussed works well especially in Erlang and Elixir applications.&lt;/p&gt;&lt;h2 id=&quot;gen-statem-primer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#gen-statem-primer&quot; aria-label=&quot;Anchor link for: gen-statem-primer&quot;&gt;&lt;code&gt;gen_statem&lt;/code&gt; primer&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://erlang.org/doc/man/gen_statem.html&quot;&gt;&lt;code&gt;gen_statem&lt;/code&gt;&lt;/a&gt; is an OTP behaviour (like &lt;code&gt;GenServer&lt;/code&gt;) that was introduced in OTP 19. Like its name suggests, it&apos;s an abstraction over a state machine. A common example of a state machine is an ATM:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/connection-managers-with-gen-statem/atm-state-machine-diagram.png&quot; alt=&quot;ATM state machine diagram&quot; /&gt;&lt;/p&gt;&lt;p&gt;There are states that the ATM can be in (like &lt;code&gt;waiting_for_pin&lt;/code&gt; or &lt;code&gt;requesting_cash&lt;/code&gt;) and events that cause state transitions, that is, moving from one state to another state (or to the same state).&lt;/p&gt;&lt;p&gt;&lt;code&gt;gen_statem&lt;/code&gt; mirrors the design of a state machine very closely. Essentially, you have something similar to a GenServer, where you have callbacks and events like user calls or messages. In a &lt;code&gt;gen_statem&lt;/code&gt; module, however, you have a state which represents the state machine&apos;s state and a &lt;code&gt;data&lt;/code&gt; term that represents information that the state machine is carrying around. The &quot;data&quot; in a &lt;code&gt;gen_statem&lt;/code&gt; is what we usually call the &quot;state&quot; in a GenServer (this is confusing, bear with me).&lt;/p&gt;&lt;p&gt;The &lt;code&gt;gen_statem&lt;/code&gt; states are represented through functions: in the ATM machine, you would have a &lt;code&gt;waiting_for_pin/3&lt;/code&gt; function (with one or more clauses) to handle events in the &lt;code&gt;waiting_for_pin&lt;/code&gt; state, and so on for the other states. The return value of state functions determines what the state machine should do next and looks something like this:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;{:next_state, next_state, new_data, actions}&lt;/code&gt; to transition to the next state &lt;code&gt;next_state&lt;/code&gt;. &lt;code&gt;new_data&lt;/code&gt; is the new data of the state machine and &lt;code&gt;actions&lt;/code&gt; is a list of actions, like firing off internal events, setting up timers, or replying to calls. We&apos;ll have a better understanding of actions as we go along.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;{:keep_state, new_data, actions}&lt;/code&gt; to remain in the same state. &lt;code&gt;new_data&lt;/code&gt; and &lt;code&gt;actions&lt;/code&gt; are the same as described for &lt;code&gt;:next_state&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The API that &lt;code&gt;:gen_statem&lt;/code&gt; exposes is actually a bit complex. A symptom of this is that there are many more return values than the two mentioned above, but most of them end up being simplifications of these two. For example, you can return &lt;code&gt;{:keep_state, new_data}&lt;/code&gt; instead of &lt;code&gt;{:keep_state, new_data, []}&lt;/code&gt; if you don&apos;t want to execute any actions. We&apos;ll try to use whatever fits best in each instance.&lt;/p&gt;&lt;h2 id=&quot;it-s-all-about-the-connection&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#it-s-all-about-the-connection&quot; aria-label=&quot;Anchor link for: it-s-all-about-the-connection&quot;&gt;It&apos;s all about the connection&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&apos;re going to use TCP with &lt;code&gt;:gen_tcp&lt;/code&gt; to connect to the database. We&apos;ll send requests through the socket and then asynchronously receive responses from the database. The clients calling our connections will wait synchronously on responses to the requests that they sent, but our connection will be able to handle multiple requests from different clients concurrently. We&apos;ll assume our fictional database has a protocol that expects each request to have an ID and that tags each response with the ID of the corresponding request. This will allow our state machine to maintain a map of request ID to requesting process for in-flight requests. When a response arrives, we can retrieve the caller waiting for it from this map.&lt;/p&gt;&lt;h3 id=&quot;designing-the-state-machine&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#designing-the-state-machine&quot; aria-label=&quot;Anchor link for: designing-the-state-machine&quot;&gt;Designing the state machine&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let&apos;s start with designing the states of our connection. We already figured out that there&apos;s going to be a &lt;code&gt;disconnected&lt;/code&gt; state for when the TCP connection is down. This will also be the starting state since we&apos;ll start as &lt;code&gt;disconnected&lt;/code&gt; and then try to connect the first time as mentioned at the beginning of the article. We only need one more state, the &lt;code&gt;connected&lt;/code&gt; state, for when the TCP connection is alive and well. The next step when designing the state machine is figuring out what events cause the state machine to transition from one state to another. In our case, we can think of these events causing state transitions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The TCP connection goes down â€” this makes the state machine transition from the &lt;code&gt;connected&lt;/code&gt; state to the &lt;code&gt;disconnected&lt;/code&gt; state.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The TCP connection is established successfully â€” this makes the state machine from &lt;code&gt;disconnected&lt;/code&gt; to &lt;code&gt;connected&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Then, we have events that don&apos;t cause state transition. In our case, that&apos;s only requests from clients.&lt;/p&gt;&lt;p&gt;A helpful habit when designing state machines is to draw a diagram of the state machine. This lets us visualize the states and state transitions at a glance.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/connection-managers-with-gen-statem/connection-state-machine-diagram.png&quot; alt=&quot;Connection state machine diagram&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;implementing-the-state-machine&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#implementing-the-state-machine&quot; aria-label=&quot;Anchor link for: implementing-the-state-machine&quot;&gt;Implementing the state machine&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let&apos;s turn this diagram into a functioning &lt;code&gt;gen_statem&lt;/code&gt;. The first thing to do is to create a &lt;code&gt;Connection&lt;/code&gt; module and specify that it&apos;s an implementation of the &lt;code&gt;:gen_statem&lt;/code&gt; behaviour. We&apos;ll also define an internal struct that we&apos;ll use as the data carried by the state machine. The data will contain the host and port to connect/reconnect to, the TCP socket, and a map of request ID to caller waiting for a response.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;behaviour&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_statem&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;defstruct&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;host&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;port&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;socket&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;requests&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Ignore this for now. We&amp;#39;ll see what this is about later on.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;impl&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;callback_mode&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;state_functions&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;opts&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    host &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Keyword&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;fetch!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;opts&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;host&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    port &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Keyword&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;fetch!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;opts&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;port&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_statem&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;to_charlist&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;host&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As we mentioned, the state machine starts in the &lt;code&gt;disconnected&lt;/code&gt; state. Similarly to a GenServer, when you start the state machine process, &lt;code&gt;start_link&lt;/code&gt; won&apos;t return until the &lt;code&gt;init/1&lt;/code&gt; callback that both &lt;code&gt;GenServer&lt;/code&gt; and &lt;code&gt;gen_statem&lt;/code&gt; provide returns. We want to return from &lt;code&gt;init/1&lt;/code&gt; right away and then establish the connection in the background. &lt;code&gt;gen_statem&lt;/code&gt; provides us with a perfect tool for this: &lt;strong&gt;internal events&lt;/strong&gt;. In our case, we can return from &lt;code&gt;init/1&lt;/code&gt; right away and generate an internal &lt;code&gt;:connect&lt;/code&gt; event that tells the state machine to initiate connection. Let&apos;s start with implementing the &lt;code&gt;init/1&lt;/code&gt; callback.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;host&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  data &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;host&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; host&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;port&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; port&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  actions &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;next_event&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;internal&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; actions&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, the return value of &lt;code&gt;init/1&lt;/code&gt; specifies that the first state to transition to is the &lt;code&gt;:disconnected&lt;/code&gt; state. The only action we want to execute is &lt;code&gt;:next_event&lt;/code&gt; which fires off an event. Events have a type and a term attached to them. For example, an Elixir message coming to the state machine process has the event type as &lt;code&gt;:info&lt;/code&gt; and the term as the message itself. In our case, we fire off an internal event that has the type &lt;code&gt;:internal&lt;/code&gt; and the term &lt;code&gt;:connect&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The state machine states are implemented as functions named as the state. So in our case, the first function to implement is &lt;code&gt;disconnect/3&lt;/code&gt;. State functions are called with the event type as the first argument, the event term as the second argument, and the data as the third argument.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;internal&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We use the socket in active mode for simplicity, but
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; it&amp;#39;s often better to use &amp;quot;active: :once&amp;quot; for better control.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  socket_opts &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;binary&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;active&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;host&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;port&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; socket_opts&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We omit the actions as there are none.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;next_state&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;data &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;Connection failed: &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-begin z-elixir&quot;&gt;#{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir z-embedded&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;inet&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;format_error&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; This is the same as {:keep_state, data, actions} but makes it clear
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; we&amp;#39;re not changing the data.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      actions &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;next_event&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;internal&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;keep_state_and_data&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; actions&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the connection is established successfully, we store the socket in the data and move to the &lt;code&gt;:connected&lt;/code&gt; state. If there&apos;s an error connecting, we stay in the &lt;code&gt;:disconnected&lt;/code&gt; state with the same data and fire the internal &lt;code&gt;:connect&lt;/code&gt; event again. This means that we&apos;ll try to reconnect right away and might end up in a failed connection loop. We&apos;ll fix this later on by introducing back-offs.&lt;/p&gt;&lt;p&gt;Now that we&apos;re in the &lt;code&gt;:connected&lt;/code&gt; state, let&apos;s handle the connection going down so that we&apos;ll have all the state &lt;em&gt;transitions&lt;/em&gt;. Since our TCP socket is in active mode, we&apos;ll get a &lt;code&gt;{:tcp_closed, socket}&lt;/code&gt; message when the connection goes down (let&apos;s ignore &lt;code&gt;{:tcp_error, socket, reason}&lt;/code&gt; for now).&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;connected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;info&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;tcp_closed&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  disconnect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Let&amp;#39;s use a helper function, it will come in handy later.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;Connection closed&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  data &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;data &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  actions &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;next_event&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;internal&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;next_state&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; actions&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We return to the &lt;code&gt;:disconnected&lt;/code&gt; state and immediately fire off an internal &lt;code&gt;:connect&lt;/code&gt; event so that we&apos;ll try to re-establish the connection right away. This is the same as what happens when we can&apos;t connect for now.&lt;/p&gt;&lt;h3 id=&quot;handling-requests&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#handling-requests&quot; aria-label=&quot;Anchor link for: handling-requests&quot;&gt;Handling requests&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now, we need to handle requests from clients and data coming back from the database. These requests will be made through &lt;code&gt;request/2&lt;/code&gt;:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;pid&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_statem&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;call&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;pid&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The event type that results from a &lt;code&gt;:gen_statem.call/2&lt;/code&gt; call is &lt;code&gt;{:call, from}&lt;/code&gt;. &lt;code&gt;from&lt;/code&gt; identifies the caller, similarly to the &lt;code&gt;from&lt;/code&gt; argument in &lt;code&gt;handle_call/3&lt;/code&gt; for GenServers. The event content is the request itself, in our case &lt;code&gt;{:request, request}&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;A request can come in either the &lt;code&gt;:connected&lt;/code&gt; or the &lt;code&gt;:disconnected&lt;/code&gt; state and it never causes a state transition. When a request comes in the &lt;code&gt;:disconnected&lt;/code&gt; state, we reply with &lt;code&gt;{:error, :disconnected}&lt;/code&gt; right away. Replying is another &lt;em&gt;action&lt;/em&gt; that we can perform.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;call&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  actions &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;reply&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;keep_state_and_data&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; actions&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When a request comes in the &lt;code&gt;:connected&lt;/code&gt; state, we issue the request to the database and store the caller under the request ID in our request map. &lt;code&gt;request&lt;/code&gt; here could be anything, but let&apos;s imagine it&apos;s a map that contains a &lt;code&gt;:id&lt;/code&gt; key holding the ID of the request. If there&apos;s an error sending, we close the socket and go back to the disconnected state.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;connected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;call&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;send&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; encode_request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      data &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;data &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;requests&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;put&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;requests&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;keep_state&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _reason&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;close&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      disconnect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since our TCP socket is in active mode, packets sent by the database will arrive as messages to the state machine. A &lt;code&gt;{:tcp, socket, data}&lt;/code&gt; message can only come in the &lt;code&gt;:connected&lt;/code&gt; state, so we can skip the additional &lt;code&gt;disconnected/3&lt;/code&gt; clause to handle TCP packets. For simplicity, we&apos;re going to assume that a packet always contains a single complete response so that we can avoid buffering.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;connected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;info&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; packet&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  response &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; decode_response&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;packet&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;from&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; requests&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;pop&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;requests&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; :gen_statem.reply/2 can be used to manually reply to a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; :gen_statem.call/2 (similarly to GenServer.reply/2).
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_statem&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;reply&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;from&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;keep_state&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;data &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;requests&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; requests&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;performing-actions-when-entering-a-state&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#performing-actions-when-entering-a-state&quot; aria-label=&quot;Anchor link for: performing-actions-when-entering-a-state&quot;&gt;Performing actions when entering a state&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You might notice there&apos;s a bug in our implementation: when we disconnect, we don&apos;t notify the clients that are waiting for a response. To do that, we can modify the &lt;code&gt;disconnect/1&lt;/code&gt; helper function:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;Connection closed&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;each&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;requests&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;_id&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_statem&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;reply&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;from&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  data &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;data &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;requests&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  actions &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;next_event&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;internal&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;next_state&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; actions&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This works, but &lt;code&gt;:gen_statem&lt;/code&gt; provides a possibly better way to perform common clean up code when disconnecting: state enter events. It&apos;s enough to change the &lt;code&gt;callback_mode/0&lt;/code&gt; callback we implemented initially:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;impl&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;callback_mode&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;state_functions&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;state_enter&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, &lt;code&gt;:gen_statem&lt;/code&gt; will call &lt;code&gt;new_state(:enter, old_state, data)&lt;/code&gt; every time the state machine transitions from &lt;code&gt;old_state&lt;/code&gt; to &lt;code&gt;new_state&lt;/code&gt;. If we transition from &lt;code&gt;:connected&lt;/code&gt; to &lt;code&gt;:disconnected&lt;/code&gt; then &lt;code&gt;disconnected(:enter, :connected, data)&lt;/code&gt; will be called. This is ideal for our use case, as we can now remove the &lt;code&gt;disconnect/1&lt;/code&gt; helper function and implement the &lt;code&gt;disconnected/3&lt;/code&gt; clause that handles the &lt;code&gt;:enter&lt;/code&gt; event.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;enter&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;Connection closed&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;each&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;requests&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;_id&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_statem&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;reply&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;from&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  data &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;data &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;requests&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  actions &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;next_event&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;internal&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;next_state&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; actions&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allows us to just move to the disconnected state when we want to disconnect, and the state enter clause will take care of replying to waiting clients and cleaning the data up. Note that since &lt;code&gt;:disconnected&lt;/code&gt; is our first state, the &lt;code&gt;:enter&lt;/code&gt; event will fire the first time with the old state being &lt;code&gt;:disconnected&lt;/code&gt; as well. We can just do nothing in that case.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;enter&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;keep_state_and_data&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The enter callback is called for every state transition, so we need to handle it in the &lt;code&gt;:connected&lt;/code&gt; state as well. We don&apos;t want to do anything when entering that state.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;connected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;enter&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _old_state&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;keep_state_and_data&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;timeouts-for-back-offs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#timeouts-for-back-offs&quot; aria-label=&quot;Anchor link for: timeouts-for-back-offs&quot;&gt;Timeouts for back-offs&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&apos;ve now got a pretty neat connection process that holds the TCP connection to our database and is able to reply to clients regardless of the state of such connection. However, in the code we built we try to reconnect as soon as the connection goes down or we fail to connect. This is usually a terrible idea, because if a connection goes down there&apos;s a good chance it won&apos;t be up right away, especially if we also fail to reconnect. A common technique to avoid frequent connection attempts is to wait a &lt;strong&gt;back-off period&lt;/strong&gt; before attempting reconnections. When the connection goes down or we fail to connect, we&apos;ll wait a few hundred milliseconds before trying again.&lt;/p&gt;&lt;p&gt;&lt;code&gt;:gen_statem&lt;/code&gt; has the perfect tool to implement this: &lt;strong&gt;timeouts&lt;/strong&gt;. One of the possible actions you can return from state functions is &lt;code&gt;{:timeout, timeout_name}&lt;/code&gt;, which you can use to set a timeout with some term attached to it after a given amount of time. When the timeout expires, an event of type &lt;code&gt;{:timeout, timeout_name}&lt;/code&gt; is fired.&lt;/p&gt;&lt;p&gt;Let&apos;s start by setting the timeout when we enter the disconnected state.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;enter&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Same as before: logging, replying to
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; waiting clients, resetting the data.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  actions &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;timeout&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;reconnect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;keep_state&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; actions&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our timeout will fire after 500 milliseconds We use &lt;code&gt;nil&lt;/code&gt; as its term since we&apos;re not carrying any information alongside the timeout other than its name (&lt;code&gt;:reconnect&lt;/code&gt;). When the timeout expires, we need to handle it in &lt;code&gt;disconnected/3&lt;/code&gt;:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;timeout&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;reconnect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _content&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  actions &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;next_event&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;internal&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;keep_state&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; actions&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the &lt;code&gt;:reconnect&lt;/code&gt; timeout is fired, we just fire the internal &lt;code&gt;:connect&lt;/code&gt; event so that we end up trying to reconnect. This removes repetition in the code and hides the plumbing of setting up timeouts manually.&lt;/p&gt;&lt;h3 id=&quot;exponential-and-random-back-off&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#exponential-and-random-back-off&quot; aria-label=&quot;Anchor link for: exponential-and-random-back-off&quot;&gt;Exponential and random back-off&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Without going too much into detail, a fixed back-off time might not be the best idea. Imagine you have one hundred TCP connections established with the database. If the database goes down, all those connections will go down at the same time and will try to reconnect every 500 milliseconds, all at the &lt;em&gt;same time&lt;/em&gt;. Part of the fix is to increase the back-off exponentially so that we can avoid situations where the database is down for a while and all connections try to reconnect very often. Then, we can add some random interval of time before reconnecting for each connection so that we avoid all the connections trying to reconnect at the same time. In code, the formula for the next back-off (given the previous back-off) can be something like:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;next_backoff &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; round&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;previous_backoff &lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;next_backoff &lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;random&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;dynamic-state&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#dynamic-state&quot; aria-label=&quot;Anchor link for: dynamic-state&quot;&gt;Dynamic state&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The last feature of &lt;code&gt;:gen_statem&lt;/code&gt; that I want to explore is &lt;strong&gt;dynamic state&lt;/strong&gt;. Let&apos;s see how that could be needed in our state machine. Right now, the &lt;code&gt;:socket&lt;/code&gt; field in the data is only present in the &lt;code&gt;:connected&lt;/code&gt; state and &lt;code&gt;nil&lt;/code&gt; the rest of the time. This information perfectly mirrors the state but it&apos;s encoded in the data and has to be managed side by side with the state and state transitions. It would be nice if we could stick the socket alongside the &lt;code&gt;:connected&lt;/code&gt; state, wouldn&apos;t it? Well, we can do exactly that with &quot;handle event&quot; functions instead of state functions. With &quot;handle event&quot; functions, the state is not a simple atom (like &lt;code&gt;:connected&lt;/code&gt; or &lt;code&gt;:disconnected&lt;/code&gt;) anymore, but it can be any term. However, this means we can&apos;t use functions to represent the state: we&apos;ll have to use a common &lt;code&gt;handle_event/4&lt;/code&gt; callback to handle all events in all state. We&apos;ll pattern match on the state to mimic what we were essentially doing with the names of the functions.&lt;/p&gt;&lt;p&gt;The first thing to do to use &quot;handle event&quot; functions is change &lt;code&gt;:state_functions&lt;/code&gt; to &lt;code&gt;:handle_event_function&lt;/code&gt; in &lt;code&gt;callback_mode/0&lt;/code&gt;:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;impl&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;callback_mode&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;handle_event_function&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;state_enter&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We won&apos;t rewrite the whole state machine, but just a small snippet. Let&apos;s see how we can now handle the internal &lt;code&gt;:connect&lt;/code&gt; event in the &lt;code&gt;:disconnected&lt;/code&gt; state. For the &lt;code&gt;:disconnected&lt;/code&gt; state, we&apos;ll use the &lt;code&gt;:disconnected&lt;/code&gt; atom since we don&apos;t want to carry any information with it.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;handle_event&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;internal&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;disconnected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  socket_opts &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;binary&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;active&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;host&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;port&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; socket_opts&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;next_state&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connected&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Same as before.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      actions &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;next_event&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;internal&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;keep_state_and_data&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; actions&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, instead of moving to the &lt;code&gt;:connected&lt;/code&gt; state in case of successful connection, we move to the &lt;code&gt;{:connected, socket}&lt;/code&gt; state. This means that the socket is tied to the &quot;connected&quot; state and doesn&apos;t exist in the &lt;code&gt;:disconnected&lt;/code&gt; state.&lt;/p&gt;&lt;p&gt;&quot;Handle event&quot; functions are powerful. They set &lt;code&gt;:gen_statem&lt;/code&gt; aside from its previous version, &lt;a href=&quot;http://erlang.org/doc/man/gen_fsm.html&quot;&gt;&lt;code&gt;:gen_fsm&lt;/code&gt;&lt;/a&gt; (which is now deprecated). &lt;code&gt;:gen_fsm&lt;/code&gt; would only let users implement &lt;strong&gt;finite-state machines&lt;/strong&gt; (hence the &lt;code&gt;fsm&lt;/code&gt; in the module name), but &lt;code&gt;:gen_statem&lt;/code&gt; with &quot;handle event&quot; functions lets users implement a generic &lt;a href=&quot;https://en.wikipedia.org/wiki/Transition_system&quot;&gt;transition system&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In this article, we explored a way to build processes acting as persistent connections to the outside world using &lt;code&gt;:gen_statem&lt;/code&gt;. We learned how to build a real-world state machine and how to use a bunch of features provided by &lt;code&gt;:gen_statem&lt;/code&gt; to avoid repetition and simplify our implementation. For more information on the TCP interaction bits of this article, check out &lt;a href=&quot;https://andrealeopardi.com/posts/handling-tcp-connections-in-elixir&quot;&gt;&quot;Handling TCP connections in Elixir&quot;&lt;/a&gt;. If you&apos;re interested in the reasoning behind the design of the persistent connection, refer to &lt;a href=&quot;https://ferd.ca/it-s-about-the-guarantees.html&quot;&gt;&quot;It&apos;s about the guarantees&quot;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you&apos;re interested in the whole code for the state machine that we built, you can find it as &lt;a href=&quot;https://gist.github.com/whatyouhide/e7531e10128af58b9830af8938eae478&quot;&gt;a Gist&lt;/a&gt;. In the Gist there are both the Elixir version we built and an Erlang version if you&apos;re more comfortable with Erlang.&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;a-story-of-regret-and-retiring-a-library-from-hex&#x2F;</id>
      <title type="html"><![CDATA[ A story of regret and retiring a library from Hex ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/a-story-of-regret-and-retiring-a-library-from-hex/"
            title="A story of regret and retiring a library from Hex" />
      <published>2018-09-15T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2018-09-15T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;Now the story of an Elixir library and the one author who had no choice but to take it away.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;Now the story of an Elixir library and the one author who had no choice but to take it away.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/a-story-of-regret-and-retiring-a-library-from-hex/cover-image.jpg&quot; alt=&quot;Cover image of a map&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;a style=&quot;background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &amp;quot;San Francisco&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Ubuntu, Roboto, Noto, &amp;quot;Segoe UI&amp;quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px&quot; href=&quot;https://unsplash.com/@nicnut?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; title=&quot;Download free do whatever you want high-resolution photos from Nicola Nuttall&quot;&gt;&lt;span style=&quot;display:inline-block;padding:2px 3px&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; style=&quot;height:12px;width:auto;position:relative;vertical-align:middle;top:-1px;fill:white&quot; viewBox=&quot;0 0 32 32&quot;&gt;&lt;title&gt;unsplash-logo&lt;/title&gt;&lt;path d=&quot;M20.8 18.1c0 2.7-2.2 4.8-4.8 4.8s-4.8-2.1-4.8-4.8c0-2.7 2.2-4.8 4.8-4.8 2.7.1 4.8 2.2 4.8 4.8zm11.2-7.4v14.9c0 2.3-1.9 4.3-4.3 4.3h-23.4c-2.4 0-4.3-1.9-4.3-4.3v-15c0-2.3 1.9-4.3 4.3-4.3h3.7l.8-2.3c.4-1.1 1.7-2 2.9-2h8.6c1.2 0 2.5.9 2.9 2l.8 2.4h3.7c2.4 0 4.3 1.9 4.3 4.3zm-8.6 7.5c0-4.1-3.3-7.5-7.5-7.5-4.1 0-7.5 3.4-7.5 7.5s3.3 7.5 7.5 7.5c4.2-.1 7.5-3.4 7.5-7.5z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span style=&quot;display:inline-block;padding:2px 3px&quot;&gt;Nicola Nuttall&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It was October of 2015. I was a young Elixir developer, eager to contribute and help the community. One day, someone on the &lt;a href=&quot;https://groups.google.com/forum/#!topic/elixir-lang-core/NoUo2gqQR3I&quot;&gt;mailing list&lt;/a&gt; proposed a new feature for Elixir: ES6-like map destructuring. It would look like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;username&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;username&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;andrea&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;age&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt; username
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;andrea&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt; age
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;27&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In short, you don&apos;t bind variables through the usual &lt;code&gt;%{username: username} = map&lt;/code&gt; pattern matching. You instead use a short-hand syntax that lets you reduce the repetition.&lt;/p&gt;&lt;p&gt;The initial response was good. People looked excited. Then Josh Adams wrote this:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I worry that this feature makes code much harder to read and encourages a bit of magic that I don&apos;t much love.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I was with Josh on this one. This was me a few messages later:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;[...] it&apos;s often tedious to do &lt;code&gt;foo: foo&lt;/code&gt; but I prefer clarity over conciseness in this case.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;A bit after this, JosÃ© pointed out that this syntax would not work everywhere because we would need support for matching on atom keys but also string keys. He also pointed out that maybe a better way to implement this in Elixir would have been sigils. For example, we could have a &lt;code&gt;~m&lt;/code&gt; sigil:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-storage z-type z-string z-elixir&quot;&gt;~m&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-interpolated z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;(&lt;/span&gt;username age&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;username&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;andrea&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;age&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt; username
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;andrea&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since sigils support modifiers, we would have &lt;code&gt;~m(...)&lt;/code&gt; to match on string keys and &lt;code&gt;~m(...)a&lt;/code&gt; to match on atom keys. I liked this and wrote:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I stood against the &lt;code&gt;%{foo, bar, baz}&lt;/code&gt; syntax and deemed that too implicit, but I&apos;m in favour of a possible &lt;code&gt;~m&lt;/code&gt; sigil. [...] I took a stab at it and wrote a simple implementation for such sigil. We can try it out and see if we like it.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I had just released &lt;a href=&quot;https://github.com/whatyouhide/short_maps&quot;&gt;short_maps&lt;/a&gt;. Life was good.&lt;/p&gt;&lt;h2 id=&quot;the-decline&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-decline&quot; aria-label=&quot;Anchor link for: the-decline&quot;&gt;The decline&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Fast forward a few years. short_maps is used here and there in the Elixir community. But requests for features keep coming in. Someone wants support for nested maps. Others want the &lt;code&gt;a&lt;/code&gt; modifier to go, defaulting to atoms. At some point, a long discussion takes place in short_maps&apos; &lt;a href=&quot;https://github.com/whatyouhide/short_maps/issues/11&quot;&gt;issue tracker&lt;/a&gt;. The discussion -- a very nice and wholesome discussion, thanks Elixir community! -- eventually leads to a fork of short_maps being published. &lt;a href=&quot;https://github.com/meyercm/shorter_maps&quot;&gt;shorter_maps&lt;/a&gt; supports everything and then some: update syntax, nested maps, string keys through a different sigil, you name it. I was not happy about the fork because it created a &quot;split&quot; in the community who now had two packages to choose from that did similar things. This is democracy and open source though, so all was good.&lt;/p&gt;&lt;p&gt;However, this discussion started to make me think about short_maps and the reason it existed. I had created it so the Elixir community could try out a feature that eventually &lt;em&gt;might&lt;/em&gt; have made it into the core language. It was not meant to be a widely used library: if the community liked it so much, we could have merged it into core. That didn&apos;t seem like the case, but moreover, I was the one not liking it.&lt;/p&gt;&lt;h2 id=&quot;why-i-don-t-like-short-maps&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-i-don-t-like-short-maps&quot; aria-label=&quot;Anchor link for: why-i-don-t-like-short-maps&quot;&gt;Why I don&apos;t like short_maps&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;short_maps adds magic to Elixir. When someone uses short_maps in their codebase, it forces folks that read that codebase -- even experienced Elixir developers -- to know about it. Being a syntax feature, it&apos;s really in your face and it makes code hard to read if you are not familiar with it. The distinction between atom keys and string keys is also not obvious, with the result being code that looks more obfuscated. Incidentally, these reasons are what made me dislike the built-in &lt;code&gt;~w&lt;/code&gt; sigil as well. I understand verbosity annoys many, but I wouldn&apos;t sacrifice verbosity over clarity.&lt;/p&gt;&lt;h2 id=&quot;taking-action&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#taking-action&quot; aria-label=&quot;Anchor link for: taking-action&quot;&gt;Taking action&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All of this led me to be really against short_maps. So I&apos;m taking a dramatic decision: I am retiring short_maps from Hex. Practically, this means that short_maps will still work as usual, but you will get a warning when using it. I feel strongly about moving the community away from this library, but at the same time, I am at peace with this decision because of the existence of shorter_maps. If you really like short_maps, you&apos;ll have shorter_maps available. After all, Elixir is an extensible language and I love it for that, so you should always be free to bend it in whatever way you like.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;From the infamous &lt;a href=&quot;https://github.com/whatyouhide/short_maps/issues/11&quot;&gt;short_maps issue&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It&apos;s really unfortunate that the split happened. Elixir has far fewer libs than the nodejs ecosystem.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;So there you go. Consider short_maps gone, and the split reverted.&lt;/p&gt;&lt;p&gt;I don&apos;t regret creating short_maps. It was an experiment and it showed me once again how flexible Elixir is. But it&apos;s time for it to go, and in this case, for stability and simplicity to replace experimentation.&lt;/p&gt;&lt;p&gt;Bye short_maps. It was a fun ride. Thanks for listening.&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;the-guts-of-a-property-testing-library&#x2F;</id>
      <title type="html"><![CDATA[ The guts of a property testing library ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/the-guts-of-a-property-testing-library/"
            title="The guts of a property testing library" />
      <published>2017-08-15T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2017-08-15T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;Property-based testing is a common tool to improve testing by testing properties of a piece of software over many values drawn at random from a large space of valid values. This methodology was first introduced in the paper &lt;a href=&quot;http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quick.pdf&quot;&gt;QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs&lt;/a&gt;, which describes the basic idea and shows a possible implementation in Haskell. Since then, many tools to aid in property based testing appeared for many programming languages: as of the time of writing, there are libraries for &lt;a href=&quot;https://hackage.haskell.org/package/QuickCheck&quot;&gt;Haskell&lt;/a&gt;, &lt;a href=&quot;http://www.quviq.com/products/&quot;&gt;Erlang&lt;/a&gt;, &lt;a href=&quot;https://github.com/clojure/test.check&quot;&gt;Clojure&lt;/a&gt;, &lt;a href=&quot;https://hypothesis.works&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://www.scalacheck.org&quot;&gt;Scala&lt;/a&gt;, and many others. A few days ago I released the first version of &lt;a href=&quot;https://github.com/whatyouhide/stream_data&quot;&gt;StreamData&lt;/a&gt;, a property testing (and data generation) library for &lt;a href=&quot;https://elixir-lang.org&quot;&gt;Elixir&lt;/a&gt; (that is a candidate for inclusion in Elixir itself in the future). This post is not an introduction to property-based testing nor a tutorial on how to use StreamData: what I want to do is dig into the mechanics of how StreamData works, its design, and how it compares to some of the other property-based testing libraries mentioned above.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;Property-based testing is a common tool to improve testing by testing properties of a piece of software over many values drawn at random from a large space of valid values. This methodology was first introduced in the paper &lt;a href=&quot;http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quick.pdf&quot;&gt;QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs&lt;/a&gt;, which describes the basic idea and shows a possible implementation in Haskell. Since then, many tools to aid in property based testing appeared for many programming languages: as of the time of writing, there are libraries for &lt;a href=&quot;https://hackage.haskell.org/package/QuickCheck&quot;&gt;Haskell&lt;/a&gt;, &lt;a href=&quot;http://www.quviq.com/products/&quot;&gt;Erlang&lt;/a&gt;, &lt;a href=&quot;https://github.com/clojure/test.check&quot;&gt;Clojure&lt;/a&gt;, &lt;a href=&quot;https://hypothesis.works&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://www.scalacheck.org&quot;&gt;Scala&lt;/a&gt;, and many others. A few days ago I released the first version of &lt;a href=&quot;https://github.com/whatyouhide/stream_data&quot;&gt;StreamData&lt;/a&gt;, a property testing (and data generation) library for &lt;a href=&quot;https://elixir-lang.org&quot;&gt;Elixir&lt;/a&gt; (that is a candidate for inclusion in Elixir itself in the future). This post is not an introduction to property-based testing nor a tutorial on how to use StreamData: what I want to do is dig into the mechanics of how StreamData works, its design, and how it compares to some of the other property-based testing libraries mentioned above.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/the-guts-of-a-property-testing-library/cover-image.jpg&quot; alt=&quot;Cover image of a factory&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;what-streamdata-looks-like&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-streamdata-looks-like&quot; aria-label=&quot;Anchor link for: what-streamdata-looks-like&quot;&gt;What StreamData looks like&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&apos;s say we want to test a basic property of the &lt;code&gt;:lists.reverse/1&lt;/code&gt; function: that is, we want to test that the first element of a list is the last element of the reverse of that list. These properties written using StreamData would look like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;property &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;the first elem of a list is the last elem of its reverse&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  check all list &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; list_of&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert hd&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;last&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;lists&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;reverse&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This syntax means: take a list randomly generated from the &lt;code&gt;list_of(int())&lt;/code&gt; generator (which generates lists of integers) and test the &lt;code&gt;do&lt;/code&gt; body (the assertion) using the generated list. If the test passes, a new &lt;code&gt;list&lt;/code&gt; is generated and this goes on until a failure is found. When a failure is found, StreamData will try to shrink the &lt;code&gt;list&lt;/code&gt; in order to find the &quot;smallest&quot; example that still fails the property. In the case above, &lt;code&gt;hd/1&lt;/code&gt; will fail for the empty list &lt;code&gt;[]&lt;/code&gt; and StreamData will report that (the correct test would use values generated by &lt;code&gt;non_empty(list_of(int()))&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;&lt;code&gt;check all&lt;/code&gt; is capable of doing more than the above: we can also combine generators, use previously generated values to influence further generators, and filter out values that are not good for our tests. For example, take this trivial test:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;property &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;in/2 returns true for elements taken out of a list&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  check all list &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; list_of&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;            list &lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;            elem &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; member_of&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert elem &lt;span class=&quot;z-keyword z-operator z-elixir&quot;&gt;in&lt;/span&gt; list
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, &lt;code&gt;member_of/1&lt;/code&gt; is a generator and in this case it uses &lt;code&gt;list&lt;/code&gt; which is a value previously generated by the &lt;code&gt;list_of(int())&lt;/code&gt; generator. The &lt;code&gt;list != []&lt;/code&gt; line is a &lt;em&gt;filter&lt;/em&gt;: when a filter fails for a generated value, the test &quot;run&quot; is thrown away and new values are generated.&lt;/p&gt;&lt;h3 id=&quot;data-generation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#data-generation&quot; aria-label=&quot;Anchor link for: data-generation&quot;&gt;Data generation&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;While until now we only focused on property testing, StreamData also provides data generation functionality. All generators implement the &lt;code&gt;Enumerable&lt;/code&gt; protocol and are infinite streams of data that can easily be used for generating test data and similar purposes.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;StreamData&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;int&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-other z-capture z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-capture z-elixir&quot;&gt;&amp;amp;&lt;/span&gt;abs&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;take&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt;=&amp;gt; [1, 0, 2]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;the-inner-workings&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-inner-workings&quot; aria-label=&quot;Anchor link for: the-inner-workings&quot;&gt;The inner workings&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The first things I did when starting to research a possible property testing implementation were reading the &lt;a href=&quot;http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quick.pdf&quot;&gt;original QuickCheck paper&lt;/a&gt; and having a look at the &lt;a href=&quot;https://hackage.haskell.org/package/QuickCheck&quot;&gt;resulting library&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;generators&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#generators&quot; aria-label=&quot;Anchor link for: generators&quot;&gt;Generators&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;After reading the paper and doing some more research on Haskell&apos;s implementation, I had a few requirements in mind for the generators:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;they have to be able to generate random values indefinitely (without running out of values);&lt;/li&gt;&lt;li&gt;they have to be &lt;em&gt;reproducible&lt;/em&gt;, that is, they should explicitly &quot;take in&quot; the randomness in order to be able to deterministically &quot;replay&quot; the generated values;&lt;/li&gt;&lt;li&gt;we have to be able to use a &quot;size&quot; to control the space of generated values to be able to start a test run with smaller values and grow the generated values over time.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The requirements above already got me going and I implemented the first version of generators. Back then, a generator was a struct (in order to be able to distinguish it from any other term) with just one field, &lt;code&gt;:generator&lt;/code&gt;, which was a function that took a random seed and a size.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;StreamData&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;defstruct&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;generator&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the first version, the generator functions had to return &lt;code&gt;{term, :rand.state}&lt;/code&gt; tuples where the first value was the generated value and the second value was the updated random seed. It&apos;s important that generators don&apos;t use a mutable seed or don&apos;t share the seed, and making the seed explicit both as input and as output ensured that by passing the same initial seed around the generated values would have been the same. To give an idea, the &lt;code&gt;int/0&lt;/code&gt; generator (generator of integers) was implemented like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  %&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;StreamData&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;generator&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt; seed&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; size &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;random_int&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; new_seed&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;rand&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;uniform_s&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;size &lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; seed&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;random_int &lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;-&lt;/span&gt; size&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; new_seed&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, the &lt;code&gt;seed&lt;/code&gt; is used to generated a random value and the &lt;code&gt;size&lt;/code&gt; is used to control the space this value can be drawn from (in this case, &lt;code&gt;int/0&lt;/code&gt; returns integers in the &lt;code&gt;-size..size&lt;/code&gt; range).&lt;/p&gt;&lt;p&gt;Generating values from this generator was straightforward:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;data &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; int&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;seed0 &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;rand&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;seed_s&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;exs1024&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;first_value&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; seed1&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;generator&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;seed0&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _size &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;second_value&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; seed2&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;generator&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;seed1&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _size &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...and so on
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;random-splitting&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#random-splitting&quot; aria-label=&quot;Anchor link for: random-splitting&quot;&gt;Random splitting&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This worked fairly well, but when reading the QuickCheck paper again I noticed something I had missed the first time: the seed was never returned alongside the value. What QuickCheck does, instead, is they &quot;split&quot; the seed. Splitting the seed is a way to take one random seed and deterministically return two random seeds. This can be used when we need to use the random seed twice (or more): instead of using something like &lt;code&gt;:rand.uniform_s/2&lt;/code&gt; above, we can split the seed into &lt;code&gt;seed1&lt;/code&gt; and &lt;code&gt;seed2&lt;/code&gt; and use &lt;code&gt;seed1&lt;/code&gt; just once to generate an integer and then throw it away, since we still have &lt;code&gt;seed2&lt;/code&gt; if we need a seed for something else. &lt;code&gt;seed2&lt;/code&gt; can be further split, effectively making us able to use as many seeds as we want to generate values.&lt;/p&gt;&lt;p&gt;With this in mind, I changed the generator function to take a seed and a size but only return a value. If I needed to call a generator twice, I would just split the seed and use the two resulting seeds to call it twice. It now looked like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  %&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;StreamData&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;generator&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt; seed&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; size &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;random_int&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _seed&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;rand&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;uniform_s&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;size &lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; seed&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;    random_int &lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;-&lt;/span&gt; size
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;data &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; int&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;seed0 &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;rand&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;seed_s&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;exs1024&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;seed1&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; seed2&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; split_seed&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;seed0&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;first_value &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;generator&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;seed1&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _size &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;second_value &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;generator&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;seed2&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _size &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...and so on
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This worked really well and it&apos;s what ended up being used in StreamData. The only thing that changed is the return value which is not a simple value anymore because of shrinking, which we&apos;ll discuss below.&lt;/p&gt;&lt;h4 id=&quot;random-byte-stream-approach&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#random-byte-stream-approach&quot; aria-label=&quot;Anchor link for: random-byte-stream-approach&quot;&gt;Random byte stream approach&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This approach is used by Haskell&apos;s QuickCheck but also, for example, by &lt;a href=&quot;https://github.com/clojure/test.check&quot;&gt;Clojure&apos;s test.check&lt;/a&gt;. A very interesting and a bit different approach is taken by &lt;a href=&quot;https://hypothesis.works&quot;&gt;Hypothesis&lt;/a&gt;, Python&apos;s library for property testing. Instead of using a random seed to &quot;drive&quot; the generation, Hypothesis uses an infinite random stream of bytes. Each generator can take as many bytes as needed from the stream to generate a value that is deterministically related to those bytes. This approach is also deterministic and reproducible since by feeding generators the same byte stream, the whole generation is unchanged. This enables Hypothesis to have a &quot;database&quot; of known failures that is just a set of byte streams saved from previous runs: these streams are &quot;replayed&quot; on new runs to ensure known failures are always tested. In StreamData&apos;s case, it would be enough to store the initial seed for the known failure in order to reproduce it. Below we&apos;ll also take a look at how Hypothesis takes advantage of the byte stream approach to model shrinking.&lt;/p&gt;&lt;h3 id=&quot;haskell-s-approach&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#haskell-s-approach&quot; aria-label=&quot;Anchor link for: haskell-s-approach&quot;&gt;Haskell&apos;s approach&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Haskell takes a similar approach to what we have in StreamData (or rather, the other way around) but with a big difference: Haskell is able to use its type system to infer what values to generate just based on the type. So in Haskell, while the generation of integers is done similarly to what we do in &lt;code&gt;int/0&lt;/code&gt; above, there&apos;s no need to define &lt;code&gt;int/0&lt;/code&gt; in the first place but only to define how to generate integers for the &lt;code&gt;Int&lt;/code&gt; type. This makes a noticeable difference, since you can give Haskell&apos;s QuickCheck a function and it will be able to test it on the right randomly generated values just by looking at its type signature. However, the &quot;typed approach&quot; has a drawback, as we&apos;ll see in the &quot;Shrinking&quot; section below.&lt;/p&gt;&lt;h3 id=&quot;shrinking&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#shrinking&quot; aria-label=&quot;Anchor link for: shrinking&quot;&gt;Shrinking&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Once I got generation down, I knew the other toughest problem to tackle was shrinking. Shrinking is an important component of property testing: since property testing is based on the idea of generating random data in order to find bugs in software, often the data that finds the bug is full of &lt;em&gt;noise&lt;/em&gt;. Shrinking is what takes the noise out of the data that causes the failure and finds out the minimal failure case. A common example used to illustrate this is an always-failing property that looks like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;property &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;lists of integers don&amp;#39;t contain 42&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  check all list &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; list_of&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert &lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-elixir&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-elixir&quot;&gt;in&lt;/span&gt; list
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This property will fail anytime &lt;code&gt;42&lt;/code&gt; is generated by &lt;code&gt;int()&lt;/code&gt;, but often the list &lt;code&gt;42&lt;/code&gt; is generated in will contain more elements, for example, &lt;code&gt;[30, 12, 9, 0, 4, 42, 93]&lt;/code&gt;. From this list, it&apos;s hard to tell that the failure is caused by the number &lt;code&gt;42&lt;/code&gt; being in the list. After shrinking the list, however, StreamData will reduce it to &lt;code&gt;[42]&lt;/code&gt; which is the minimal value that &lt;code&gt;list_of(int())&lt;/code&gt; can generate that fails the property.&lt;/p&gt;&lt;h4 id=&quot;the-typed-approach-to-shrinking&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-typed-approach-to-shrinking&quot; aria-label=&quot;Anchor link for: the-typed-approach-to-shrinking&quot;&gt;The typed approach to shrinking&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The approach Haskell takes is straightforward: it completely separates generation and shrinking. Haskell can do this fairly easily thanks to its type system. All you need to generate data and to shrink such data is a type. QuickCheck for Haskell defines a &lt;code&gt;Arbitrary&lt;/code&gt; class that defines two functions, &lt;code&gt;arbitrary&lt;/code&gt; and &lt;code&gt;shrink&lt;/code&gt;:&lt;/p&gt;&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-declaration z-class z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;z-entity z-other z-inherited-class z-haskell&quot;&gt;Arbitrary&lt;/span&gt;&lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;arbitrary&lt;/span&gt;&lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Gen&lt;/span&gt;&lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;shrink&lt;/span&gt;&lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;arbitrary&lt;/code&gt; function is responsible for generating a random value for the type that implements the class. &lt;code&gt;Gen a&lt;/code&gt; is a wrapper type around a function that takes a random seed and a size and returns a value of type &lt;code&gt;a&lt;/code&gt; (same as what StreamData does as we described above). For example, &lt;code&gt;arbitrary&lt;/code&gt; for the &lt;code&gt;Int&lt;/code&gt; type is implemented very similarly to how we implemented the function in &lt;code&gt;int/0&lt;/code&gt; above.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;shrink&lt;/code&gt; function is completely independent of the &lt;code&gt;arbitrary&lt;/code&gt; function. It takes a value of type &lt;code&gt;a&lt;/code&gt; (let&apos;s call it &lt;code&gt;x&lt;/code&gt;) and returns a list of values of type &lt;code&gt;a&lt;/code&gt;. These values should be the possible shrinks of &lt;code&gt;x&lt;/code&gt;. To go into slightly more detail, the return value of &lt;code&gt;shrink&lt;/code&gt; should be the first level of the &lt;em&gt;shrink tree&lt;/em&gt; for &lt;code&gt;x&lt;/code&gt;: as you can imagine, since the shrinks of &lt;code&gt;x&lt;/code&gt; are of the same &lt;code&gt;a&lt;/code&gt; type, they can also be passed to the &lt;code&gt;shrink&lt;/code&gt; function and be further shrunk. This can be done recursively, effectively forming a tree of shrinks of &lt;code&gt;x&lt;/code&gt;. Note that thanks to Haskell&apos;s laziness, this tree is completely lazy: the list returned by &lt;code&gt;shrink&lt;/code&gt; is evaluated one element at the time when needed, so when we want to &quot;go down&quot; in the tree instead of &quot;going left&quot;, we can just call &lt;code&gt;shrink&lt;/code&gt; on a value and the rest of the original list will not be evaluated.&lt;/p&gt;&lt;p&gt;&lt;code&gt;shrink&lt;/code&gt; is easy to implement as well: for example, &lt;code&gt;shrink&lt;/code&gt; for the &lt;code&gt;[a]&lt;/code&gt; type could simply take a list and return all the lists obtained by removing each element from the original list. This would make the tree have smaller lists as we go down in the tree, ending up with &lt;code&gt;[]&lt;/code&gt; (the smallest list) as leaves.&lt;/p&gt;&lt;p&gt;This approach is elegant and easy to implement, but it has one major drawback. Since generation and shrinking are completely separated, any generation logic that is not encoded in the type must be repeated when shrinking. To understand what this means, let&apos;s say we want to generate even integers. Assuming we have a &lt;code&gt;map/2&lt;/code&gt; function that maps a function over values generated by a generator, the &lt;code&gt;even_int&lt;/code&gt; generator would look like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;map&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;int&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; &amp;amp;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-capture z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-capture z-elixir&quot;&gt;&amp;amp;&lt;/span&gt;1&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This generator correctly generates even integers but in the typed approach such integers would still be shrunk as integers, so we would have to repeat the even logic when using this generator in tests:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;check all i &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; even_int&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;is_even&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The solution to this problem is to couple generation and shrinking,&lt;/p&gt;&lt;h4 id=&quot;lazy-trees&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#lazy-trees&quot; aria-label=&quot;Anchor link for: lazy-trees&quot;&gt;Lazy trees&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The approach I went with (which was taken straight out of &lt;code&gt;test.check&lt;/code&gt;) keeps in mind the idea of a &lt;em&gt;shrink tree&lt;/em&gt; mentioned above. Basically, a generator now returns a &lt;code&gt;StreamData.LazyTree&lt;/code&gt; struct instead of a simple value. A &quot;lazy tree&quot; is a tree that has a realized (that is, not eager) root and a lazy stream of children, each child being a lazy tree itself.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;StreamData&lt;/span&gt;.&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;LazyTree&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;defstruct&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;root&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;children&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The root is the generated value, and the children are the shrunk values. The first level (the root of each child) is the first level in the shrink tree which corresponds to the return value of &lt;code&gt;shrink&lt;/code&gt; in the Haskell implementation. Let&apos;s see how the &lt;code&gt;list_of/1&lt;/code&gt; generator, which takes a generator and generates lists of values generated by that generator, could be implemented returning a lazy tree:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  %&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;StreamData&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;generator&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt; seed&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; size &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;seed1&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; seed2&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; split_seed&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;seed&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;length&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;rand&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;uniform_s&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;size&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; seed1&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Let&amp;#39;s pretend we have a function that generates values from a generator
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; for &amp;quot;n&amp;quot; times.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;    root &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; generate_n_values&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; length&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; seed2&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; size&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;    list_lazy_tree&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;list_lazy_tree&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  %&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;LazyTree&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;root&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;children&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;list_lazy_tree&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  children &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;length&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&amp;amp;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;delete_at&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-capture z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-capture z-elixir&quot;&gt;&amp;amp;&lt;/span&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;map&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-other z-capture z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-capture z-elixir&quot;&gt;&amp;amp;&lt;/span&gt;list_lazy_tree&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  %&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;LazyTree&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;root&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; list&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;children&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; children&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The core idea is that the root of the lazy tree we return is the generated list. The first-level children are a stream of trees where the roots are the values obtained by removing each element one at a time from the generated list, and the children are recursively calculated using the same process.&lt;/p&gt;&lt;p&gt;Generator combinators (such as &lt;code&gt;map/2&lt;/code&gt;) now just transform the whole tree instead of just the returned value. For example, &lt;code&gt;map/2&lt;/code&gt; maps the given function over all the values in each tree generated by the given generator.&lt;/p&gt;&lt;p&gt;With lazy trees in place, shrinking becomes straightforward: it&apos;s now just a fancy depth-first search in the lazy tree. Basically, we walk down the tree until we find a value that passes the test, and then we move &quot;to the right&quot; and start again. When a node passes and has no right siblings, the parent is the smallest failing value; when it fails and has no right siblings or children, it&apos;s the smallest failing value. This algorithm does not explore the whole tree (which is unfeasible since when we start composing generators the trees can become very large) but in practice it usually finds very good shrinks.&lt;/p&gt;&lt;h4 id=&quot;random-byte-stream-approach-to-shrinking-this-time&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#random-byte-stream-approach-to-shrinking-this-time&quot; aria-label=&quot;Anchor link for: random-byte-stream-approach-to-shrinking-this-time&quot;&gt;Random byte stream approach (to shrinking this time)&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I briefly mentioned above that Hypothesis, Python&apos;s library for property-based testing, uses an infinite stream of random bytes that generators can use to generate values. This stream is the foundation of shrinking as well: when we need to shrink a value, we can remove bytes from the original stream and also shrink bytes of the original stream (towards 0). Generators are expected to be written so that they are somehow &quot;proportional&quot; to the byte stream so that shrinking the byte stream also shrinks the generated value. By using a deterministic way to generate values from the byte stream, shrinking is also deterministic. Hypothesis&apos; approach is fascinating, and I am doing some research to see how it compares practically to our approach and our platform, to evaluate a potential switch to this architecture.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I had tons of fun writing this library and learned a lot of things. This post was just a little insight on how I learned those things and hopefully an interesting read for everyone and especially potential contributors to StreamData.&lt;/p&gt;&lt;h3 id=&quot;credit&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#credit&quot; aria-label=&quot;Anchor link for: credit&quot;&gt;Credit&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Most ideas in StreamData are not original and are taken partially from QuickCheck but mostly from &lt;code&gt;test.check&lt;/code&gt;, so a big thank you goes to everyone that helped with those projects. This blog post was also influenced by &lt;a href=&quot;https://hypothesis.works/articles/how-hypothesis-works/&quot;&gt;this great article&lt;/a&gt; by the author of Hypothesis, so thank you as well, David!&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;compile-time-work-with-elixir-macros&#x2F;</id>
      <title type="html"><![CDATA[ Compile-time work with Elixir macros ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/compile-time-work-with-elixir-macros/"
            title="Compile-time work with Elixir macros" />
      <published>2015-10-10T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2015-10-10T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;Macros are a very common way to do metaprogramming in Elixir. There are many
resources that explain what macros are and how to use them (much better than I
could): there&apos;s the &lt;a href=&quot;https://elixir-lang.org/getting-started/meta/macros.html&quot; title=&quot;Chapter on macros from Elixir&amp;#39;s &amp;quot;Getting Started&amp;quot; guide&quot;&gt;Macro chapter&lt;/a&gt; from the
&quot;Getting Started&quot; guide on Elixir&apos;s website, an awesome
&lt;a href=&quot;https://www.theerlangelist.com/article/macros_1&quot; title=&quot;Understanding Elixir Macros by SaÅ¡a JuriÄ‡&quot;&gt;series of articles&lt;/a&gt; by SaÅ¡a JuriÄ‡, and even a
book (&lt;a href=&quot;https://pragprog.com/book/cmelixir/metaprogramming-elixir&quot; title=&quot;Metaprogramming Elixir&quot;&gt;Metaprogramming Elixir&lt;/a&gt;) by Chris McCord. In this
article, I&apos;ll assume you are familiar with macros and how they work, and I&apos;ll
talk about another use case of macros that is rarely examined: doing
compile-time things in macros.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;Macros are a very common way to do metaprogramming in Elixir. There are many
resources that explain what macros are and how to use them (much better than I
could): there&apos;s the &lt;a href=&quot;https://elixir-lang.org/getting-started/meta/macros.html&quot; title=&quot;Chapter on macros from Elixir&amp;#39;s &amp;quot;Getting Started&amp;quot; guide&quot;&gt;Macro chapter&lt;/a&gt; from the
&quot;Getting Started&quot; guide on Elixir&apos;s website, an awesome
&lt;a href=&quot;https://www.theerlangelist.com/article/macros_1&quot; title=&quot;Understanding Elixir Macros by SaÅ¡a JuriÄ‡&quot;&gt;series of articles&lt;/a&gt; by SaÅ¡a JuriÄ‡, and even a
book (&lt;a href=&quot;https://pragprog.com/book/cmelixir/metaprogramming-elixir&quot; title=&quot;Metaprogramming Elixir&quot;&gt;Metaprogramming Elixir&lt;/a&gt;) by Chris McCord. In this
article, I&apos;ll assume you are familiar with macros and how they work, and I&apos;ll
talk about another use case of macros that is rarely examined: doing
compile-time things in macros.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;h2 id=&quot;macro-expansion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#macro-expansion&quot; aria-label=&quot;Anchor link for: macro-expansion&quot;&gt;Macro expansion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Macros are often used as tools to manipulate the AST (Abstract Syntax Tree,
the representation of Elixir code) and transform it into new AST. For example, the
definition of the &lt;code&gt;if&lt;/code&gt; macro looks something like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmacro&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;condition&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;do:&lt;/span&gt;&lt;/span&gt; do_block&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;else&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; else_block&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;condition&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      x &lt;span class=&quot;z-keyword z-operator z-elixir&quot;&gt;when&lt;/span&gt; x &lt;span class=&quot;z-keyword z-operator z-elixir&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;else_block&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      _                        &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;do_block&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;if&lt;/code&gt; just &lt;em&gt;expands&lt;/em&gt; to a &lt;code&gt;case&lt;/code&gt; statement that checks whether the condition is
false-y (&lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) or truthy (anything else), executing the correct block
of code.&lt;/p&gt;&lt;p&gt;The key concept here is &lt;strong&gt;expansion&lt;/strong&gt;: a macro call just gets transformed to
other code. It&apos;s easy to see this process using
&lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#expand/2&quot; title=&quot;Docs for Macro.expand/2&quot;&gt;&lt;code&gt;Macro.expand/2&lt;/code&gt;&lt;/a&gt; (or
&lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#expand_once/2&quot; title=&quot;Docs for Macro.expand_once/2&quot;&gt;&lt;code&gt;Macro.expand_once/2&lt;/code&gt;&lt;/a&gt;). Let&apos;s work with a simple
macro so that our examples are straightforward:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;SimpleMacro&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmacro&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;do&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Seeing the expansion of this macro is trivial:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;iex&amp;gt; import SimpleMacro
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;iex&amp;gt; ast = quote do: plus(x, 23)
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;iex&amp;gt; ast |&amp;gt; Macro.expand(__ENV__) |&amp;gt; Macro.to_string
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;quot;x + 23&amp;quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Expanding a macro means executing the code inside the macro and replacing the
macro call with the AST (the quoted code) it returns. This expansion step
happens at compile time: a macro is executed at compile time and replaced with
the code it returns, which is expanded recursively (searching for nested macros)
but not executed until runtime. Turns out, we can take advantage of this! We can
write macros that do not transform the AST they receive, but that perform some
operation at compile time using this AST.&lt;/p&gt;&lt;h2 id=&quot;working-at-compile-time&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#working-at-compile-time&quot; aria-label=&quot;Anchor link for: working-at-compile-time&quot;&gt;Working at compile time&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Usually, macros are described as functions that take code instead of data and
return code instead of data; in this description, we describe macros in terms of
functions. However, we can also define functions in terms of macros: each
function is just a macro that does nothing at compile time.&lt;/p&gt;&lt;p&gt;Say we have this code:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MacroPhilosophy&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;Hello &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-begin z-elixir&quot;&gt;#{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir z-embedded&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;iex&amp;gt; hello &amp;quot;Elixir&amp;quot;
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;quot;Hello Elixir!&amp;quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can turn &lt;code&gt;hello/1&lt;/code&gt; into a macro without changing any of the existing code
that relies on it, except for having to &lt;code&gt;require&lt;/code&gt; the &lt;code&gt;MacroPhilosophy&lt;/code&gt;
module. The only thing we have to change about the definition of &lt;code&gt;hello/1&lt;/code&gt; is
that we have to return the quoted code instead of executing the code: luckily
this change is trivial if we take advantage of the &lt;code&gt;:bind_quoted&lt;/code&gt; option for
&lt;code&gt;quote&lt;/code&gt;.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MacroPhilosophy&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmacro&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;bind_quoted&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; binding&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;Hello &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-begin z-elixir&quot;&gt;#{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir z-embedded&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;iex&amp;gt; require MacroPhilosophy
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;iex&amp;gt; hello &amp;quot;Elixir&amp;quot;
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;quot;Hello Elixir&amp;quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, the actual body of the function (the string interpolation) is
the same both in the function and in the macro.&lt;/p&gt;&lt;p&gt;This lets us see functions from a different perspective, but also highlights
something about macros: they can be used to do work at compile time. We can
execute any code inside the macro at compile time, as long as we return valid
quoted code. Furthermore, the code we execute before returning the quoted code
will just disappear at runtime. Poof!&lt;/p&gt;&lt;h3 id=&quot;a-useless-expression-counting-macro&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-useless-expression-counting-macro&quot; aria-label=&quot;Anchor link for: a-useless-expression-counting-macro&quot;&gt;A useless expression-counting macro&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To stay true to the ancient tradition of making useless example with absolutely
no connection to the real world, let&apos;s build a macro that logs the number of
Elixir expressions (and sub-expressions) in some given code:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;UselessExamplesAreFun&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmacro&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;log_number_of_expressions&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;code&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;_&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; counter&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Macro&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;prewalk code&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;expr&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; counter&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;expr&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; counter &lt;span class=&quot;z-keyword z-operator z-arithmetic z-elixir&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;puts &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;You passed me &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-begin z-elixir&quot;&gt;#{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir z-embedded&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt; expressions/sub-expressions&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    code
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&apos;s walk through the macro. First, we count the expressions and
sub-expressions by using &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#prewalk/3&quot; title=&quot;Docs for Macro.prewalk/3&quot;&gt;&lt;code&gt;Macro.prewalk/3&lt;/code&gt;&lt;/a&gt;. Then, we
print this number: this is our compile time work. Finally, we just return the
argument code (which is already an AST). This macro effectively does nothing at
runtime: in fact, it won&apos;t leave a trace in the compiled code. This is great for
performance because, well, the compile-time logging code just disappears.&lt;/p&gt;&lt;h3 id=&quot;a-real-world-example-there-is-one-this-time&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-real-world-example-there-is-one-this-time&quot; aria-label=&quot;Anchor link for: a-real-world-example-there-is-one-this-time&quot;&gt;A real-world example (there is one this time!)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I realized macros can be used to do compile-time work after JosÃ© Valim proposed
to use this technique while we were building
&lt;a href=&quot;https://github.com/elixir-lang/gettext&quot; title=&quot;gettext for Elixir&quot;&gt;gettext for Elixir&lt;/a&gt;. Gettext provides a &lt;code&gt;mix gettext.extract&lt;/code&gt; task which is used to extract translations from source files
and write them to &lt;code&gt;.po&lt;/code&gt; files. Translations are just calls to gettext macros
with strings as arguments:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; in lib/greetings.ex
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Gettext&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;gettext &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;Hello people of Gotham!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;fr&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Running &lt;code&gt;mix gettext.extract&lt;/code&gt; results in a &lt;code&gt;.po&lt;/code&gt; file with this content:&lt;/p&gt;&lt;pre data-lang=&quot;txt&quot; class=&quot;language-txt z-code&quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#: lib/greetings.ex:2
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;msgid &amp;quot;Hello people of Gotham!&amp;quot;
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;msgstr &amp;quot;&amp;quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What most gettext bindings for other languages (such as Python) do to extract
translations is parsing the code and looking for calls to &lt;code&gt;gettext()&lt;/code&gt;
functions. In Elixir, instead, we just have to register the string to extract
inside the macro, at compile-time, and then force-recompile the project to
expand the macros and extract the translations. Awesome!&lt;/p&gt;&lt;p&gt;This is what the definition of &lt;code&gt;gettext&lt;/code&gt; roughly looks like
(and the &lt;a href=&quot;https://github.com/elixir-lang/gettext/blob/v0.6.1/lib/gettext/compiler.ex#L40-L60&quot; title=&quot;Implementation of a gettext macro&quot;&gt;actual implementation&lt;/a&gt;):&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmacro&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;gettext&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;msgid&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; locale&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  extract&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;msgid&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    translate&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;msgid&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;locale&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we call &lt;code&gt;extract/2&lt;/code&gt;, we register the &lt;code&gt;msgid&lt;/code&gt; by pushing it to an agent that
we started before recompiling. When the compilation is done, we just dump the
state of this agent. This has no impact whatsoever on the expanded code that is
executed at runtime: calls to &lt;code&gt;gettext/2&lt;/code&gt; are just calls to &lt;code&gt;translate/2&lt;/code&gt; at
runtime.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Deeply understanding macros and how they work is fundamental in order to be able
to meta-program, optimize, and understand Elixir code. In this article, we
experimented with using macros to do compile-time work. We saw a non-real-world
example and then a real-world example taken from the gettext Elixir library.&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;handling-tcp-connections-in-elixir&#x2F;</id>
      <title type="html"><![CDATA[ Handling TCP connections in Elixir ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/handling-tcp-connections-in-elixir/"
            title="Handling TCP connections in Elixir" />
      <published>2015-06-19T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2015-06-19T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;Elixir is frequently used in network-aware applications because of the core design of Erlang and the Erlang VM. In this context, there&apos;s often the need to connect to external services through the network: for example, a classic web application could connect to a relational database and a key-value store, while an application that runs on embedded systems could connect to other nodes on the network.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;Elixir is frequently used in network-aware applications because of the core design of Erlang and the Erlang VM. In this context, there&apos;s often the need to connect to external services through the network: for example, a classic web application could connect to a relational database and a key-value store, while an application that runs on embedded systems could connect to other nodes on the network.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;Many times, the connection with the network service will be transparent to the programmer thanks to external libraries (for example, database drivers), but I think it&apos;s interesting to know how to handle such connections by hand. This turns out to be useful if there are no external libraries for a particular service but also if we want to understand how these libraries work.&lt;/p&gt;&lt;p&gt;In this article we will only talk about TCP connections since TCP is probably the most common protocol used in network applications. The principles we describe, however, are very similar for any other type of connection (for example, connections that use the UDP protocol).&lt;/p&gt;&lt;h2 id=&quot;a-semi-realistic-example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-semi-realistic-example&quot; aria-label=&quot;Anchor link for: a-semi-realistic-example&quot;&gt;A semi-realistic example&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For the sake of this article, we will build an &lt;em&gt;almost&lt;/em&gt; working driver for the &lt;a href=&quot;https://redis.io&quot;&gt;Redis&lt;/a&gt; key-value store. A Redis server is just a TCP server sends and receives messages. Redis uses its own protocol (more on this in a while) on top of TCP to exchange data, without relying on common protocols such as HTTP, but we will not focus on that: we will only deal with the TCP connection from Elixir to the Redis server.&lt;/p&gt;&lt;p&gt;A little side note: obviously, there are several Erlang and Elixir libraries for talking to Redis, but bear with me. Since there&apos;s no point in coming up with a clever name for the library we&apos;re going to write, we&apos;ll just call it &lt;code&gt;Redis&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Let&apos;s get started!&lt;/p&gt;&lt;h2 id=&quot;brief-overview-of-tcp-connections-in-erlang-elixir&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#brief-overview-of-tcp-connections-in-erlang-elixir&quot; aria-label=&quot;Anchor link for: brief-overview-of-tcp-connections-in-erlang-elixir&quot;&gt;Brief overview of TCP connections in Erlang/Elixir&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In Erlang and Elixir, TCP connections are handled using the &lt;a href=&quot;https://www.erlang.org/doc/man/gen_tcp.html&quot;&gt;&lt;code&gt;:gen_tcp&lt;/code&gt;&lt;/a&gt; module. In this article we&apos;ll only set up clients that connect to an external TCP server, but the &lt;code&gt;:gen_tcp&lt;/code&gt; module can also be used to set up TCP servers.&lt;/p&gt;&lt;p&gt;All messages to the server are sent using &lt;code&gt;:gen_tcp.send/2&lt;/code&gt;. Messages sent from the server to the client are usually delivered to the client process as Erlang messages, so it&apos;s straightforward to work with them. As we will see later on, we can control how messages are delivered to the client process with the value of the &lt;code&gt;:active&lt;/code&gt; option on the TCP socket.&lt;/p&gt;&lt;p&gt;To establish a connection with a TCP server we use &lt;code&gt;:gen_tcp.connect/3&lt;/code&gt; passing the host (as a charlist, damn you Erlang!), the port and a list of options. By default, the process that calls &lt;code&gt;connect/3&lt;/code&gt; is the &quot;controlling process&quot; of the TCP connection, which means that TCP messages from the socket will be delivered to it.&lt;/p&gt;&lt;p&gt;That&apos;s all we need to know about TCP connections for now, let&apos;s move on.&lt;/p&gt;&lt;h2 id=&quot;first-implementation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#first-implementation&quot; aria-label=&quot;Anchor link for: first-implementation&quot;&gt;First implementation&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We&apos;ll use a &lt;code&gt;GenServer&lt;/code&gt; as the only interface with the TCP connection. We need a GenServer so that we will be able to keep the TCP socket in the GenServer&apos;s state and reuse that socket for all communication.&lt;/p&gt;&lt;h3 id=&quot;establishing-the-connection&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#establishing-the-connection&quot; aria-label=&quot;Anchor link for: establishing-the-connection&quot;&gt;Establishing the connection&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Since the GenServer will be the only interface to the TCP server and it will only hold a single TCP socket in its state, we want it to always be connected to the TCP server. The best strategy for this is establishing the connection when the GenServer is started, in the &lt;code&gt;init/1&lt;/code&gt; callback. &lt;code&gt;init/1&lt;/code&gt; is called when &lt;code&gt;GenServer.start_link/2&lt;/code&gt; is used to start the process, and the GenServer doesn&apos;t start to do any work until &lt;code&gt;init/1&lt;/code&gt; returns, so it&apos;s the perfect place for us.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;initial_state&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;initial_state&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    opts &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;binary&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;active&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;localhost&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;6379&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;state &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The options we pass to &lt;code&gt;:gen_tcp.connect/3&lt;/code&gt; are straightforward. &lt;code&gt;:binary&lt;/code&gt; instructs the socket to deliver messages from the TCP server to the GenServer as binaries instead of Erlang strings (charlists): in Elixir this is probably what we want, and it&apos;s probably the most efficient choice as well. &lt;code&gt;active: false&lt;/code&gt; tells the socket to never deliver TCP messages as Erlang messages to the GenServer process; we will have to manually retrieve those messages using &lt;a href=&quot;https://www.erlang.org/doc/man/gen_tcp.html#recv-2&quot;&gt;&lt;code&gt;:gen_tcp.recv/2&lt;/code&gt;&lt;/a&gt;. We do this so that the GenServer isn&apos;t flooded with messages coming from the TCP server: we only retrieve messages when we&apos;re ready to process them.&lt;/p&gt;&lt;h3 id=&quot;sending-messages&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sending-messages&quot; aria-label=&quot;Anchor link for: sending-messages&quot;&gt;Sending messages&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We now have a GenServer which is connected to a Redis server. Let&apos;s send commands to the Redis server now.&lt;/p&gt;&lt;h4 id=&quot;resp-protocol&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#resp-protocol&quot; aria-label=&quot;Anchor link for: resp-protocol&quot;&gt;RESP protocol&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;At this point, I should mention the Redis binary protocol, RESP: this is the protocol that Redis uses to encode and decode commands and responses. The &lt;a href=&quot;https://redis.io/topics/protocol&quot;&gt;specification for this protocol&lt;/a&gt; is short and simple to understand, so I encourage you to go read it if you want to know more. For the purpose of this article, we&apos;ll assume we have a full RESP encoder/decoder (&lt;code&gt;Redis.RESP&lt;/code&gt;) which provides two functions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Redis.RESP.encode/1&lt;/code&gt; which encodes a list into a Redis command, like this:&lt;/li&gt;&lt;/ul&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;RESP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;encode&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;GET&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;mykey&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt;=&amp;gt; &amp;lt;&amp;lt;...&amp;gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Redis.RESP.decode/1&lt;/code&gt; which decodes a binary into an Elixir term, like this:&lt;/li&gt;&lt;/ul&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;resp_to_get_command &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-binary z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-binary z-begin z-elixir&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;...&lt;span class=&quot;z-punctuation z-definition z-binary z-end z-elixir&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;RESP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;decode&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;resp_to_get_command&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt;=&amp;gt; 1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;gen-tcp-send-2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#gen-tcp-send-2&quot; aria-label=&quot;Anchor link for: gen-tcp-send-2&quot;&gt;&lt;code&gt;:gen_tcp.send/2&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;As we mentioned at the beginning of the article, we use &lt;code&gt;:gen_tcp.send/2&lt;/code&gt; to send messages through a TCP socket. Our &lt;code&gt;Redis&lt;/code&gt; module will provide a single function to send commands to the Redis server: &lt;code&gt;Redis.command/2&lt;/code&gt;. The implementation is straightforward:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...as before...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;pid&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; cmd&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;call&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;pid&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;command&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; cmd&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;handle_call&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;command&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; cmd&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; state&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;send&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;RESP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;encode&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; `0` means receive all available bytes on the socket.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;recv&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;reply&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;RESP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;decode&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This works fine...&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; pid&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;command&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;pid&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;SET&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;mykey&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;command&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;pid&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;GET&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;mykey&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt;=&amp;gt; 1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;...but there&apos;s a big problem.&lt;/p&gt;&lt;h2 id=&quot;what-went-wrong&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-went-wrong&quot; aria-label=&quot;Anchor link for: what-went-wrong&quot;&gt;What went wrong&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Long story short: &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; is blocking!&lt;/p&gt;&lt;p&gt;The code we wrote would work just fine if the GenServer would be used by just one Elixir process. This is what happens when an Elixir process wants to send a command to the Redis server:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;the Elixir process calls &lt;code&gt;command/2&lt;/code&gt; on the GenServer and &lt;em&gt;blocks&lt;/em&gt;, waiting for the response&lt;/li&gt;&lt;li&gt;the GenServer sends the command to the Redis server and &lt;em&gt;blocks&lt;/em&gt; on &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt;&lt;/li&gt;&lt;li&gt;the Redis server responds to the GenServer&lt;/li&gt;&lt;li&gt;the GenServer responds to the Elixir process&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Can you spot the problem? The GenServer is blocked when it waits for the Redis server to respond. While this is fine when a single Elixir process talks to the GenServer, it instantly becomes terrible when more processes want to communicate with the Redis server through the GenServer. Luckily, we can implement a much better solution.&lt;/p&gt;&lt;h2 id=&quot;queuing-for-the-win&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#queuing-for-the-win&quot; aria-label=&quot;Anchor link for: queuing-for-the-win&quot;&gt;Queuing for the win&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As you probably know, the &lt;code&gt;handle_call/3&lt;/code&gt; callback in a GenServer doesn&apos;t have to return a result to the client right away: it can return a &lt;code&gt;{:noreply, state}&lt;/code&gt; tuple and then reply to the client using &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html#reply/2&quot;&gt;&lt;code&gt;GenServer.reply/2&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This is exactly what we need here: a way for clients to call a function on the GenServer and block waiting for the response, but at the same time a way for the GenServer to keep doing work until it has a response &lt;strong&gt;for that specific client&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;In order continue with this strategy, however, we need to ditch &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; in favor of receiving TCP messages as Erlang messages. We can do that using the &lt;code&gt;active: true&lt;/code&gt; instead of &lt;code&gt;active: false&lt;/code&gt; when connecting to the Redis server: when &lt;code&gt;:active&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, all messages from a TCP socket are delivered as Erlang messages in the form of &lt;code&gt;{:tcp, socket, message}&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;What will happen is this:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;the Elixir process calls &lt;code&gt;command/2&lt;/code&gt; on the GenServer and &lt;strong&gt;blocks&lt;/strong&gt;, waiting for the response&lt;/li&gt;&lt;li&gt;the GenServer sends the command to the Redis server and returns &lt;code&gt;{:noreply, state}&lt;/code&gt; so that it doesn&apos;t block&lt;/li&gt;&lt;li&gt;the Redis server responds to the GenServer, which receives a &lt;code&gt;{:tcp, socket, message}&lt;/code&gt; message&lt;/li&gt;&lt;li&gt;the GenServer handles the message in the &lt;code&gt;handle_info/2&lt;/code&gt; callback, responding to the appropriate client&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;As you can see, the main difference is that from the moment the GenServer sends a command to the Redis server to the moment it receives a response, the GenServer is not blocked and it can send other commands to the server. This is great!&lt;/p&gt;&lt;p&gt;The last thing we need to deal with is how the GenServer is supposed to respond to the &lt;strong&gt;right&lt;/strong&gt; request: when it receives a &lt;code&gt;{:tcp, ...}&lt;/code&gt; message, how does it know who to send it back with &lt;code&gt;GenServer.reply/2&lt;/code&gt;? Since we&apos;re sure Redis responds to requests &lt;em&gt;sequentially&lt;/em&gt; (first in, first out), we can use a simple queue to keep a list of Elixir processes waiting for a response. We&apos;ll keep this queue in the GenServer&apos;s state, enqueuing clients when they make a request and dequeuing them when a response is delivered.&lt;/p&gt;&lt;p&gt;{% raw %}&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;initial_state&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;queue&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;queue&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;new&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...as before...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;handle_call&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;command&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; cmd&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;queue&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; queue&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; state&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We send the command...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;send&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;RESP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;encode&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...enqueue the client...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    state &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;state &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;queue&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;queue&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;from&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; queue&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...and we don&amp;#39;t reply right away.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;noreply&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;handle_info&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; state&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We dequeue the next client:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;value&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; client&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; new_queue&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;queue&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;queue&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We can finally reply to the right client.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;GenServer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;reply&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;client&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;RESP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;decode&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;noreply&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;state &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;queue&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; new_queue&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-invalid z-illegal z-stray-closing-brace z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;messages-on-demand&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#messages-on-demand&quot; aria-label=&quot;Anchor link for: messages-on-demand&quot;&gt;Messages on demand&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the sections above, we moved from a &lt;code&gt;active: false&lt;/code&gt; socket to a &lt;code&gt;active: true&lt;/code&gt; socket in order to receive TCP data as Erlang messages. This works fine, but can lead to problems if the TCP server sends the GenServer &lt;em&gt;a lot&lt;/em&gt; of data: since Erlang has no limit on the message queue of a process, the GenServer can be easily flooded with messages; after all, we chose to use &lt;code&gt;active: false&lt;/code&gt; for this reason in the first place. To avoid that, we can change &lt;code&gt;active: true&lt;/code&gt; to the more conservative &lt;code&gt;active: :once&lt;/code&gt;: this way, only one TCP messages is delivered as an Erlang message, and then the socket goes back to &lt;code&gt;active: false&lt;/code&gt;. We can set &lt;code&gt;active: :once&lt;/code&gt; again to receive the next message, and so on. We can process TCP data as Erlang messages but one at the time, so that we&apos;re sure we&apos;re able to process them.&lt;/p&gt;&lt;p&gt;We just have to remember to reactivate the socket when we receive a &lt;code&gt;{:tcp, ...}&lt;/code&gt; message in the &lt;code&gt;handle_info/2&lt;/code&gt; callback. We can do that using &lt;a href=&quot;https://www.erlang.org/doc/man/inet.html#setopts-2&quot;&gt;&lt;code&gt;:inet.setopts/2&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...as before...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    opts &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;binary&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;active&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;once&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...as before...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...as before...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;handle_info&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; state&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Allow the socket to send us the next message.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;inet&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;setopts&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;socket&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;active&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;once&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; exactly as before
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;plot-twist&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#plot-twist&quot; aria-label=&quot;Anchor link for: plot-twist&quot;&gt;Plot twist&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I didn&apos;t think of the pattern I wrote about. That&apos;s a shocker, right? The pattern I described here is very common and is shared by a number of Erlang and Elixir applications. This pattern applies nicely to any connection with a TCP server (or with anything similar for that matter), and it&apos;s often used in drivers for databases: that&apos;s why I went with Redis in the example.&lt;/p&gt;&lt;p&gt;Lots of real-world libraries use the pattern I talked about: for example, &lt;a href=&quot;https://github.com/wooga/eredis&quot;&gt;eredis&lt;/a&gt; (one of the most used Redis drivers for Erlang) is built very similarly to our example: just look at &lt;a href=&quot;https://github.com/wooga/eredis/blob/770f828918db710d0c0958c6df63e90a4d341ed7/src/eredis_client.erl#L1-L21&quot;&gt;this comment&lt;/a&gt; in the eredis source, which is basically a summary of this article (or is this article an expanded version of that comment? Who knows!). Other examples of libraries that roughly follow this pattern are the Elixir drivers for PostgreSQL (&lt;a href=&quot;https://github.com/ericmj/postgrex&quot;&gt;Postgrex&lt;/a&gt;) and MongoDB (&lt;a href=&quot;https://github.com/ericmj/mongodb&quot;&gt;mongodb&lt;/a&gt;). Currently I&apos;m working on an Elixir driver for &lt;a href=&quot;https://orientdb.org&quot;&gt;OrientDB&lt;/a&gt; (still not public) which uses this pattern as well. So, it must work right?&lt;/p&gt;&lt;h2 id=&quot;better-handling-of-the-tcp-connection&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#better-handling-of-the-tcp-connection&quot; aria-label=&quot;Anchor link for: better-handling-of-the-tcp-connection&quot;&gt;Better handling of the TCP connection&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We happily ignored an annoying thing to deal with throughout this article: error handling!&lt;/p&gt;&lt;p&gt;We&apos;ll keep happily ignoring a subset of the errors that can happen, for example, an empty client queue (which fails the &lt;code&gt;{{:value, val}, new_queue}&lt;/code&gt; pattern match) or an incomplete message from the TCP socket. However, a common set of errors that can happen when dealing with TCP connections are, well, TCP errors like dropped connections or timeouts.&lt;/p&gt;&lt;p&gt;We could try to handle this kind of errors ourselves, but, luckily for us, Elixir core team member James Fish (a.k.a. &lt;a href=&quot;https://github.com/fishcakez&quot;&gt;fishcakez&lt;/a&gt;) did most of the work in its awesome library &lt;a href=&quot;https://github.com/fishcakez/connection&quot;&gt;connection&lt;/a&gt;. While this library is quite young at the time of writing, it&apos;s already being used in the &lt;a href=&quot;https://github.com/ericmj/mongodb&quot;&gt;MongoDB driver&lt;/a&gt; I mentioned before and in the OrientDB driver I&apos;m working on.&lt;/p&gt;&lt;h3 id=&quot;handling-connections-with-connection&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#handling-connections-with-connection&quot; aria-label=&quot;Anchor link for: handling-connections-with-connection&quot;&gt;Handling connections with... Connection&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The connection library defines the &lt;code&gt;Connection&lt;/code&gt; behaviour: the API specified by this behaviour is a superset of the &lt;code&gt;GenServer&lt;/code&gt; API, so it&apos;s easy to understand and integrate into existing projects.&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;https://hexdocs.pm/connection&quot;&gt;docs&lt;/a&gt; explain what &lt;code&gt;Connection&lt;/code&gt; does in great detail, but the gist of it is this: it helps implement a process that has a peer it connects to and has to deal with that peer being possibly unavailable. To do this, the &lt;code&gt;Connection&lt;/code&gt; behaviour defines two additional functions (other than the &lt;code&gt;GenServer&lt;/code&gt; ones) and revises the return values of some &lt;code&gt;GenServer&lt;/code&gt; callbacks.&lt;/p&gt;&lt;p&gt;We will only look at some of the functionality provided by &lt;code&gt;Connection&lt;/code&gt; here, but make sure to read the docs if you want to know more.&lt;/p&gt;&lt;h3 id=&quot;connecting-on-startup&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#connecting-on-startup&quot; aria-label=&quot;Anchor link for: connecting-on-startup&quot;&gt;Connecting on startup&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Our &lt;code&gt;Redis.init/1&lt;/code&gt; callback implementation performs the connection to the Redis server, blocking the process that called &lt;code&gt;Redis.start_link/0&lt;/code&gt; until it returns. This may be fine as we don&apos;t want our GenServer to be able to do anything before it&apos;s connected to the Redis server. However, &lt;code&gt;start_link/0&lt;/code&gt; may be called by a supervisor or by a process specifically designed to just &lt;em&gt;start&lt;/em&gt; the GenServer: in these cases, we&apos;d like &lt;code&gt;start_link/0&lt;/code&gt; to return &lt;code&gt;{:ok, pid}&lt;/code&gt; as soon as possible, handling the process of establishing the TCP connection in the background. We&apos;d also like the GenServer to queue messages until it&apos;s connected to the Redis server. This behaviour would enable us to start the GenServer without blocking the process that called &lt;code&gt;start_link/0&lt;/code&gt;, but blocking all subsequent requests until the GenServer is connected to Redis.&lt;/p&gt;&lt;p&gt;With &lt;code&gt;Connection&lt;/code&gt; we can do exactly this. Returning &lt;code&gt;{:connect, info, state}&lt;/code&gt; from the &lt;code&gt;init/1&lt;/code&gt; callback (instead of &lt;code&gt;{:ok, state}&lt;/code&gt;) makes &lt;code&gt;init/1&lt;/code&gt; return &lt;code&gt;{:ok, pid}&lt;/code&gt; instantly, but also calls the &lt;code&gt;connect/2&lt;/code&gt; callback on the GenServer and stops the GenServer from processing incoming messages until the connection is complete. The &lt;code&gt;info&lt;/code&gt; element in the &lt;code&gt;{:connect, info, state}&lt;/code&gt; tuple should contain any information needed to connect to the peer but that we don&apos;t want to keep in the GenServer&apos;s state.&lt;/p&gt;&lt;p&gt;Let&apos;s change our code to take advantage of this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Connection&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;initial_state&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We need Connection.start_link/2 now,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; not GenServer.start_link/2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;initial_state&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We use `nil` as we don&amp;#39;t need any additional info
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; to connect
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;connect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;_info&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    opts &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;binary&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;active&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;once&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;localhost&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;6379&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;state &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a big improvement over what we had before, but &lt;code&gt;Connection&lt;/code&gt; allows us to make our library even better.&lt;/p&gt;&lt;h3 id=&quot;back-off&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#back-off&quot; aria-label=&quot;Anchor link for: back-off&quot;&gt;Back off!&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The line where we connect to the Redis server using &lt;code&gt;:gen_tcp.connect/3&lt;/code&gt; should raise a loud alarm bell in your head: &lt;code&gt;{:ok, socket} = ...&lt;/code&gt; is not very responsible. In case the connection fails for any reason, the pattern match will fail and, instead of handling the error, the whole GenServer blows up. The obvious thing to do is to handle the result of &lt;code&gt;:gen_tcp.connect/3&lt;/code&gt; with a case statement:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;localhost&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;6379&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;state &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; reason&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; now what?
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we have to decide what we want to do in case there&apos;s an error. Blowing up the GenServer or returning the error to the client is trivial, but in real-worldâ„¢ code we would probably want to try to reconnect to the TCP server. &lt;code&gt;Connection&lt;/code&gt; to the rescue! We can make &lt;code&gt;connect/2&lt;/code&gt; return a &lt;code&gt;{:backoff, timeout, state}&lt;/code&gt; tuple: &lt;code&gt;connect/2&lt;/code&gt; will be called again after &lt;code&gt;timeout&lt;/code&gt; in an attempt to reconnect to the peer. Our &lt;code&gt;connect/2&lt;/code&gt; would look like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;_info&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  opts &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;binary&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;active&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;once&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;gen_tcp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;connect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;localhost&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;6379&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;state &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;socket&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; socket&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; reason&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;puts&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;TCP connection error: &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-begin z-elixir&quot;&gt;#{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir z-embedded&quot;&gt;inspect reason&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Try again in one second:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;backoff&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The great thing about &lt;code&gt;Connection&lt;/code&gt; is that you can return &lt;code&gt;{:backoff, timeout, state}&lt;/code&gt; from almost every callback function, so handling connection failures become straightforward.&lt;/p&gt;&lt;p&gt;When &lt;code&gt;{:backoff, timeout, state}&lt;/code&gt; is returned, &lt;code&gt;connect/2&lt;/code&gt; is called with &lt;code&gt;:backoff&lt;/code&gt; as its first argument: this lets us easily detect &lt;strong&gt;re&lt;/strong&gt;-connections (instead of first connections) and deal with them appropriately. For example, we may want to implement exponential back-off, that is, we retry after one second, then after two seconds, then after four seconds and so on, possibly with a maximum number of retries.&lt;/p&gt;&lt;h2 id=&quot;pooling&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#pooling&quot; aria-label=&quot;Anchor link for: pooling&quot;&gt;Pooling&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Just one last tip: the GenServer we built can be used smoothly with pooling libraries like the famous &lt;a href=&quot;https://github.com/devinus/poolboy&quot;&gt;poolboy&lt;/a&gt;. There&apos;s plenty of literature about poolboy around the web, so I&apos;m not going to describe how it works here. I will just show you a small example.&lt;/p&gt;&lt;p&gt;First, we can create a pool of a given number of our GenServers using &lt;code&gt;:poolboy.start_link/2&lt;/code&gt;.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;poolboy_opts &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;worker_module&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;size&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;redis_opts &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; pool&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;poolboy&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;poolboy_opts&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; redis_opts&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, we can just check out worker processes (which are our &lt;code&gt;Redis&lt;/code&gt; GenServers) out of the pool, perform operations on Redis through them, and then check them back in the pool.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;worker &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;poolboy&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;checkout&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;pool&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;command&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;worker&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;SET&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;mykey&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;poolboy&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;checkin&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;pool&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; worker&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nothing smoother than that!&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We saw how to implement a GenServer that works as an interface to a TCP server. We built a non-blocking GenServer that queues clients in order to send multiple commands to the TCP server while waiting for responses from the server. We used the &lt;a href=&quot;https://github.com/fishcakez/connection&quot;&gt;connection&lt;/a&gt; library to deal with TCP errors (for example, the server being temporarily unavailable) by implementing a back-off strategy. Finally, we briefly looked at how &lt;a href=&quot;https://github.com/devinus/poolboy&quot;&gt;poolboy&lt;/a&gt; can be used to make a pool of our GenServers.&lt;/p&gt;&lt;p&gt;Thanks for reading!&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;tokenizing-and-parsing-in-elixir-using-leex-and-yecc&#x2F;</id>
      <title type="html"><![CDATA[ Tokenizing and parsing in Elixir with yecc and leex ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/tokenizing-and-parsing-in-elixir-using-leex-and-yecc/"
            title="Tokenizing and parsing in Elixir with yecc and leex" />
      <published>2015-06-05T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2015-06-05T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;Lexical analysis (tokenizing) and parsing are very important concepts in computer science and programming. There is a lot of theory behind these concepts, but I won&apos;t be talking about any of that here because, well, it&apos;s &lt;em&gt;a lot&lt;/em&gt;. Also, I feel like approaching these topics in a &quot;scientific&quot; way makes them look a bit scary; however, using them in practice turns out to be pretty straightforward. If you want to know more about the theory, head over to Wikipedia (&lt;a href=&quot;https://en.wikipedia.org/wiki/Lexical_analysis&quot;&gt;lexical analysis&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Parsing&quot;&gt;parsing&lt;/a&gt;) or read the amazing &lt;a href=&quot;https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools&quot;&gt;dragon book&lt;/a&gt; (which I recommend to all programmers, it&apos;s fantastic).&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;Lexical analysis (tokenizing) and parsing are very important concepts in computer science and programming. There is a lot of theory behind these concepts, but I won&apos;t be talking about any of that here because, well, it&apos;s &lt;em&gt;a lot&lt;/em&gt;. Also, I feel like approaching these topics in a &quot;scientific&quot; way makes them look a bit scary; however, using them in practice turns out to be pretty straightforward. If you want to know more about the theory, head over to Wikipedia (&lt;a href=&quot;https://en.wikipedia.org/wiki/Lexical_analysis&quot;&gt;lexical analysis&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Parsing&quot;&gt;parsing&lt;/a&gt;) or read the amazing &lt;a href=&quot;https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools&quot;&gt;dragon book&lt;/a&gt; (which I recommend to all programmers, it&apos;s fantastic).&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;Usually people tend to avoid using lexers and parsers in favor of manual string manipulation and &lt;strong&gt;regular expressions&lt;/strong&gt;. I think this may happen because of the inherent complexity that is generally associated with these tools. In this post, we&apos;ll try to make this complexity go away!&lt;/p&gt;&lt;h2 id=&quot;why&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why&quot; aria-label=&quot;Anchor link for: why&quot;&gt;Why&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;First, lexers and parser are usually used together, but they don&apos;t &lt;em&gt;need&lt;/em&gt; to be. You can use a lexer to tokenize some string into a flat list of tokens, and you can use a parser to understand a grammar of anything.&lt;/p&gt;&lt;p&gt;A little side note before we begin. I said people often choose regular expressions to &quot;parse&quot; and understand text. While this is fine for very simple parsing tasks, most of the time it results in cryptic and fragile code. Also, regular expressions are limited in what type of grammars they can parse (try &lt;a href=&quot;https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags&quot;&gt;parsing HTML with regexps&lt;/a&gt;), so at times you will &lt;em&gt;need&lt;/em&gt; something more powerful.&lt;/p&gt;&lt;h2 id=&quot;enter-leex-and-yecc&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#enter-leex-and-yecc&quot; aria-label=&quot;Anchor link for: enter-leex-and-yecc&quot;&gt;Enter &lt;code&gt;leex&lt;/code&gt; and &lt;code&gt;yecc&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Erlang provides two modules that greatly simplify the task of writing lexers and parsers: &lt;a href=&quot;https://erlang.org/doc/man/leex.html&quot;&gt;&lt;code&gt;leex&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://erlang.org/doc/man/yecc.html&quot;&gt;&lt;code&gt;yecc&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;leex&lt;/code&gt; module is a lexer &lt;em&gt;generator&lt;/em&gt;: it reads a file written in a special syntax and spits out an Erlang module (in a &lt;code&gt;.erl&lt;/code&gt; file) that you can compile and use for the actual tokenizing. &lt;code&gt;yecc&lt;/code&gt; behaves in the same way, except it generates parsers instead of lexers.&lt;/p&gt;&lt;p&gt;Since these modules are available in the Erlang standard distribution (in the &quot;Parse tools&quot; application group), I think there are little to no downsides in using them whenever there&apos;s a problem they could help to solve.&lt;/p&gt;&lt;h2 id=&quot;the-small-contrived-and-unrealistic-example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-small-contrived-and-unrealistic-example&quot; aria-label=&quot;Anchor link for: the-small-contrived-and-unrealistic-example&quot;&gt;The small, contrived and unrealistic example&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Every post explaining something needs one of these examples, so let&apos;s make up ours: we&apos;re going to tokenize and parse Elixir lists of atoms and integers dumped as strings. The final goal will be to be able to read an Elixir list expressed as a string and convert it back to an Elixir string, like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ListParser&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;parse&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;[1, 2, [:foo, [:bar]]]&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;foo&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;bar&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&apos;s small, contrived, and unrealistic, so we should be good to go.&lt;/p&gt;&lt;h2 id=&quot;the-lexer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-lexer&quot; aria-label=&quot;Anchor link for: the-lexer&quot;&gt;The lexer&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The first thing we have to do is &lt;strong&gt;tokenize&lt;/strong&gt; the string: tokenizing just means turning a string into a list of tokens, which are just things a bit more structured than a flat list of characters.&lt;/p&gt;&lt;p&gt;For example, a single token could be an integer like &lt;code&gt;4917&lt;/code&gt;: the &lt;em&gt;integer&lt;/em&gt;&lt;code&gt;4917&lt;/code&gt; has &quot;more structure&quot; than the list of characters &lt;code&gt;[?4, ?9, ?1, ?7]&lt;/code&gt; because we can treat it as a whole.&lt;/p&gt;&lt;p&gt;Tokenizing our lists is straightforward: we only tokenize parentheses (left &lt;code&gt;[&lt;/code&gt; and right &lt;code&gt;]&lt;/code&gt;), commas, integers, and atoms. We&apos;re going to tokenize only simple atoms, like &lt;code&gt;:foo&lt;/code&gt; or &lt;code&gt;:foo_bar&lt;/code&gt;, ignoring atoms that have to use double or single quotes, like &lt;code&gt;:&apos;foo bar&apos;&lt;/code&gt; or &lt;code&gt;:&quot;hello world!&quot;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Rolling our own tokenizer for this basic syntax would be easy, but &lt;code&gt;leex&lt;/code&gt; greatly simplifies the job by letting us write a lexer with a very straightforward syntax. Basically, you identify tokens with regular expressions, and you associate an Erlang expression to each regular expression in order to create a token. I mentioned before that regular expressions aren&apos;t cut for this job: well, they&apos;re not a great tool for parsing because of the recursive nature of the task, but they&apos;re great for splitting things in a flat structure.&lt;/p&gt;&lt;p&gt;The syntax of a &lt;code&gt;leex&lt;/code&gt;&lt;strong&gt;rule&lt;/strong&gt; is this:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Regular expression : Erlang code.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the &quot;Erlang code&quot;, we have to return a &lt;code&gt;{:token, value}&lt;/code&gt; tuple if we want the lexer to return that token to us (actually, a &lt;code&gt;{token, Value}&lt;/code&gt; tuple since we have to use Erlang syntax, not Elixir).&lt;/p&gt;&lt;p&gt;Our lexer is simple:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Rules.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[0-9]+   : {token, {int,  TokenLine, TokenChars}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:[a-z_]+ : {token, {atom, TokenLine, TokenChars}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;\[       : {token, {&amp;#39;[&amp;#39;,  TokenLine}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;\]       : {token, {&amp;#39;]&amp;#39;,  TokenLine}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;,        : {token, {&amp;#39;,&amp;#39;,  TokenLine}}.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We return a &lt;code&gt;{:token, value}&lt;/code&gt; to tell &lt;code&gt;leex&lt;/code&gt; we&apos;re interested in the matched token (that&apos;s why the first element of the tuple is &lt;code&gt;:token&lt;/code&gt;) and we want to include it in the output of the lexical analysis.&lt;/p&gt;&lt;p&gt;&lt;code&gt;TokenLine&lt;/code&gt; and &lt;code&gt;TokenChars&lt;/code&gt; are variables that &lt;code&gt;leex&lt;/code&gt; makes available in the Erlang expression following each regexp. These variables contain the line of the matching token and the matched token&apos;s contents (as a char list).&lt;/p&gt;&lt;p&gt;We always use two- or three-element tuples as the value of tokens because this is the format &lt;code&gt;yecc&lt;/code&gt; wants. As you can see, sometimes we&apos;re interested in the token value, so we return a three-element tuple but sometimes the token itself is its value (for example, the comma) so a two-element tuple is enough. The token line is mandatory so that &lt;code&gt;yecc&lt;/code&gt; can spit out accurate error messages.&lt;/p&gt;&lt;p&gt;We don&apos;t have to keep all the tokens we find: we can discard them by returning the atom &lt;code&gt;:skip_token&lt;/code&gt; instead of a &lt;code&gt;{:token, value}&lt;/code&gt; tuple. A common use case is skipping whitespace:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[\s\t\n\r]+ : skip_token.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Regular expressions can quickly become nasty, but we can extract them into &lt;em&gt;definitions&lt;/em&gt; in the form &lt;code&gt;ALIAS = REGEX&lt;/code&gt;. We put definitions at the top of the file, before the list of rules. To use these definitions in the regexps, we have to surround them with curly braces.&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Definitions.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;INT        = [0-9]+
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ATOM       = :[a-z_]+
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;WHITESPACE = [\s\t\n\r]
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Rules.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;{INT}         : {token, {int,  TokenLine, TokenChars}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;{ATOM}        : {token, {atom, TokenLine, TokenChars}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;\[            : {token, {&amp;#39;[&amp;#39;,  TokenLine}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;\]            : {token, {&amp;#39;]&amp;#39;,  TokenLine}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;,             : {token, {&amp;#39;,&amp;#39;,  TokenLine}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;{WHITESPACE}+ : skip_token.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&apos;re ready to try out our lexer. First, we have to write it to a file with the &lt;code&gt;.xrl&lt;/code&gt; extension. Then, we can turn the &lt;code&gt;.xrl&lt;/code&gt; file into a &lt;code&gt;.erl&lt;/code&gt; file with &lt;code&gt;:leex.file/1&lt;/code&gt;. Finally, we can compile the newly generated Erlang module. Remember that most Erlang modules accept char lists instead of binaries, so we have to surround them in single quotes instead of double quotes. (Side note: Erlang uses single quotes to express complex atoms like &lt;code&gt;&apos;foo bar&apos;&lt;/code&gt; that can&apos;t be expressed using the &lt;code&gt;regular&lt;/code&gt; syntax, but you remembered that, right?)&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;leex&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;file&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;list_lexer.xrl&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt; c&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;list_lexer.erl&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; tokens&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;list_lexer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;[1, [:foo]]&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt; tokens
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-double-quoted z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&amp;quot;&lt;/span&gt;[&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;int&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;1&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-double-quoted z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&amp;quot;&lt;/span&gt;,&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-double-quoted z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&amp;quot;&lt;/span&gt;[&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;atom&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;:foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-double-quoted z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&amp;quot;&lt;/span&gt;]&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-double-quoted z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&amp;quot;&lt;/span&gt;]&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nice! &lt;code&gt;leex&lt;/code&gt; also provides the possibility to define some Erlang code associated with the lexer: this is done in the &lt;code&gt;Erlang code.&lt;/code&gt; section at the bottom of the &lt;code&gt;.xrl&lt;/code&gt; file. We could take advantage of this to convert atom tokens to atoms:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;{INT}  : {token, {int,  TokenLine, list_to_integer(TokenChars)}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;{ATOM} : {token, {atom, TokenLine, to_atom(TokenChars)}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Erlang code.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;to_atom([$:|Chars]) -&amp;gt;
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  list_to_atom(Chars).
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;to_atom/1&lt;/code&gt; just strips the first character of an atom token (which is a colon, &lt;code&gt;$:&lt;/code&gt; in Erlang land) and converts the rest to an atom. We also used &lt;code&gt;list_to_integer/1&lt;/code&gt; to convert integer tokens to integers.&lt;/p&gt;&lt;p&gt;Our full lexer looks like this:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Definitions.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;INT        = [0-9]+
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ATOM       = :[a-z_]+
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;WHITESPACE = [\s\t\n\r]
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Rules.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;{INT}         : {token, {int,  TokenLine, list_to_integer(TokenChars)}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;{ATOM}        : {token, {atom, TokenLine, to_atom(TokenChars)}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;\[            : {token, {&amp;#39;[&amp;#39;,  TokenLine}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;\]            : {token, {&amp;#39;]&amp;#39;,  TokenLine}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;,             : {token, {&amp;#39;,&amp;#39;,  TokenLine}}.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;{WHITESPACE}+ : skip_token.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Erlang code.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;to_atom([$:|Chars]) -&amp;gt;
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    list_to_atom(Chars).
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It works like we expect it to:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; tokens&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;list_lexer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;[1, :foo]&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt; tokens
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-double-quoted z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&amp;quot;&lt;/span&gt;[&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;int&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-double-quoted z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&amp;quot;&lt;/span&gt;,&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;atom&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;foo&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-double-quoted z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&amp;quot;&lt;/span&gt;]&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;the-parser&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-parser&quot; aria-label=&quot;Anchor link for: the-parser&quot;&gt;The parser&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We now have a flat list of tokens. We want to give structure to those tokens and turn them into Elixir lists: we need to &lt;strong&gt;parse&lt;/strong&gt; the list of tokens. A parser works based on a &lt;strong&gt;grammar&lt;/strong&gt;, which is a set of rules that describe how tokens should be structured.&lt;/p&gt;&lt;p&gt;While we could hand-roll our own parser as well (which is a bit harder than rolling out our own lexer), it&apos;s easy to use &lt;code&gt;yecc&lt;/code&gt;: it lets you write very &lt;em&gt;declarative&lt;/em&gt; grammars and it&apos;s as easy to use as &lt;code&gt;leex&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Small side note: at this point, you might think these names make no sense. They do (more or less). They&apos;re both inspired by two very famous pieces of software: the &lt;a href=&quot;https://en.wikipedia.org/wiki/Lex_(software)&quot;&gt;&lt;code&gt;lex&lt;/code&gt;&lt;/a&gt; lexer generator and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Yacc&quot;&gt;&lt;code&gt;yacc&lt;/code&gt;&lt;/a&gt; parser generator. Turns out these Erlang people aren&apos;t just crazy, uh?&lt;/p&gt;&lt;p&gt;Back to us. The central unit of &lt;code&gt;yecc&lt;/code&gt;&apos;s syntax is a &lt;strong&gt;rule&lt;/strong&gt;, which has the form:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Left-hand side -&amp;gt; Right-hand side : Erlang expressions.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The left-hand side is a &lt;strong&gt;category&lt;/strong&gt; of tokens, while the right-hand side is a category or list of categories of tokens. Categories of tokens can be of two types: &lt;em&gt;terminal&lt;/em&gt; and &lt;em&gt;non-terminal&lt;/em&gt;. Terminals are just tokens that do not expand to other categories; non-terminals are categories that recursively expand to other categories.&lt;/p&gt;&lt;p&gt;For example, the &lt;code&gt;:&quot;[&quot;&lt;/code&gt; or &lt;code&gt;{atom, Atom}&lt;/code&gt; tokens are terminals. A list could be represented by the &lt;code&gt;list&lt;/code&gt; non-terminal:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;list -&amp;gt; &amp;#39;[&amp;#39; &amp;#39;]&amp;#39;.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;% or...
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;list -&amp;gt; &amp;#39;[&amp;#39; elems &amp;#39;]&amp;#39;.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;% By the way, &amp;#39;%&amp;#39; is used for comments just like in Erlang.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, we can define multiple &quot;clauses&quot; for each category: the category can assume any value from these clauses (think of them like an &quot;or&quot;).&lt;/p&gt;&lt;p&gt;&lt;code&gt;elems&lt;/code&gt; is a non-terminal itself. We can define it as a single element or an element, a comma and a list of elements:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elems -&amp;gt; elem.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elems -&amp;gt; elem &amp;#39;,&amp;#39; elems.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;elems&lt;/code&gt; category could be &lt;code&gt;elem&lt;/code&gt;, &lt;code&gt;elem, elem&lt;/code&gt;, and so on.&lt;/p&gt;&lt;p&gt;&lt;code&gt;elem&lt;/code&gt; is a non-terminal itself: it represents an integer, an atom, or a list. Note how elegantly we can represent the fact that an element of a list can be itself a list:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elem -&amp;gt; int.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elem -&amp;gt; atom.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elem -&amp;gt; list.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Beautiful!&lt;/p&gt;&lt;p&gt;All non-terminals must at some point expand to terminals: you can&apos;t have a non-terminal that doesn&apos;t expand to anything. &lt;code&gt;yecc&lt;/code&gt; also requires you to specify which categories are terminals and which ones are non-terminals at the top of the file:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Terminals &amp;#39;[&amp;#39; &amp;#39;]&amp;#39; &amp;#39;,&amp;#39; int atom.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Nonterminals list elems elem.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You also have to specify a &lt;strong&gt;root symbol&lt;/strong&gt;, that is, the starting non-terminal that generates the entire grammar. In our case, that&apos;s &lt;code&gt;list&lt;/code&gt;:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Rootsymbol list.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&apos;re almost finished! The last thing we need to do is convert the parsed lists to Elixir lists. We can do this in the Erlang code associated with each parsing rule. In these Erlang expressions, we have some special atoms available: &lt;code&gt;&apos;$1&apos;&lt;/code&gt;, &lt;code&gt;&apos;$2&apos;&lt;/code&gt;, &lt;code&gt;&apos;$3&apos;&lt;/code&gt; and so on. &lt;code&gt;yecc&lt;/code&gt; replaces them with the value returned by the Erlang code associated with the category at the same index on the right-hand side of the rule. I just heard you thought &quot;&lt;em&gt;what?!&lt;/em&gt;&quot;; you&apos;re right, this is way easier to understand in practice:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;list -&amp;gt;
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  &amp;#39;[&amp;#39; &amp;#39;]&amp;#39; : []. % an empty list translate to, well, an empty list
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;list -&amp;gt;
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  &amp;#39;[&amp;#39; elems &amp;#39;]&amp;#39; : &amp;#39;$2&amp;#39;. % the list is formed by its elements
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elems -&amp;gt;
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  elem : [&amp;#39;$1&amp;#39;]. % single-element list (and base case for the recursion)
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elems -&amp;gt;
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  elem &amp;#39;,&amp;#39; elems : [&amp;#39;$1&amp;#39;|&amp;#39;$3&amp;#39;]. % &amp;#39;$3&amp;#39; will be replaced recursively
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elem -&amp;gt; int  : extract_token(&amp;#39;$1&amp;#39;).
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elem -&amp;gt; atom : extract_token(&amp;#39;$1&amp;#39;).
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elem -&amp;gt; list : &amp;#39;$1&amp;#39;.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;% Yep, we can use Erlang code here as well.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Erlang code.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;extract_token({_Token, _Line, Value}) -&amp;gt; Value.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&apos;re done! This is how our full parser looks like:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Nonterminals list elems elem.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Terminals &amp;#39;[&amp;#39; &amp;#39;]&amp;#39; &amp;#39;,&amp;#39; int atom.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Rootsymbol list.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;list -&amp;gt; &amp;#39;[&amp;#39; &amp;#39;]&amp;#39;       : [].
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;list -&amp;gt; &amp;#39;[&amp;#39; elems &amp;#39;]&amp;#39; : &amp;#39;$2&amp;#39;.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elems -&amp;gt; elem           : [&amp;#39;$1&amp;#39;].
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elems -&amp;gt; elem &amp;#39;,&amp;#39; elems : [&amp;#39;$1&amp;#39;|&amp;#39;$3&amp;#39;].
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elem -&amp;gt; int  : extract_token(&amp;#39;$1&amp;#39;).
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elem -&amp;gt; atom : extract_token(&amp;#39;$1&amp;#39;).
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;elem -&amp;gt; list : &amp;#39;$1&amp;#39;.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Erlang code.
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;extract_token({_Token, _Line, Value}) -&amp;gt; Value.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can now create an Erlang file from the &lt;code&gt;yecc&lt;/code&gt; file (which has a &lt;code&gt;.yrl&lt;/code&gt; extension) just like we did with &lt;code&gt;leex&lt;/code&gt;:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;yecc&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;file&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;list_parser.yrl&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt; c&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;list_parser.erl&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;list_parser&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;parse&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-double-quoted z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&amp;quot;&lt;/span&gt;[&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;atom&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;foo&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-double-quoted z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&amp;quot;&lt;/span&gt;]&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;foo&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It works!&lt;/p&gt;&lt;h2 id=&quot;putting-it-together&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#putting-it-together&quot; aria-label=&quot;Anchor link for: putting-it-together&quot;&gt;Putting it together&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can feed the output of the lexer directly into the parser now:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt; source &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;[:foo, [1], [:bar, [2, 3]]]&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; tokens&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; source &lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;to_charlist&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;list_lexer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;string
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;list_parser&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;parse&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;tokens&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;foo&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;bar&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Awesome!&lt;/p&gt;&lt;h2 id=&quot;elixir-integration&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#elixir-integration&quot; aria-label=&quot;Anchor link for: elixir-integration&quot;&gt;Elixir integration&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Manually generating Erlang files from &lt;code&gt;.xrl&lt;/code&gt; and &lt;code&gt;.yrl&lt;/code&gt; files and then compiling those Erlang files can become tedious very quickly. Luckily, Mix can do that for you!&lt;/p&gt;&lt;p&gt;Mix has the concept of &quot;compilers&quot;: they&apos;re just what you think they are, compilers. Mix provides a compiler for Erlang (which just compiles &lt;code&gt;.erl&lt;/code&gt; files through the Erlang installation), one for Elixir, but also a &lt;code&gt;:leex&lt;/code&gt; compiler and &lt;code&gt;:yecc&lt;/code&gt; compiler. They are actually enabled by default, as you can see by inspecting the return value of &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#compilers/0&quot;&gt;&lt;code&gt;Mix.compilers/0&lt;/code&gt;&lt;/a&gt; inside a Mix project:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;iex&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;compilers&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;yecc&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;leex&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;erlang&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;elixir&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;app&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The only thing you have to do to make all of this work effortlessly inside a Mix project is to put your &lt;code&gt;.xrl&lt;/code&gt; and &lt;code&gt;.yrl&lt;/code&gt; files in the &lt;code&gt;src/&lt;/code&gt; directory of the project. You&apos;ll have the compiled Erlang modules available when the Mix compiles the project.&lt;/p&gt;&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;mix&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; new list_parser&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;mkdir&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; list_parser/src&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;mv&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; ./list_parser.yrl ./list_lexer.xrl ./list_parser/src/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, inside &lt;code&gt;list_parser/lib/list_parser.ex&lt;/code&gt;:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ListParser&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;spec&lt;/span&gt; parse&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;binary&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt; :: list
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; tokens&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; str &lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt; to_charlist&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;list_lexer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; list&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;list_parser&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;parse&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;tokens&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    list
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;i-m-not-convinced-yet&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-m-not-convinced-yet&quot; aria-label=&quot;Anchor link for: i-m-not-convinced-yet&quot;&gt;I&apos;m not convinced yet&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All of this may sound very abstract, but I assure you that &lt;code&gt;leex&lt;/code&gt; and &lt;code&gt;yecc&lt;/code&gt; have tons of practical uses. For example, I recently had to write a parser for &lt;a href=&quot;https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html&quot;&gt;PO files&lt;/a&gt; in the context of writing an Elixir binding to &lt;a href=&quot;https://www.gnu.org/software/gettext/&quot;&gt;GNU gettext&lt;/a&gt;. Well, I used &lt;code&gt;yecc&lt;/code&gt; to write a parser: this resulted in a very declarative, clean and easy-to-understand grammar (you can see it &lt;a href=&quot;https://github.com/elixir-lang/gettext/blob/e2e3d42edd2a8fa5aa2deada2e5779f122594e71/src/gettext_po_parser.yrl&quot;&gt;here&lt;/a&gt;) and I&apos;m super-happy with it. We didn&apos;t use &lt;code&gt;leex&lt;/code&gt; in Gettext but decided to roll our own lexer, but only because the tokenization was very simple and &lt;code&gt;leex&lt;/code&gt; may have been slight overkill.&lt;/p&gt;&lt;p&gt;Want another Real-Worldâ„¢ example? Wait, I think I have one: ever heard of the Elixir programming language? It&apos;s a nice language built atop the Erlang virtual matching, focused on concurrency, fault toâ€¦ Well, it&apos;s &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/main/lib/elixir/src/elixir_parser.yrl&quot;&gt;parsed by &lt;code&gt;yecc&lt;/code&gt;&lt;/a&gt;!&lt;/p&gt;&lt;h2 id=&quot;recap&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#recap&quot; aria-label=&quot;Anchor link for: recap&quot;&gt;Recap&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We built a lexer and a parser for transforming strings representing Elixir lists to actual Elixir lists. We used the &lt;code&gt;leex&lt;/code&gt; Erlang module to generate the lexer and the &lt;code&gt;yecc&lt;/code&gt; module to generate the parser.&lt;/p&gt;&lt;p&gt;Finally, only covered the basics of these two tools: they can do more complicated things (&lt;code&gt;yecc&lt;/code&gt; generates LALR parsers if you know what that means) but for that, as usual, there&apos;s their &lt;a href=&quot;https://www.erlang.org/doc/apps/parsetools/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;I&apos;m realizing just now that this post, even if it&apos;s my first post about Elixir, contains barely any Elixir. Let&apos;s just see this as an opportunity to sing the praises of how easy it is to use Erlang from Elixir, shall we?&lt;/p&gt;&lt;h3 id=&quot;very-small-update&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#very-small-update&quot; aria-label=&quot;Anchor link for: very-small-update&quot;&gt;Very small update&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I updated the source code in this blog post to use &lt;code&gt;String.to_charlist/1&lt;/code&gt; and &lt;code&gt;to_charlist/1&lt;/code&gt; instead of &lt;code&gt;String.to_char_list/1&lt;/code&gt; and &lt;code&gt;to_char_list/1&lt;/code&gt; respectively. The &lt;code&gt;charlist&lt;/code&gt; spelling has been deprecated in Elixir 1.3.&lt;/p&gt;</content>
    
    </entry>
  
</feed>
