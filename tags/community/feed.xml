
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title type="text">Andrea Leopardi - Community</title>
  <subtitle type="text">Writing about Elixir, system architecture, and more.</subtitle>
  <updated>2025-07-09T09:11:18.057934917+00:00</updated>
  <link rel="self" type="application/atom+xml" href="https://andrealeopardi.com/tags/community/feed.xml" />
  <link rel="alternate" type="text/html" href="https://andrealeopardi.com/" />
  <id>https://andrealeopardi.com/</id>
  <author>
    <name>Andrea Leopardi</name>
    <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
    <email>hi@andrealeopardi.com</email>
  </author>
  <generator uri="https://www.getzola.org">Zola</generator>
  <icon>https://andrealeopardi.com/favicons/apple-touch-icon.png</icon>
  <logo>https://andrealeopardi.com/favicons/apple-touch-icon.png</logo>

  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;testing-aws-in-elixir&#x2F;</id>
      <title type="html"><![CDATA[ Testing AWS in Elixir ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/testing-aws-in-elixir/"
            title="Testing AWS in Elixir" />
      <published>2022-01-25T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2022-01-25T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;At Community, we run most of our infrastructure and services on AWS. We use several AWS services. Many of our own services interact with AWS directly, such as by uploading and downloading files from S3, querying Athena, and more. Lately, I&apos;ve been trying to improve how we &lt;em&gt;test&lt;/em&gt; the interaction between our services and AWS, testing error conditions and edge cases as well as running reproducible integration tests. In this post, I&apos;ll talk about Localstack, mocks, ExAws, and more.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;At Community, we run most of our infrastructure and services on AWS. We use several AWS services. Many of our own services interact with AWS directly, such as by uploading and downloading files from S3, querying Athena, and more. Lately, I&apos;ve been trying to improve how we &lt;em&gt;test&lt;/em&gt; the interaction between our services and AWS, testing error conditions and edge cases as well as running reproducible integration tests. In this post, I&apos;ll talk about Localstack, mocks, ExAws, and more.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/testing-aws-in-elixir/cover-image.jpg&quot; alt=&quot;Cover image of a data center&quot; /&gt;&lt;/p&gt;&lt;span class=&quot;unsplash-credit&quot;&gt;
    Photo by &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;unsplash.com&amp;#x2F;@ianjbattaglia?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Ian Battaglia&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;p&gt;AWS is an external system that our system has limited control over. First, it operates over the network, which makes it vulnerable to all sorts of network issues and failures. Furthermore, I can&apos;t control how an AWS service operates or its business logic. However, as external services go, it&apos;s a stable one when it comes to its APIs.&lt;/p&gt;&lt;p&gt;When I work with external systems like AWS, I want to test two aspects:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;What happens on the uncommon code branches — network failures, services unavailable, all sorts of things that we know can (and will) happen.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;What happens when interacting with the actual service — I want the application&apos;s code to have some tests that execute the whole code that interacts with the external service end-to-end, without mocks in the middle.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let&apos;s take a look at these below. I set up &lt;a href=&quot;https://github.com/whatyouhide/testing_aws_in_elixir&quot;&gt;a repository&lt;/a&gt; with most of the code discussed here, so you can see it pieced together and working.&lt;/p&gt;&lt;h2 id=&quot;testing-uncommon-conditions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#testing-uncommon-conditions&quot; aria-label=&quot;Anchor link for: testing-uncommon-conditions&quot;&gt;Testing Uncommon Conditions&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Testing relatively-uncommon conditions (such as network failures) requires precise control of the external system. We do not have &lt;em&gt;any&lt;/em&gt; control of the external system in the case of something like AWS. &lt;strong&gt;Test doubles&lt;/strong&gt; are helpful in these cases.&lt;/p&gt;&lt;p&gt;I call &quot;test double&quot; any piece of code that mimics a dependency of a system but is only used in tests. Folks use terms like test double, mock, or stub interchangeably, but I&apos;m a stickler for this stuff, so I&apos;ll use &lt;em&gt;test double&lt;/em&gt; in this post.&lt;/p&gt;&lt;p&gt;In our case, AWS is a natural point where to define a contract between our system and an external dependency. I always think back to &lt;a href=&quot;https://twitter.com/josevalim&quot;&gt;José Valim&lt;/a&gt;&apos;s legendary post &lt;a href=&quot;http://blog.plataformatec.com.br/2015/10/mocks-and-explicit-contracts/&quot;&gt;&quot;Mocks and Explicit Contracts&quot;&lt;/a&gt; when talking about these things. Go give it a read if you haven&apos;t read it already.&lt;/p&gt;&lt;h3 id=&quot;exaws-and-its-behaviour-with-a-u&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#exaws-and-its-behaviour-with-a-u&quot; aria-label=&quot;Anchor link for: exaws-and-its-behaviour-with-a-u&quot;&gt;ExAws and Its Behaviour (With a &quot;U&quot;)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To interact with AWS in our Elixir services we use &lt;a href=&quot;https://github.com/ex-aws/ex_aws&quot;&gt;ExAws&lt;/a&gt; and its plethora of service libraries. I generally like ExAws but lately found a not-very-advertised feature that I &lt;em&gt;love&lt;/em&gt;. I suspect it&apos;s not even intended for the purpose we&apos;re going to use it for here, but it fits like a glove.&lt;/p&gt;&lt;p&gt;ExAws&apos;s architecture is essentially made of a main ExAws library which contains code to make generic HTTP requests to various AWS services. On top of that, there are many service-specific libraries (such as &lt;a href=&quot;https://github.com/ex-aws/ex_aws_s3&quot;&gt;ex_aws_s3&lt;/a&gt;). These libraries usually define &lt;strong&gt;operations&lt;/strong&gt; that implement the &lt;a href=&quot;https://hexdocs.pm/ex_aws/ExAws.Operation.html&quot;&gt;&lt;code&gt;ExAws.Operation&lt;/code&gt;&lt;/a&gt; behaviour. Operations are just data structures. The way you use ExAws is that you create operations (that is, data structures) using the service-specific libraries and execute them against AWS using the main ExAws library.&lt;/p&gt;&lt;p&gt;This is where the cool things begin. ExAws also ships with the &lt;a href=&quot;https://hexdocs.pm/ex_aws/ExAws.Behaviour.html&quot;&gt;&lt;code&gt;ExAws.Behaviour&lt;/code&gt;&lt;/a&gt; behaviour, which defines the core functionality provided by the library. Well, wouldn&apos;t you know, that core functionality is exactly the set of functions that take operations and execute them against AWS. This is the perfect architecture for test doubles.&lt;/p&gt;&lt;h3 id=&quot;test-doubles-for-exaws&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#test-doubles-for-exaws&quot; aria-label=&quot;Anchor link for: test-doubles-for-exaws&quot;&gt;Test Doubles for ExAws&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We use &lt;a href=&quot;https://github.com/dashbitco/mox&quot;&gt;Mox&lt;/a&gt; for test doubles (well, &quot;mocks&quot; as the library calls them). In our application, we usually define a test double for &lt;code&gt;ExAws&lt;/code&gt; itself. It&apos;s as simple as the code below, which we have in a file called &lt;code&gt;test/support/mocks.ex&lt;/code&gt;. We add &lt;code&gt;test/support&lt;/code&gt; to &lt;code&gt;:elixirc_paths&lt;/code&gt; in &lt;code&gt;mix.exs&lt;/code&gt; for the &lt;code&gt;:test&lt;/code&gt; Mix environment.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Mox&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;defmock&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAwsMock&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;for&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Behaviour&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In any code that executes AWS requests, we don&apos;t use &lt;code&gt;ExAws.request/1&lt;/code&gt; or &lt;code&gt;ExAws.stream/1&lt;/code&gt;. Instead, we read the module to use at compile time from our application configuration (still defaulting to &lt;code&gt;ExAws&lt;/code&gt;).&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;ex_aws_mod&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;compile_env&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;my_app&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;test_doubles&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ex_aws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;get_s3_file&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;bucket&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    operation &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;get_object&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;bucket&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;ex_aws_mod&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;operation&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, testing this is straightforward using the functionality provided by Mox.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Mox&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;setup &lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;verify_on_exit!&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;test &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;some piece of code that uses get_s3_file/2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  expect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAwsMock&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt; operation &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert %&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; operation
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert operation&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;http_method &lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;get&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert operation&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;bucket &lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert operation&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;path &lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;expected/path&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;body&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;file contents&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  run_code&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Testing the uncommon cases is just as straightforward, since we control the value returned by the mock&apos;s function.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;expect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAwsMock&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;request&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt; _operation &lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;http_error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We need little code to achieve all this. The operation data structure combined with the behaviour make it easy to build flexible test doubles that we can use to assert we are making the right calls to AWS and to control return values with precision.&lt;/p&gt;&lt;h2 id=&quot;integration-tests&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#integration-tests&quot; aria-label=&quot;Anchor link for: integration-tests&quot;&gt;Integration Tests&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Using test doubles works well in many cases, but it has one drawback that I can&apos;t get over. By using test doubles, we are &lt;em&gt;not exercising&lt;/em&gt; parts of our application code when running tests. Achieving 100% code coverage and exercising every single production code line when testing is not easy. Often, it&apos;s not worth it either. However, testing the interactions with AWS only in the running production code seems a bit too far on the other end.&lt;/p&gt;&lt;p&gt;Luckily, for this particular use case there&apos;s a pretty fantastic tool called &lt;a href=&quot;https://localstack.cloud/&quot;&gt;Localstack&lt;/a&gt;. Localstack provides a faithful replica of AWS itself, but running locally. It fits this use case perfectly (it was kind of built for local integration testing, you could say).&lt;/p&gt;&lt;p&gt;Just a note here: before Localstack, we sometimes used to use &lt;a href=&quot;https://github.com/parroty/exvcr&quot;&gt;ExVCR&lt;/a&gt; to perform this sort of more integration tests. ExVCR lets you &lt;em&gt;record HTTP requests&lt;/em&gt; and make sure that your requests conform to the recorded real requests. It can work well in some cases, but for AWS it didn&apos;t give us the flexibility of quickly changing the way we interface with AWS itself. On top of that, ExVCR is ultimately still defining test doubles under the hood, so we are still not exercising the real ExAws HTTP code.&lt;/p&gt;&lt;h3 id=&quot;running-localstack&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#running-localstack&quot; aria-label=&quot;Anchor link for: running-localstack&quot;&gt;Running Localstack&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We use &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; for running our production application, so we are heavily invested in the Docker ecosystem on our local machines too. We already use Docker and &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;Docker Compose&lt;/a&gt; locally to spin up infrastructure needed by the services we work on. A typical &lt;code&gt;docker-compose.yml&lt;/code&gt; file in one of our services looks like this:&lt;/p&gt;&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;version&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;3&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;services&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;event-bus&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;our-rabbitmq-image&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;5672:5672&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;15672:15672&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;redis&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;redis:5.0-alpine&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;6379:6379&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can run Localstack in a few different ways, but for us the natural fit is to add it as an infrastructure dependency in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;localstack&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;image&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;localstack/localstack&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;environment&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;AWS_DEFAULT_REGION&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;us-west-2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;SERVICES&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;s3,sqs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;EDGE_PORT&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;4566&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-yaml&quot;&gt;ports&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-mapping z-yaml&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;4566:4566&lt;span class=&quot;z-punctuation z-definition z-string z-end z-yaml&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, Localstack uses the &lt;code&gt;SERVICES&lt;/code&gt; environment variable configure which services to make available. In this case, we specified AWS S3 and AWS SQS.&lt;/p&gt;&lt;p&gt;We can now spin up local infrastructure the same way we did before, with &lt;code&gt;docker compose up&lt;/code&gt;. AWS S3 and AWS SQS are running locally, which is pretty cool.&lt;/p&gt;&lt;h3 id=&quot;pointing-exaws-to-localstack&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#pointing-exaws-to-localstack&quot; aria-label=&quot;Anchor link for: pointing-exaws-to-localstack&quot;&gt;Pointing ExAws to Localstack&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Next step is configuring ExAws to talk to the local Localstack running instance.&lt;/p&gt;&lt;p&gt;To do that, we add some configuration to &lt;code&gt;config/test.exs&lt;/code&gt; that only takes affect in the &lt;code&gt;:test&lt;/code&gt; Mix environment. You could easily adapt this to work similarly in the &lt;code&gt;:dev&lt;/code&gt; environment if you wanted to.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; In config/test.exs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;aws_uri &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;get_env&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;AWS_ENDPOINT_URL&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;http://localhost:4566&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;parse&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;for&lt;/span&gt; service &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;s3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;sqs&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  config &lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ex_aws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; service&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;scheme&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; aws_uri&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;scheme&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;host&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; aws_uri&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;host&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;port&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; aws_uri&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;port&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; You might also want to set bogus credentials:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;access_key_id&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my-key-id&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;secret_access_key&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my-secret-key&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&apos;re now almost ready to run some integration tests by talking to the local Localstack.&lt;/p&gt;&lt;h3 id=&quot;bypassing-the-exaws-test-double&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#bypassing-the-exaws-test-double&quot; aria-label=&quot;Anchor link for: bypassing-the-exaws-test-double&quot;&gt;Bypassing the ExAws Test Double&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Remember that in our code we read the ExAws module to use &lt;strong&gt;at compile time&lt;/strong&gt;.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;ex_aws_mod&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;compile_env&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;my_app&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;test_doubles&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ex_aws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This means that we cannot use &lt;code&gt;ExAws&lt;/code&gt; as the module, because &lt;code&gt;@ex_aws_mod&lt;/code&gt; has been &lt;em&gt;compiled&lt;/em&gt; to &lt;code&gt;ExAwsMock&lt;/code&gt; in the test environment. This is great for performance since we don&apos;t need any runtime lookup to retrieve the ExAws module in production, so we&apos;re not really willing to change this approach.&lt;/p&gt;&lt;p&gt;Luckily, Mox ships with the perfect feature for this: the &lt;a href=&quot;https://hexdocs.pm/mox/Mox.html#stub_with/2&quot;&gt;&lt;code&gt;stub_with/2&lt;/code&gt; function&lt;/a&gt;. This function tells mock to call out to another module when defining the stubs for all the functions in the given module. The only requirement is that both the mock module passed as the first argument as well as the module passed as the second argument implement the same behaviour. Well, &lt;code&gt;ExAws&lt;/code&gt; implements the &lt;code&gt;ExAws.Behaviour&lt;/code&gt; already. The world is smiling upon us all here.&lt;/p&gt;&lt;p&gt;In integration tests that want to talk to the local Localstack instead of defining stubs and mocks for &lt;code&gt;ExAws&lt;/code&gt; functions, we do this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;setup &lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Mox&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;stub_with&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAwsMock&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This effectively &quot;resets&quot; the ExAws mock to use ExAws itself. To make this a little more streamlined, we can define this as a test helper function and use it similarly to how we use &lt;code&gt;setup :verify_on_exit!&lt;/code&gt; from Mox.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; In test_helpers.exs (or wherever you define your test helpers)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;TestHelpers&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;use_real_ex_aws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;_ex_unit_context&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Mox&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;stub_with&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAwsMock&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; In tests
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MyTest&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExUnit&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;TestHelpers&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  setup &lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;use_real_ex_aws&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;data-setup-and-teardown&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#data-setup-and-teardown&quot; aria-label=&quot;Anchor link for: data-setup-and-teardown&quot;&gt;Data Setup and Teardown&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;One missing piece of the puzzle here is that, when using Localstack, we need to manually perform some test setup and teardown. When using test doubles, we can decide &quot;on the fly&quot; what to return from the stub or mock functions, without having to &lt;em&gt;prepare&lt;/em&gt; the test doubles in any way. With Localstack, we need to perform all the necessary AWS setup and data setup (and teardown) in order for our tests to test something.&lt;/p&gt;&lt;p&gt;For example, imagine you want to test how your code retrieves a file from AWS S3 and writes its contents to a local file. To do that, you&apos;ll have to:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create a bucket in Localstack&apos;s S3&lt;/li&gt;&lt;li&gt;Write a file to that bucket&lt;/li&gt;&lt;li&gt;Exercise your code and run assertions&lt;/li&gt;&lt;li&gt;Likely, delete the bucket to clean up for other tests to run&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;These steps vary for different configurations and test architectures, but you get the idea. To do the setup and teardown, we just use ExAws directly and manually create the topology we want in the AWS services. For the S3 example above, we would do something like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;test &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;reading a file and writing it out&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Create some random bytes to store in the file.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  contents &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;crypto&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;strong_rand_bytes&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; We set up an on_exit callback to empty and then delete the bucket
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; when the test exit, so that the next test has a clean slate.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  on_exit&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-other z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test-bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;list_objects&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;stream!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;each&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&amp;amp;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;delete_object&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test-bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-capture z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-capture z-elixir&quot;&gt;&amp;amp;&lt;/span&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;key&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;delete_bucket&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test-bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Create bucket.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;put_bucket&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test-bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;us-west-2&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Upload a file.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExAws&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;put_object&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test-bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my/random/file&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; contents&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Now, we run our code and assert on its behavior.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;download_s3_file!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;test-bucket&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my/random/file&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;to&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;localfile&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  assert &lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;read!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;localfile&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt; contents
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In this post we saw how ExAws provides the perfect functionality for easily writing integration tests using Localstack as well as defining test doubles for precise controls of behavior in testing. If you want to dig deeper into integration testing with Elixir, test doubles, end-to-end tests, and more, check out &lt;a href=&quot;https://pragprog.com/titles/lmelixir/testing-elixir/&quot;&gt;Testing Elixir&lt;/a&gt;, the book I co-wrote with &lt;a href=&quot;https://twitter.com/idlehands&quot;&gt;Jeffrey Matthias&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Remember to check out the &lt;a href=&quot;https://github.com/whatyouhide/testing_aws_in_elixir&quot;&gt;repository&lt;/a&gt; that contains all the code and techniques discussed in this post if you want to see it all in action.&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;testing-aws-in-elixir&#x2F;&quot;&gt;Testing AWS in Elixir&lt;/a&gt; was originally published by Andrea Leopardi at &lt;a href=&quot;https:&#x2F;&#x2F;andrealeopardi.com&#x2F;&quot;&gt;Andrea Leopardi&lt;/a&gt; on January 25, 2022.&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;example-based-tests-and-property-based-tests-are-best-friends&#x2F;</id>
      <title type="html"><![CDATA[ Example-based Tests And Property-based Tests Are Good Friends ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/example-based-tests-and-property-based-tests-are-best-friends/"
            title="Example-based Tests And Property-based Tests Are Good Friends" />
      <published>2022-01-09T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2022-01-09T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;I mostly use property-based testing to test stateless functional code. A technique I love to use is to pair property-based tests together with &lt;em&gt;example-based tests&lt;/em&gt; (that is, &quot;normal&quot; tests) in order to have some tests that check real input. Let&apos;s dive deeper into this technique, some contrived blog-post-adequate examples, and links to real-world examples.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;I mostly use property-based testing to test stateless functional code. A technique I love to use is to pair property-based tests together with &lt;em&gt;example-based tests&lt;/em&gt; (that is, &quot;normal&quot; tests) in order to have some tests that check real input. Let&apos;s dive deeper into this technique, some contrived blog-post-adequate examples, and links to real-world examples.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/example-based-tests-and-property-based-tests-are-best-friends/cover-image.jpg&quot; alt=&quot;Cover image of just a bunch of pencils&quot; /&gt;&lt;/p&gt;&lt;span class=&quot;unsplash-credit&quot;&gt;
    Photo by &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;unsplash.com&amp;#x2F;@dtpennington?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;David Pennington&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;p&gt;I&apos;ve been a vocal advocate of property-based testing for a while. I wrote &lt;a href=&quot;https://github.com/whatyouhide/stream_data&quot;&gt;&lt;code&gt;stream_data&lt;/code&gt;&lt;/a&gt;, a property-based testing framework for Elixir, &lt;a href=&quot;https://www.youtube.com/watch?v=p84DMv8TQuo&quot;&gt;gave talks about the topic&lt;/a&gt;, and used property-based testing at work and in my open-source software (such as &lt;a href=&quot;https://github.com/whatyouhide/corsica/blob/a4328f6bae1ccdaeb6d9fed14263c5c5a43540a6/test/properties_test.exs&quot;&gt;Corsica&lt;/a&gt; or &lt;a href=&quot;https://github.com/whatyouhide/redix/blob/53216ab4ba96ceceb3e963faca02e2bf25abdb9a/test/redix/protocol_test.exs&quot;&gt;Redix&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;The most common way I use property-based testing is to test &lt;em&gt;stateless&lt;/em&gt; pieces of code. These tend to be the easiest to come up with properties for.&lt;/p&gt;&lt;p&gt;In this short post, I want to talk about one of my favorite techniques to use when writing property-based tests: mixing properties with explicit &quot;example-based&quot; tests. Example-based tests are the tests you&apos;re used to, where you have some predefined inputs and expected respective outputs and assert that your code matches the inputs to the outputs.&lt;/p&gt;&lt;p&gt;The idea behind this technique is to combine the ability of property-based testing to test a wide range of input data together with some practical example-based tests that ensure that our code behaves as expected on real inputs.&lt;/p&gt;&lt;h2 id=&quot;diving-into-an-example&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#diving-into-an-example&quot; aria-label=&quot;Anchor link for: diving-into-an-example&quot;&gt;Diving Into an Example&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I use this technique quite often. Recently, I used this when writing tests for some JSON-related code in the &lt;a href=&quot;https://github.com/elixir-protobuf/protobuf&quot;&gt;Protobuf library for Elixir&lt;/a&gt; that I help maintain. Let&apos;s take this as the main example.&lt;/p&gt;&lt;p&gt;We&apos;re writing a function called &lt;code&gt;parse_nanoseconds/1&lt;/code&gt; with this spec:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-variable z-other z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-definition z-constant z-elixir&quot;&gt;@&lt;/span&gt;spec&lt;/span&gt; parse_nanoseconds&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt; :: &lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;999_999_999&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;t&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Its job is to:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;take a string&lt;/li&gt;&lt;li&gt;extract the leading one to nine digits from it&lt;/li&gt;&lt;li&gt;parse those digits into an integer that represents conventional nanoseconds in a timestamp&lt;/li&gt;&lt;li&gt;return the parsed integer alongside whatever&apos;s left of the original string (similar to &lt;a href=&quot;https://hexdocs.pm/elixir/Integer.html#parse/1&quot;&gt;&lt;code&gt;Integer.parse/2&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For example, &lt;code&gt;123&lt;/code&gt; means 123 &lt;em&gt;milliseconds&lt;/em&gt;, so &lt;code&gt;123_000_000&lt;/code&gt; nanoseconds. &lt;code&gt;000_001&lt;/code&gt; means one microsecond, &lt;code&gt;000_000_001&lt;/code&gt; means one nanosecond. You get the idea. By the way, see what I did just now? I just showed you some &lt;strong&gt;examples&lt;/strong&gt; of how the function should behave. These make perfect material for our example-based tests.&lt;/p&gt;&lt;h3 id=&quot;designing-the-properties&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#designing-the-properties&quot; aria-label=&quot;Anchor link for: designing-the-properties&quot;&gt;Designing the Properties&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Thinking about properties that hold for the output of this function given a valid input, here&apos;s what I got.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;For valid strings of nine or fewer digits, the output of &lt;code&gt;parse_nanoseconds/1&lt;/code&gt; must be an integer in the range &lt;code&gt;0..999_999_999&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For any string of nine or fewer digits followed by any string &lt;code&gt;trail&lt;/code&gt;, &lt;code&gt;trail&lt;/code&gt; should be returned untouched.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I encoded these into a single &lt;code&gt;property&lt;/code&gt; test (this uses &lt;code&gt;stream_data&lt;/code&gt;):&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MyTest&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExUnit&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Case&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;ExUnitProperties&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  property &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;returns valid nanoseconds integer and trailing string&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Generator that generates strings of 1 to 9 digits.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    nanos_prefix_gen &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;?0&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;?9&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;min_length&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;max_length&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    check all nanos &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; nanos_prefix_gen&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;              rest &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;printable&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;              string &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; nanos &lt;span class=&quot;z-keyword z-operator z-binary-concatenation z-elixir&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest &lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      assert &lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;parsed_nanos&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; parsed_rest&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; parse_nanoseconds&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      assert parsed_nanos &lt;span class=&quot;z-keyword z-operator z-elixir&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;999_999_999&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      assert parse_rest &lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt; rest
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now for the catch: we can write a bunch of implementations of &lt;code&gt;parse_nanoseconds/1&lt;/code&gt; that satisfy this property with no issue, but that are &lt;strong&gt;semantically wrong&lt;/strong&gt;. A contrived, slightly-weird, but effective example is below.&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Sneaky implementation that is wrong but satisfies our properties:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;parse_nanoseconds&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Regex&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-storage z-type z-string z-elixir&quot;&gt;~r&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-interpolated z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-escape-sequence z-regexp z-elixir&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;z-meta z-quantifier z-regexp z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-quantifier z-regexp z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-quantifier z-begin z-regexp z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-quantifier z-min z-regexp z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-quantifier z-regexp z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-quantifier z-max z-regexp z-elixir&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-quantifier z-end z-regexp z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; string&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;parts&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; rest&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; rest&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    _other &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The implementation above uses a regex to split the string in two parts on the first occurrence of one to nine digits. The &lt;code&gt;[&quot;&quot;, rest]&lt;/code&gt; match means that the string was split at the start, so a sequence of digits was found at the start. To keep getting weirder, we&apos;re just returning &lt;code&gt;0&lt;/code&gt; as the nanoseconds. Seems crazy, but guess what? It passes our property. Yeah.&lt;/p&gt;&lt;h3 id=&quot;reintroducing-example-based-tests&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reintroducing-example-based-tests&quot; aria-label=&quot;Anchor link for: reintroducing-example-based-tests&quot;&gt;Reintroducing Example-Based Tests&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Are property-based tests bad? Should we go back to example-based tests and curse the day we thought to use something cool? Well, what I like to do is reintroduce example-based tests to save the day but keep the property-based tests to get all the benefits from those.&lt;/p&gt;&lt;p&gt;I turned the property above into this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;property &lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;returns a valid nanoseconds integer and the trailing string&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Example-based part:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  assert parse_nanoseconds&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;123foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;123_000_000&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;foo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  assert parse_nanoseconds&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;000000001&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Property part (unchanged):
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  nanos_prefix_gen &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;?0&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;?9&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;min_length&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;max_length&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  check all nanos &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; nanos_prefix_gen&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;            rest &lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;&amp;lt;-&lt;/span&gt; string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;printable&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;            string &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; nanos &lt;span class=&quot;z-keyword z-operator z-binary-concatenation z-elixir&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest &lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert &lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;parsed_nanos&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; parsed_rest&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; parse_nanoseconds&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;string&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert parsed_nanos &lt;span class=&quot;z-keyword z-operator z-elixir&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-range z-elixir&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;999_999_999&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    assert parse_rest &lt;span class=&quot;z-keyword z-operator z-comparison z-elixir&quot;&gt;==&lt;/span&gt; rest
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With just a couple of example-based assertions thrown in there, the bogus implementation crumbles and fails miserably.&lt;/p&gt;&lt;p&gt;I sometimes keep the example-based assertions in the &lt;code&gt;property&lt;/code&gt; itself and other times prefer to split them up, but the principle stays the same.&lt;/p&gt;&lt;h3 id=&quot;regressions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#regressions&quot; aria-label=&quot;Anchor link for: regressions&quot;&gt;Regressions&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Another fantastic use case for using example-based tests together with property-based tests is testing &lt;strong&gt;regressions&lt;/strong&gt;. &lt;code&gt;stream_data&lt;/code&gt; (and I&apos;m sure other property-based testing frameworks) often gets feature requests to specify some explicit values in generators. This way, users can be sure that the property they&apos;re encoding will go through some known values that are likely to create issues because of the domain or that caused regressions in the past. My answer is always that this is exactly where the technique described in this blog post comes in handy. You can write your property and pair it up with example-based tests that test your explicit values.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This technique is simple, but I find it effective and practical. You get the benefits of property-based testing, like covering a wide range of inputs and discovering unhandled corner cases, but pair those with some practical examples. Those can provide you with some &quot;sanity checks&quot; to have at least some confidence that your code is doing what it&apos;s supposed to on real-world examples. Those example-based tests can also cover well-known &quot;problematic&quot; values of your input space as well as regressions.&lt;/p&gt;&lt;p&gt;If you are curious about actual examples, go look at the &lt;a href=&quot;https://github.com/elixir-protobuf/protobuf/blob/00144b3a08aac7a38e3e9774a438dcc7da3d8bc7/test/protobuf/json/utils_test.exs&quot;&gt;actual tests in the Protobuf library&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I wrote a bit more about this technique and in general about property-based testing in &lt;a href=&quot;https://pragprog.com/titles/lmelixir/testing-elixir/&quot;&gt;Testing Elixir&lt;/a&gt;, the Pragmatic Programmers book I co-authored with Jeffrey Matthias.&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;example-based-tests-and-property-based-tests-are-best-friends&#x2F;&quot;&gt;Example-based Tests And Property-based Tests Are Good Friends&lt;/a&gt; was originally published by Andrea Leopardi at &lt;a href=&quot;https:&#x2F;&#x2F;andrealeopardi.com&#x2F;&quot;&gt;Andrea Leopardi&lt;/a&gt; on January 09, 2022.&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;rpc-over-rabbitmq-with-elixir&#x2F;</id>
      <title type="html"><![CDATA[ RPC over RabbitMQ (with Elixir) ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/"
            title="RPC over RabbitMQ (with Elixir)" />
      <published>2020-11-23T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2020-11-23T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;At &lt;a href=&quot;https://www.community.com&quot;&gt;Community&lt;/a&gt;, we use &lt;a href=&quot;https://www.rabbitmq.com&quot;&gt;RabbitMQ&lt;/a&gt;, a lot. It&apos;s the infrastructure backbone that allows our services (over forty at this point) to communicate with each other. That mostly happens through &lt;strong&gt;events&lt;/strong&gt; (since we have an event-sourced system), but in some cases what we need is a &lt;em&gt;request-response&lt;/em&gt; interaction between two services. This is the best tool in a few use cases, like retrieving data on the fly or asking a service to do something and return a response. An industry standard for such interactions is HTTP, but we are not big fans of that. Instead, since RabbitMQ is so ubiquitous in our system, we settled on using it for request-response interactions as well in the form of &lt;strong&gt;Remote Procedure Calls&lt;/strong&gt; (RPCs). In this post, I&apos;ll go over the architecture of such interactions. I&apos;ll talk about the RabbitMQ topologies we use to make them work, the benefits around reliability, the compromises around performance, and finally how this all implemented to be as fault-tolerant as possible with Elixir.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;At &lt;a href=&quot;https://www.community.com&quot;&gt;Community&lt;/a&gt;, we use &lt;a href=&quot;https://www.rabbitmq.com&quot;&gt;RabbitMQ&lt;/a&gt;, a lot. It&apos;s the infrastructure backbone that allows our services (over forty at this point) to communicate with each other. That mostly happens through &lt;strong&gt;events&lt;/strong&gt; (since we have an event-sourced system), but in some cases what we need is a &lt;em&gt;request-response&lt;/em&gt; interaction between two services. This is the best tool in a few use cases, like retrieving data on the fly or asking a service to do something and return a response. An industry standard for such interactions is HTTP, but we are not big fans of that. Instead, since RabbitMQ is so ubiquitous in our system, we settled on using it for request-response interactions as well in the form of &lt;strong&gt;Remote Procedure Calls&lt;/strong&gt; (RPCs). In this post, I&apos;ll go over the architecture of such interactions. I&apos;ll talk about the RabbitMQ topologies we use to make them work, the benefits around reliability, the compromises around performance, and finally how this all implemented to be as fault-tolerant as possible with Elixir.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/cover-image.jpg&quot; alt=&quot;Cover image people queuing&quot; /&gt;&lt;/p&gt;&lt;span class=&quot;unsplash-credit&quot;&gt;
    Photo by &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;unsplash.com&amp;#x2F;@amandazi_photography?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;amandazi photography&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;h2 id=&quot;what-is-an-rpc&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-an-rpc&quot; aria-label=&quot;Anchor link for: what-is-an-rpc&quot;&gt;What is an RPC&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;An RPC can be seen as a function call across system boundaries, instead of at the code execution level. An RPC allows you to call a &lt;em&gt;procedure&lt;/em&gt; on another service and treat it mostly like a local function call (with the additional error handling to account for the network interaction).&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/sketch-rpc-definition.png&quot; alt=&quot;Sketch of caller and receiver of an RPC&quot; /&gt;&lt;/p&gt;&lt;p&gt;I won&apos;t go into too much detail about RPCs themselves, but you&apos;re probably familiar with a common form of RPC: HTTP. HTTP request-response interactions between services in a service-oriented architecture are essentially RPCs, they&apos;re just less explicit on the fact that they&apos;re &lt;em&gt;calling a procedure&lt;/em&gt;. One of the benefits of RPCs is, like HTTP, that they are agnostic of technologies. A services written in Elixir can make an RPC (or HTTP request) to a service written in Go, for example. If you want to read more about RPCs, their definition, their benefits, and more, guess where I&apos;ll link you to? Exactly, &lt;a href=&quot;https://en.wikipedia.org/wiki/Remote_procedure_call&quot;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Throughout this post, I will refer to the services involved in an RPC as the &lt;strong&gt;caller service&lt;/strong&gt; and the &lt;strong&gt;receiver service&lt;/strong&gt;.&lt;/p&gt;&lt;h2 id=&quot;why-rpcs-over-rabbitmq&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-rpcs-over-rabbitmq&quot; aria-label=&quot;Anchor link for: why-rpcs-over-rabbitmq&quot;&gt;Why RPCs over RabbitMQ&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;At Community, we chose to do RPCs over RabbitMQ, instead of the common service-to-service communication via HTTP, for a few reasons.&lt;/p&gt;&lt;p&gt;The main reason is that we want to use message queues as often as possible. When you have a queue-based message broker between services that talk to each other, the availability requirements of the services can be less demanding. If you have two services that communicate over HTTP, then if the receiver service is down it means that the requester service will not get a response. Instead, the requester service will have to implement request retries in order to increase the chances of a successful request. With RabbitMQ in the middle, if the receiver is down then the RPC is queued and can be picked up once the receiver comes back up.&lt;/p&gt;&lt;p&gt;Another important reason that influenced our decision is that we make heavy use of RabbitMQ for all sorts of things. This means our engineer know it well, our infrastructure is solid, and we have good systems to trace and observe messages flowing through it.&lt;/p&gt;&lt;p&gt;One compromise we had to make is that, generally speaking, RPCs over RabbitMQ tend to be &lt;em&gt;slower&lt;/em&gt; than direct service-to-service communication (such as HTTP). This is hard to avoid given that in our case we have a message broker sitting between the caller service and the receiver service. That means that you&apos;ll &lt;em&gt;at least&lt;/em&gt; have twice the RTT (round-trip time) on the network, since the messages you&apos;re sending and receiving need to jump through one more hop than if you do direct service-to-service communication. However, when we do RPCs the bottleneck is rarely the network or the message broker, and instead tends to be the processing of the RPC itself. So, we&apos;re fine with the compromise here.&lt;/p&gt;&lt;h2 id=&quot;rabbitmq-topology&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#rabbitmq-topology&quot; aria-label=&quot;Anchor link for: rabbitmq-topology&quot;&gt;RabbitMQ topology&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&apos;s talk about the &lt;strong&gt;RabbitMQ topology&lt;/strong&gt; that powers our RPC system. We have the following components in place:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;A &lt;em&gt;headers&lt;/em&gt; exchange called &lt;code&gt;rpc&lt;/code&gt;. Caller services publish RPCs to this exchange with two headers, &lt;code&gt;destination&lt;/code&gt; (the receiver service name) and &lt;code&gt;procedure&lt;/code&gt; (the procedure name).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Per-service queues where RPCs end up. Their name usually looks like &lt;code&gt;receiver_service.rpcs&lt;/code&gt;. Multiple &lt;em&gt;instances&lt;/em&gt; (nodes) of the same service share a single queue. All the running instances of the receiver service consume from this queue.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A binding between each per-service queue and the &lt;code&gt;rpc&lt;/code&gt; exchange. Since &lt;code&gt;rpc&lt;/code&gt; is a headers exchange, the binding happens on the headers. Most commonly, receiver services bind their queue to the &lt;code&gt;rpc&lt;/code&gt; exchange on the &lt;code&gt;destination: receiver_service_name&lt;/code&gt; header, but sometimes we can be more flexible and specific by also using the &lt;code&gt;procedure&lt;/code&gt; header.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A per-instance &lt;em&gt;response queue&lt;/em&gt; where responses to RPCs are published by the receiver service. Each &lt;em&gt;instance&lt;/em&gt; of the caller service consumes from its dedicated response queue.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Below is an artistic representation of the RabbitMQ topology. This one is for you, my visual friends.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/sketch-rabbitmq-topology.png&quot; alt=&quot;Sketch of RabbitMQ topology&quot; /&gt;&lt;/p&gt;&lt;h2 id=&quot;caller-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#caller-architecture&quot; aria-label=&quot;Anchor link for: caller-architecture&quot;&gt;Caller architecture&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Our focus when designing this architecture &lt;em&gt;was not&lt;/em&gt; performance. Since our system is event-sourced, when services need to access data &lt;em&gt;fast&lt;/em&gt;, we usually have alternatives to RPCs. In those cases, instead of fetching data from another service via RPC, a service can usually build a &quot;local&quot; data store (usually Redis, but whatever fits best) by consuming events and have fast access to that data store. However, this doesn&apos;t cover use cases where a service wants to ask another service to do something and return a result. This can be usually also be done via asynchronous events, but sometimes it really can&apos;t and in any case we like the agility of RPCs for when we&apos;re moving fast and don&apos;t want to commit to particular data exchanges in the long term.&lt;/p&gt;&lt;p&gt;Instead, we heavily focused on reliability and resource utilization. We want our RPCs to succeed whenever they can. We also want to limit RabbitMQ resource utilization as much as possible, since the message broker architecture shares the broker between all the services that use it.&lt;/p&gt;&lt;p&gt;With these goals in mind, we came up with the topology described above. In the sketch below, I&apos;m focusing on the caller service perspective.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/sketch-caller-architecture.png&quot; alt=&quot;Sketch of the architecture of the sender service&quot; /&gt;&lt;/p&gt;&lt;p&gt;This is what happens, step by step, when a service makes an RPC:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The caller assigns a new UUID to the request and encodes the request (we happen to use Protobuf, but anything would work).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The caller includes the name of the &lt;em&gt;response queue&lt;/em&gt; in the &lt;code&gt;reply_to&lt;/code&gt; metadata field of the RabbitMQ message.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The caller publishes the request on the main RPC exchange (&lt;code&gt;rpc&lt;/code&gt;) using headers to specify the &lt;code&gt;destination&lt;/code&gt; and &lt;code&gt;procedure&lt;/code&gt; to call.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If publishing the request is successful, the caller stores the request in an in-memory key-value store (ETS for Elixir and Erlang folks), storing the mapping from request ID to caller process. This is used to map responses back to requests when they come back.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The caller has a pool of AMQP channels also consuming from the response queue. When the response comes back on such queue, a consumer channel picks it up, finds the corresponding caller process from the in-memory key-value store, and hands the caller process the response.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From a code standpoint, an RPC really does look like a function call. The main difference is that an RPC can &lt;em&gt;definitely&lt;/em&gt; fail due to the network interaction, so we always make sure to return a successful value or an error value. In Elixir, that translates to &lt;code&gt;{:ok, response}&lt;/code&gt; or &lt;code&gt;{:error, reason}&lt;/code&gt; tuples. In a typed language (say Haskell) it would be the &quot;either&quot; type. This is what an RPC looks like from the caller side (in Elixir-flavored pseudocode):&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;RPCPool&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;call&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my_receiver_svc&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;add&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;args&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-map-pair z-elixir&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;ok&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;result&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-map-pair z-elixir&quot;&gt;=&amp;gt;&lt;/span&gt; result&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    result &lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt;=&amp;gt; 13
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;error&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; reason&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-arrow z-elixir&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;failed because: &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-begin z-elixir&quot;&gt;#{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-interpolation z-elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir z-embedded&quot;&gt;inspect&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;reason&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-interpolation z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt;=&amp;gt; such as :timeout
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;the-response-queue&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-response-queue&quot; aria-label=&quot;Anchor link for: the-response-queue&quot;&gt;The response queue&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;It&apos;s worth focusing on the &lt;strong&gt;response queue&lt;/strong&gt;. All AMQP channels in the caller pool declare this queue when they start up. This is a common pattern in RabbitMQ since declaring resources (queues, exchanges, and bindings) is &lt;em&gt;idempotent&lt;/em&gt;, that is, you can do it as many times as you want with the resource being declared only once.&lt;/p&gt;&lt;p&gt;The response queue is declared with a key property: &lt;code&gt;auto_delete&lt;/code&gt;. When this property is present, RabbitMQ deletes the queue as soon as there are no channels consuming from it anymore. This is exactly the behavior we want: as long as a caller pool is &quot;up and running&quot;, there&apos;s going to be at least one channel consuming from the queue and handing responses over to caller processes. However, if the whole pool or the whole node for the caller goes down then the queue will be deleted. This works perfectly, because if the caller node goes down, then we likely lost the &quot;context&quot; of the requests, and even if the node will come back up then it won&apos;t know what to do with the responses anymore. As &lt;a href=&quot;https://www.rabbitmq.com/direct-reply-to.html&quot;&gt;one RabbitMQ documentation page&lt;/a&gt; puts it:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Reply messages sent using [RPC] are in general not fault-tolerant; they will be discarded if the client that published the original request subsequently disconnects. The assumption is that an RPC client will reconnect and submit another request in this case.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In this way, we allow RabbitMQ to clean itself up and avoid leaving garbage in it, without writing any code to do so.&lt;/p&gt;&lt;p&gt;The code for each AMQP channel that consumes responses goes something like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;channel &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;open&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;amqp_connection&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; &amp;quot;response_queue&amp;quot; is determined per-pool.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; Usually it looks like: &amp;quot;caller_service.#{UUID.generate()}&amp;quot;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;declare&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;channel&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; response_queue&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;auto_delete&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;consume&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;channel&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; response_queue&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When a response comes back, the caller does a key lookup on the response&apos;s request ID in the in-memory key-value data store to retrieve the original request and moreover the process that&apos;s waiting on the response. It looks like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;handle_rabbitmq_message&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  response &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; decode!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  caller_process &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;KVStore&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;fetch&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;request_id&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  send&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;caller_process&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;elixir-process-architecture&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#elixir-process-architecture&quot; aria-label=&quot;Anchor link for: elixir-process-architecture&quot;&gt;Elixir process architecture&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The Elixir process architecture and supervision tree structure we use for the caller is based on the properties of the response queue described above. We have the following constraints:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;If the in-memory key-value store that holds the mappings between request IDs and caller processes (ETS) crashes, we want the whole pool to crash. We wouldn&apos;t be able to map responses back to requests in any case at that point, and it&apos;s better to let RabbitMQ delete the whole response queue in such cases.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If a connection or a channel goes down, we don&apos;t want to delete the response queue. As long as there&apos;s at least one channel consuming from the response queue, we&apos;ll be able to hand responses back to the corresponding caller processes.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With these constraints, we designed this supervision tree:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/sketch-supervision-tree.png&quot; alt=&quot;Sketch of the supervision tree&quot; /&gt;&lt;/p&gt;&lt;p&gt;It&apos;s pretty deep and nested, but a lot of it is dancing to use the right supervision strategies. We have a main supervisor for the whole caller architecture. Then, we have a pool supervisor that supervises the connections and channels. That supervisor&apos;s children are supervisors that each look over one AMQP connection and one &quot;channel supervisor&quot;. The channel supervisor supervises AMQP channels. That was hard to type, but hopefully it makes sense?&lt;/p&gt;&lt;p&gt;I won&apos;t go into detail here, but the point of this design is that if anything in that supervisor fails, the failures bubble up and cascade correctly. If there&apos;s really nothing more fun that you could do (I hardly believe that), play &quot;kill the process&quot; in your head and see what happens when you kill any process above. It&apos;s fun, if this sort of stuff is fun for you (which is a tautology).&lt;/p&gt;&lt;p&gt;The registry shown in the diagram is an Elixir &lt;code&gt;Registry&lt;/code&gt; that all AMQP channels register themselves to. This allows us to access AMQP channels fast, without going through a single pool process. I talked more about Registry-based process pools in Elixir in &lt;a href=&quot;https://andrealeopardi.com/posts/process-pools-with-elixirs-registry&quot;&gt;another blog post&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;All the code in there is build on top of the &lt;a href=&quot;https://github.com/pma/amqp&quot;&gt;AMQP&lt;/a&gt; Elixir library.&lt;/p&gt;&lt;h2 id=&quot;receiver-architecture-and-topology&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#receiver-architecture-and-topology&quot; aria-label=&quot;Anchor link for: receiver-architecture-and-topology&quot;&gt;Receiver architecture and topology&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The receiver architecture, compared to the caller, is straightforward. Every service sets up a pool of RabbitMQ connections (and channels), declares a queue, and binds it to the main RPC exchange (&lt;code&gt;rpc&lt;/code&gt;). That exchange is a &lt;em&gt;headers&lt;/em&gt; exchange, and each service usually binds the queue with the &lt;code&gt;destination&lt;/code&gt; header matching that service. For example, here&apos;s the pseudocode for the &lt;code&gt;receiver_svc&lt;/code&gt; service:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;declare&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;channel&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;receiver_svc.rpcs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;durable&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;bind&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;  channel&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;receiver_svc.rpcs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;exchange&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;rpc&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;headers&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;destination&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;receiver_svc&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;consume&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;channel&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;receiver_svc.rpcs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All AMQP channels over all nodes of the receiver service declare the queue and bind it &lt;em&gt;on every startup&lt;/em&gt;. Idempotency, friends!&lt;/p&gt;&lt;p&gt;From here, it&apos;s all downhill: when a request comes in on a channel, the node decodes it, processes it, produces a response, and publishes it back on RabbitMQ. Where does it publish it? Well, good question. That&apos;s why all requests have the &lt;code&gt;reply_to&lt;/code&gt; RabbitMQ metadata field set to the reply queue of the caller. We take advantage of the default &lt;code&gt;amqp.direct&lt;/code&gt; exchange, which is pre-declared by all RabbitMQ nodes, to publish the response directly to the reply queue. The pseudocode to handle a request is this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;response &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; process_request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;publish&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;exchange&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;amqp.direct&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;routing_key&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; request&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;metadata&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;reply_to&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Below is a nice artsy drawing focusing on the RabbitMQ topology and interactions of the receiver service.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/sketch-receiver-architecture.png&quot; alt=&quot;Sketch of the pool supervision tree&quot; /&gt;&lt;/p&gt;&lt;h3 id=&quot;in-elixir-as-always-the-answer-is-broadway&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-elixir-as-always-the-answer-is-broadway&quot; aria-label=&quot;Anchor link for: in-elixir-as-always-the-answer-is-broadway&quot;&gt;In Elixir, as always, the answer is Broadway&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As far as Elixir specifics goes, we use &lt;a href=&quot;https://github.com/dashbitco/broadway&quot;&gt;Broadway&lt;/a&gt; to consume RPCs, hooking it up with the &lt;a href=&quot;https://github.com/dashbitco/broadway_rabbitmq&quot;&gt;&lt;code&gt;broadway_rabbitmq&lt;/code&gt;&lt;/a&gt; producer.&lt;/p&gt;&lt;p&gt;I personally made enough changes to &lt;code&gt;broadway_rabbitmq&lt;/code&gt; by now that, look at that, it perfectly fits our use case! This is how a typical Broadway pipeline to consume RPCs looks like in our services:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MyService&lt;/span&gt;.&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;RPCConsumer&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Broadway&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    broadway_rabbitmq_options &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;queue&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my_service.rpcs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;declare&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;durable&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-language z-elixir&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;bindings&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;rpc&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;arguments&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;destination&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;longstr&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;my_service&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;metadata&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;reply_to&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Broadway&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;start_link&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;name&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;producer&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;BroadwayRabbitMQ&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Producer&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; broadway_rabbitmq_options&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;processors&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;default&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;concurrency&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-elixir&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;handle_message&lt;/span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-elixir&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; %&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Broadway&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt; message&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt; _context&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    response &lt;span class=&quot;z-keyword z-operator z-assignment z-elixir&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      request
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt; decode_request!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt; process_request&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt; encode_response!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; This is where we publish the response.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;AMQP&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;publish&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;      message&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;metadata&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;amqp_channel&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;exchange&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;amqp.direct&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;routing_key&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; message&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;metadata&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;reply_to&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;payload&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; response
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;    message
&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, &lt;code&gt;broadway_rabbitmq&lt;/code&gt; exposes the AMQP channel it uses to consume under the hood in the message metadata. We use that to send replies. Easy-peasy.&lt;/p&gt;&lt;p&gt;Small disclaimer: we have a wrapper library around Broadway that makes this slightly boilerplate-y code a bit simpler and more tailored to our use case. It also provides us with some nice additions such as round-robin connection attempts over a list of RabbitMQ URLs (for reliability), automatic decoding of requests (so that the decoding is done under the hood), metrics, error reporting, and so on. However, the gist of it is exactly the code above.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We saw how we architected a system to make service-to-service RPCs over RabbitMQ. Then, we went over the RabbitMQ topology we use, showing all the queues, exchanges, and bindings involved. Finally, we also covered the Elixir-specific implementation of this system, to sprinkle some practical examples on top of this stuff.&lt;/p&gt;&lt;p&gt;Here&apos;s some more resources on RPCs over RabbitMQ:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.rabbitmq.com/tutorials/tutorial-six-python.html&quot;&gt;RabbitMQ&apos;s tutorial&lt;/a&gt; shows a nice step-by-step implementation of RPCs over RabbitMQ using the Python client. It&apos;s a bit less complex than our architecture since the response queue doesn&apos;t get deleted when the caller stops, but it can still go a long way. They do make it clear that this is not a totally production-ready solution.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.rabbitmq.com/direct-reply-to.html&quot;&gt;RabbitMQ&apos;s &quot;direct reply-to&quot; documentation&lt;/a&gt;, which shows an alternative way to do RPCs over RabbitMQ that&apos;s built-in into RabbitMQ. This solution is simpler than ours as it doesn&apos;t allow multiple consumers to get messages from a shared &lt;em&gt;response queue&lt;/em&gt;, but it&apos;s pretty cool. I learned about it while writing this blog post.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/swlh/scalable-microservice-architecture-using-rabbitmq-rpc-d07fa8faac32&quot;&gt;A nice blog post&lt;/a&gt; about RPC over RabbitMQ. Lots of Python code to look at.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;acknowledgements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#acknowledgements&quot; aria-label=&quot;Anchor link for: acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I need to thank my coworker and friend Tom Patterer, who designed and implemented the system with me and helps me maintain it while our architecture and needs to keep growing. I also need to thank &lt;a href=&quot;https://twitter.com/josevalim&quot;&gt;José&lt;/a&gt; because he pushed me to write this blog post when I chatted with him about all of this.&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;rpc-over-rabbitmq-with-elixir&#x2F;&quot;&gt;RPC over RabbitMQ (with Elixir)&lt;/a&gt; was originally published by Andrea Leopardi at &lt;a href=&quot;https:&#x2F;&#x2F;andrealeopardi.com&#x2F;&quot;&gt;Andrea Leopardi&lt;/a&gt; on November 23, 2020.&lt;/p&gt;</content>
    
    </entry>
  
    <entry>
      <id>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;sharing-protobuf-schemas-across-services&#x2F;</id>
      <title type="html"><![CDATA[ Sharing Protobuf schemas across services ]]></title>
      <link rel="alternate"
            type="text/html"
            href="https://andrealeopardi.com/posts/sharing-protobuf-schemas-across-services/"
            title="Sharing Protobuf schemas across services" />
      <published>2020-02-24T00:00:00+00:00</published>
      <author>
        <name>Andrea Leopardi</name>
        <uri>https:&#x2F;&#x2F;andrealeopardi.com&#x2F;</uri>
        <email>hi@andrealeopardi.com</email>
      </author>
      <updated>2020-02-24T00:00:00+00:00</updated>
      <summary type="html">&lt;p&gt;The system that we&apos;re building at &lt;a href=&quot;https://www.community.com&quot;&gt;Community.com&lt;/a&gt; is made of a few services (around fifteen at the time of writing) that interact with each other through a basic version of event sourcing. All events flow (published and consumed) through RabbitMQ and are serialized with &lt;a href=&quot;https://developers.google.com/protocol-buffers&quot;&gt;Protobuf&lt;/a&gt;. With several services already and many more coming in the future, managing the Protobuf schemas becomes a painful part of evolving and maintaining the system. Do we copy the schemas in all services? Do we keep them somewhere and use something akin to Git submodules to keep them in sync in all of our projects? What do we do?! In this post, I&apos;ll go through the tooling that we came up with in order to sanely manage our Protobuf schemas throughout our services and technology stack.&lt;/p&gt;</summary>
    
      <content type="html">&lt;p&gt;The system that we&apos;re building at &lt;a href=&quot;https://www.community.com&quot;&gt;Community.com&lt;/a&gt; is made of a few services (around fifteen at the time of writing) that interact with each other through a basic version of event sourcing. All events flow (published and consumed) through RabbitMQ and are serialized with &lt;a href=&quot;https://developers.google.com/protocol-buffers&quot;&gt;Protobuf&lt;/a&gt;. With several services already and many more coming in the future, managing the Protobuf schemas becomes a painful part of evolving and maintaining the system. Do we copy the schemas in all services? Do we keep them somewhere and use something akin to Git submodules to keep them in sync in all of our projects? What do we do?! In this post, I&apos;ll go through the tooling that we came up with in order to sanely manage our Protobuf schemas throughout our services and technology stack.&lt;/p&gt;&lt;span id=&quot;continue-reading&quot;&gt;&lt;/span&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/sharing-protobuf-schemas-across-services/cover-image.jpg&quot; alt=&quot;Cover image of a library with books&quot; /&gt;&lt;/p&gt;&lt;span class=&quot;unsplash-credit&quot;&gt;
    Photo by &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;unsplash.com&amp;#x2F;s&amp;#x2F;photos&amp;#x2F;library?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Fahrul Azmi&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;p&gt;This post will go through the steps that led us to the solution we&apos;re currently using, so feel free to skip ahead if you just want to know what we ended up with.&lt;/p&gt;&lt;h2 id=&quot;starting-out-a-single-elixir-library&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#starting-out-a-single-elixir-library&quot; aria-label=&quot;Anchor link for: starting-out-a-single-elixir-library&quot;&gt;Starting out: a single Elixir library&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When we started defining schemas for our Protobuf events, we were only using such schemas from Elixir. We created a library called &lt;code&gt;events&lt;/code&gt; and started hosting it on our private &lt;a href=&quot;https://hex.pm&quot;&gt;Hex&lt;/a&gt; repository. &lt;code&gt;events&lt;/code&gt; contained all the &lt;code&gt;.proto&lt;/code&gt; schema files and depended on the &lt;a href=&quot;https://github.com/bitwalker/exprotobuf&quot;&gt;exprotobuf&lt;/a&gt; library to &quot;compile&quot; the Protobuf schemas to Elixir code. exprotobuf uses a different approach than most Protobuf libraries for other languages that I encountered: it loads the &lt;code&gt;.proto&lt;/code&gt; schema definitions at compile time instead of using &lt;code&gt;protoc&lt;/code&gt; to compile the Protobuf files to &lt;code&gt;.ex&lt;/code&gt; Elixir files. Essentially, we created a module like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Protobuf&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;from&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;wildcard&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;expand&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;../schemas/*.proto&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-variable z-language z-elixir&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The most common approach to turning a Protobuf schema into a data structure representable by the programming language you&apos;re using is to turn the schema into some kind of &quot;struct&quot; representation. That&apos;s exactly what exprotobuf does for Elixir. This is one of our schemas:&lt;/p&gt;&lt;pre data-lang=&quot;proto&quot; class=&quot;language-proto z-code&quot;&gt;&lt;code class=&quot;language-proto&quot; data-lang=&quot;proto&quot;&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;# In schemas/event_envelope.proto
&lt;/span&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;&lt;span class=&quot;z-keyword z-other z-syntax z-proto&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-proto&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-proto&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-proto&quot;&gt;&amp;quot;&lt;/span&gt;proto3&lt;span class=&quot;z-punctuation z-definition z-string z-end z-proto&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-terminator z-proto&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;&lt;span class=&quot;z-meta z-class z-proto&quot;&gt;&lt;span class=&quot;z-storage z-type z-message z-proto&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-proto&quot;&gt;EventEnvelope&lt;/span&gt;&lt;span class=&quot;z-meta z-class z-proto&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-message z-begin z-proto&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-class z-proto&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;&lt;span class=&quot;z-meta z-class z-proto&quot;&gt;&lt;span class=&quot;z-support z-type z-proto&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;z-variable z-other z-field z-proto&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-proto&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-proto&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;z-punctuation z-terminator z-proto&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;&lt;span class=&quot;z-meta z-class z-proto&quot;&gt;&lt;span class=&quot;z-support z-type z-proto&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;z-variable z-other z-field z-proto&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-proto&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-constant z-numeric z-proto&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;z-punctuation z-terminator z-proto&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-proto&quot;&gt;&lt;span class=&quot;z-meta z-class z-proto&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-message z-end z-proto&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;exprotobuf loads this up at compile time and turns it into roughly this Elixir definition:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Events&lt;/span&gt;.&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;EventEnvelope&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;defstruct&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;timestamp&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;source&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; A bunch of encode/decode functions plus
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; new/1 to create a new struct.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-elixir&quot;&gt;#&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This whole approach worked okay for a while, but soon we needed to use our Protobuf definitions from a service written in Python.&lt;/p&gt;&lt;h2 id=&quot;sharing-protobuf-schemas-through-git-submodules&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#sharing-protobuf-schemas-through-git-submodules&quot; aria-label=&quot;Anchor link for: sharing-protobuf-schemas-through-git-submodules&quot;&gt;Sharing Protobuf schemas through Git submodules&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The first thing that came to mind when we thought about sharing Protobuf schema definitions across different programming languages was &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules&quot;&gt;Git submodules&lt;/a&gt;. We created a &lt;code&gt;proto_schemas&lt;/code&gt; repository containing all the &lt;code&gt;.proto&lt;/code&gt; files and added it as a Git submodule to our &lt;code&gt;events&lt;/code&gt; Elixir library and to a single Python service. Not much changed on the Elixir side, but on the Python side things were working a bit differently. The Protobuf Python library uses a common approach among Protobuf libraries, which is to use a plugin to the &lt;a href=&quot;https://github.com/protocolbuffers/protobuf/releases&quot;&gt;&lt;code&gt;protoc&lt;/code&gt;&lt;/a&gt; compiler in order to generate Python code from the &lt;code&gt;.proto&lt;/code&gt; files. Essentially, you call:&lt;/p&gt;&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;protoc&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;/span&gt;python_out&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-option z-shell&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;/span&gt;I&lt;/span&gt; ../schemas event_envelope.proto&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, for example, our &lt;code&gt;event_envelope.proto&lt;/code&gt; file would become &lt;code&gt;event_envelope.pb2.py&lt;/code&gt; once compiled.&lt;/p&gt;&lt;p&gt;The Git-submodule approach worked okay for a while, but it presented two main challenges: how to uniformly version schemas across languages? How to avoid having every project contain a copy of the Protobuf schemas and having to compile them individually to the host language?&lt;/p&gt;&lt;p&gt;Lucky for me, one day I was discussing these problems with my friend &lt;a href=&quot;https://github.com/ericmj&quot;&gt;Eric&lt;/a&gt; from the Elixir team, and we figured out a way to only keep the Protobuf schemas in a single place, compile them all in a single place, but use them from different languages all around.&lt;/p&gt;&lt;h2 id=&quot;protoc-ci-and-libraries&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#protoc-ci-and-libraries&quot; aria-label=&quot;Anchor link for: protoc-ci-and-libraries&quot;&gt;&lt;code&gt;protoc&lt;/code&gt;, CI, and libraries&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I did some research on available Protobuf libraries for Elixir and was lucky to find an alternative to exprotobuf called &lt;a href=&quot;https://github.com/tony612/protobuf-elixir&quot;&gt;protobuf-elixir&lt;/a&gt;. The APIs that this library exposes to manipulate Protobuf structs and manage serialization were exactly the same as the APIs exposed by exprotobuf, so compatibility was not an issue. However, this library had a key features that I was interested in: it supported code generation through the &lt;code&gt;protoc&lt;/code&gt; Protobuf compiler. It worked like it does in Python (and many other languages).&lt;/p&gt;&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;protoc&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;/span&gt;elixir_out&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-option z-shell&quot;&gt;=&lt;/span&gt;./lib&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;/span&gt;I&lt;/span&gt; ../schemas event_envelope.proto&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, I had code generation through &lt;code&gt;protoc&lt;/code&gt; working for both Python and Elixir. The next step was to map Protobuf packages (that is, collections of Protobuf schemas) to &lt;em&gt;language libraries&lt;/em&gt; and publish those to package repositories for the respective languages. We&apos;ll go through what we did for Elixir, but the setup for Python looks almost identical.&lt;/p&gt;&lt;p&gt;All our events-related Protobuf schemas live in the &lt;code&gt;events&lt;/code&gt; Protobuf package. So, we decided to map that to an Elixir library called &lt;code&gt;events_schemas&lt;/code&gt;. The nice thing about this library is that it only contains the auto-generated code for the Protobuf schemas and nothing else. It essentially exposes an interface to the Protobuf schemas from Elixir. In the same repository where we keep the &lt;code&gt;.proto&lt;/code&gt; files, we created a &lt;code&gt;languages/elixir/&lt;/code&gt; directory to store everything necessary for compiling to Elixir and publishing this library on our private &lt;a href=&quot;https://hex.pm&quot;&gt;hex.pm&lt;/a&gt; repository. The &quot;skeleton&quot; of the &lt;code&gt;events_schemas&lt;/code&gt; library looks like this:&lt;/p&gt;&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;events_schemas
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;├── .gitignore
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;├── lib
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;│   └── .gitkeep
&lt;/span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;└── mix.exs
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Basically, the library is empty. The &lt;code&gt;mix.exs&lt;/code&gt; file looks like this:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-module z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;EventsSchemas&lt;/span&gt;.&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;MixProject&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;Project&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;app&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;events_schemas&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;version&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; version&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;elixir&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;~&amp;gt; 1.8&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;deps&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; deps&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;package&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt; package&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-public z-elixir&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;extra_applications&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;protobuf&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; protobuf_dependency_version&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;organization&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;community&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;files&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;lib/**/*.pb.ex&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;mix.exs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;VERSION&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;PROTOBUF_EX_VERSION&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;protobuf_dependency_version&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;PROTOBUF_EX_VERSION&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;read!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;trim&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;VERSION&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;read!&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-keyword z-operator z-pipe z-elixir&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-class z-elixir&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-method z-elixir&quot;&gt;.&lt;/span&gt;trim&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are a couple of peculiar things here. First, we read the version of the library from a magic &lt;code&gt;VERSION&lt;/code&gt; file. We keep this file alongside the &lt;code&gt;.proto&lt;/code&gt; schemas. This file contains the version of the schemas themselves. Keeping it alongside the schemas means that we can copy it over in the right places when building libraries for different languages so that the &lt;code&gt;events_schemas&lt;/code&gt; library can have the same version across all target languages. We copy this file to the root of the &lt;code&gt;events_schemas&lt;/code&gt; Elixir directory before building and publishing the library. We use a similar idea for the &lt;code&gt;PROTOBUF_EX_VERSION&lt;/code&gt; file. This file contains the version of the protobuf-elixir library that we use. We keep that in a separate file so that we can make sure it&apos;s the same between the plugin for the &lt;code&gt;protoc&lt;/code&gt; compiler as well as the dependency of the &lt;code&gt;events_schemas&lt;/code&gt; library.&lt;/p&gt;&lt;p&gt;Other that the things we just talked about, this looks like a pretty standard &lt;code&gt;mix.exs&lt;/code&gt; file. Now, the magic happens in CI.&lt;/p&gt;&lt;h3 id=&quot;concourse-ci&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#concourse-ci&quot; aria-label=&quot;Anchor link for: concourse-ci&quot;&gt;Concourse CI&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Our CI system of choice is &lt;a href=&quot;https://concourse-ci.org&quot;&gt;Concourse CI&lt;/a&gt;. Concourse lets you define pipelines with different steps. Here, we&apos;re interested in the last step of our CI pipeline: publishing the libraries for all the languages. Our Concourse pipeline looks like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://andrealeopardi.com/posts/sharing-protobuf-schemas-across-services/concourse.png&quot; alt=&quot;Screenshot of our Concourse CI pipeline&quot; /&gt;&lt;/p&gt;&lt;p&gt;The last step, &lt;code&gt;build-and-publish&lt;/code&gt;, is triggered manually by clicking on it and telling it to start. This means that if you want to release a new version of the &lt;code&gt;events_schemas&lt;/code&gt; library in all languages, you have to go to Concourse and click this. That&apos;s all you need to do. Note that we have Docker containers that build and publish the library for each target language so that we don&apos;t have to install anything on the CI system. At this point, Concourse will do the same routine for all target languages:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Copy all the necessary version files to the right places.&lt;/li&gt;&lt;li&gt;Generate code for the Protobuf schemas through &lt;code&gt;protoc&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Publish to the right package repository (for example, &lt;a href=&quot;https://hex.pm&quot;&gt;hex.pm&lt;/a&gt; for Elixir).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;That&apos;s all. Now, our services can depend on an actual library that contains the auto-generated code representing the Protobuf schemas that we use. However, services don&apos;t need to have access to the original &lt;code&gt;.proto&lt;/code&gt; files containing the schemas. We&apos;re delighted with this system since it feels streamlined and straightforward to use, while providing everything we need.&lt;/p&gt;&lt;h3 id=&quot;encore-multiple-protobuf-packages&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#encore-multiple-protobuf-packages&quot; aria-label=&quot;Anchor link for: encore-multiple-protobuf-packages&quot;&gt;Encore: multiple Protobuf packages&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We moved even a bit further than what I described. In fact, currently we have three Protobuf packages: one for common custom types, one for events, and one for inter-service RPCs. The events and RPC packages both depend on the custom types package. The way we solve the inter-package dependencies is to simply publish the &lt;code&gt;types_schemas&lt;/code&gt; libraries first and then depend on that library from the &lt;code&gt;events_schemas&lt;/code&gt; and &lt;code&gt;rpc_schemas&lt;/code&gt; libraries. For example, in Elixir we changed the &lt;code&gt;mix.exs&lt;/code&gt; file we looked at earlier (for the &lt;code&gt;events_schemas&lt;/code&gt; library) and added the dependency:&lt;/p&gt;&lt;pre data-lang=&quot;elixir&quot; class=&quot;language-elixir z-code&quot;&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-function z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;defp&lt;/span&gt;&lt;span class=&quot;z-entity z-name z-function z-private z-elixir&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;z-keyword z-control z-module z-elixir&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;protobuf&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt; protobuf_dependency_version&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-function z-elixir&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-object z-elixir&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-elixir&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-symbol z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;types_schemas&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;0.1.0&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-elixir&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;z-constant z-other z-keywords z-elixir&quot;&gt;organization&lt;span class=&quot;z-punctuation z-definition z-constant z-elixir&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-meta z-string z-elixir&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;community&lt;span class=&quot;z-punctuation z-definition z-string z-end z-elixir&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-elixir&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-array z-elixir&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;z-source z-elixir&quot;&gt;&lt;span class=&quot;z-keyword z-control z-elixir&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To recap, our Protobuf pipeline and workflow currently work like this. First, you make changes to a Protobuf schema. Then, you bump a version in a file. Then, you push those changes up to GitHub. Once CI makes sure you didn&apos;t break anything, you log into Concourse and kick-start the &lt;code&gt;build-and-publish&lt;/code&gt; task. A new version of the right library gets published to different package repositories for different languages. It&apos;s not the simplest system, but the workflow is easy to use and effective. Most of all, this workflow can apply to most programming languages and make it easier to manage versioning and evolving shared collections of Protobuf schemas.&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;andrealeopardi.com&#x2F;posts&#x2F;sharing-protobuf-schemas-across-services&#x2F;&quot;&gt;Sharing Protobuf schemas across services&lt;/a&gt; was originally published by Andrea Leopardi at &lt;a href=&quot;https:&#x2F;&#x2F;andrealeopardi.com&#x2F;&quot;&gt;Andrea Leopardi&lt;/a&gt; on February 24, 2020.&lt;/p&gt;</content>
    
    </entry>
  
</feed>
